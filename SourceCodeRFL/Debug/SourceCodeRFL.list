
SourceCodeRFL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800a1f8  0800a1f8  0001a1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7ec  0800a7ec  0002023c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7ec  0800a7ec  0002023c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7ec  0800a7ec  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7ec  0800a7ec  0001a7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800a7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000023c  0800aa30  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800aa30  000204e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001174c  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae5  00000000  00000000  000319b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00034498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00035420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0f4  00000000  00000000  00036280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136d0  00000000  00000000  00050374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919d8  00000000  00000000  00063a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f541c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b4  00000000  00000000  000f546c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000023c 	.word	0x2000023c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a1e0 	.word	0x0800a1e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000240 	.word	0x20000240
 800014c:	0800a1e0 	.word	0x0800a1e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	if(rxByte == '\r')
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b0d      	cmp	r3, #13
 8000fde:	d11d      	bne.n	800101c <HAL_UART_RxCpltCallback+0x4c>
	{
		en_state_robot = bluetooth_check_string_stop_start_robot(rxBuffer);
 8000fe0:	481e      	ldr	r0, [pc, #120]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 8000fe2:	f005 fe2b 	bl	8006c3c <bluetooth_check_string_stop_start_robot>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_UART_RxCpltCallback+0x90>)
 8000fec:	701a      	strb	r2, [r3, #0]
		bluetooth_rx_change_kx(rxBuffer);
 8000fee:	481b      	ldr	r0, [pc, #108]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 8000ff0:	f005 feae 	bl	8006d50 <bluetooth_rx_change_kx>
		change_line_sensor_read(rxBuffer);
 8000ff4:	4819      	ldr	r0, [pc, #100]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 8000ff6:	f006 f923 	bl	8007240 <change_line_sensor_read>
		for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e009      	b.n	8001014 <HAL_UART_RxCpltCallback+0x44>
		{
			rxBuffer[i] = 0;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 8001004:	2100      	movs	r1, #0
 8001006:	54d1      	strb	r1, [r2, r3]
			rxBufferIndex = 0;
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_UART_RxCpltCallback+0x94>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b09      	cmp	r3, #9
 8001018:	d9f2      	bls.n	8001000 <HAL_UART_RxCpltCallback+0x30>
 800101a:	e00c      	b.n	8001036 <HAL_UART_RxCpltCallback+0x66>
		}
	}
	else
	{
		rxBuffer[rxBufferIndex] = rxByte;
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_UART_RxCpltCallback+0x94>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 8001024:	7819      	ldrb	r1, [r3, #0]
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_UART_RxCpltCallback+0x8c>)
 8001028:	5499      	strb	r1, [r3, r2]
		rxBufferIndex++;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_UART_RxCpltCallback+0x94>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_UART_RxCpltCallback+0x94>)
 8001034:	701a      	strb	r2, [r3, #0]
	}
	if(rxBufferIndex >= 20)
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_UART_RxCpltCallback+0x94>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b13      	cmp	r3, #19
 800103c:	d902      	bls.n	8001044 <HAL_UART_RxCpltCallback+0x74>
	{
		rxBufferIndex = 0;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_UART_RxCpltCallback+0x94>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	4904      	ldr	r1, [pc, #16]	; (8001058 <HAL_UART_RxCpltCallback+0x88>)
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <HAL_UART_RxCpltCallback+0x98>)
 800104a:	f003 ff82 	bl	8004f52 <HAL_UART_Receive_IT>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200003aa 	.word	0x200003aa
 800105c:	200003ac 	.word	0x200003ac
 8001060:	2000000e 	.word	0x2000000e
 8001064:	200003b6 	.word	0x200003b6
 8001068:	20000360 	.word	0x20000360

0800106c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	static uint8_t tim3_1ms_count = 0;
	static uint16_t tim3_100ms_count = 0;
	if (htim->Instance == TIM4)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10f      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3_1ms_count++;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001088:	701a      	strb	r2, [r3, #0]
		if(tim3_1ms_count	== 10)
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d105      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim3_1ms_count = 0;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
			tim3_1ms_flag = 1;
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM4)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d110      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		tim3_100ms_count++;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010b2:	801a      	strh	r2, [r3, #0]
		if(tim3_100ms_count	== 1000)
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010bc:	d105      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			tim3_100ms_count = 0;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	801a      	strh	r2, [r3, #0]
			tim3_100ms_flag = 1;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40000800 	.word	0x40000800
 80010d8:	200003b7 	.word	0x200003b7
 80010dc:	200003a8 	.word	0x200003a8
 80010e0:	200003b8 	.word	0x200003b8
 80010e4:	200003a9 	.word	0x200003a9

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	b08d      	sub	sp, #52	; 0x34
 80010ec:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ee:	f000 fddd 	bl	8001cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f2:	f000 f8a5 	bl	8001240 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f6:	f000 faa7 	bl	8001648 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010fa:	f000 f8fd 	bl	80012f8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80010fe:	f000 f939 	bl	8001374 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001102:	f000 fa77 	bl	80015f4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001106:	f000 f9a9 	bl	800145c <MX_TIM2_Init>
  MX_TIM4_Init();
 800110a:	f000 fa27 	bl	800155c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  IC74HC4051_Init(hadc1, GPIOA, SA_4051_Pin, SB_4051_Pin, SC_4051_Pin);												// Port: ADC COM // Pin: S0 S1 S2
 800110e:	4e3e      	ldr	r6, [pc, #248]	; (8001208 <main+0x120>)
 8001110:	2340      	movs	r3, #64	; 0x40
 8001112:	930b      	str	r3, [sp, #44]	; 0x2c
 8001114:	2304      	movs	r3, #4
 8001116:	930a      	str	r3, [sp, #40]	; 0x28
 8001118:	2302      	movs	r3, #2
 800111a:	9309      	str	r3, [sp, #36]	; 0x24
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <main+0x124>)
 800111e:	9308      	str	r3, [sp, #32]
 8001120:	466d      	mov	r5, sp
 8001122:	f106 0410 	add.w	r4, r6, #16
 8001126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800112a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800112e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001132:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001136:	f004 fe31 	bl	8005d9c <IC74HC4051_Init>
  IC74HC595_Init(GPIOA, GPIOA, ST_595_GPIO_Port, DA_595_Pin, SH_595_Pin, ST_595_Pin);								// DS SH ST
 800113a:	2320      	movs	r3, #32
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	2308      	movs	r3, #8
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	4a31      	ldr	r2, [pc, #196]	; (800120c <main+0x124>)
 8001146:	4931      	ldr	r1, [pc, #196]	; (800120c <main+0x124>)
 8001148:	4830      	ldr	r0, [pc, #192]	; (800120c <main+0x124>)
 800114a:	f004 fe59 	bl	8005e00 <IC74HC595_Init>
 	/*Init GPIO Motor for Lib*/
  		TimerInit(	&htim2, &htim2,																					\
 800114e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001152:	9303      	str	r3, [sp, #12]
 8001154:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <main+0x128>)
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <main+0x124>)
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2304      	movs	r3, #4
 8001164:	2200      	movs	r2, #0
 8001166:	492b      	ldr	r1, [pc, #172]	; (8001214 <main+0x12c>)
 8001168:	482a      	ldr	r0, [pc, #168]	; (8001214 <main+0x12c>)
 800116a:	f005 fae9 	bl	8006740 <TimerInit>
  					TIM_CHANNEL_1, TIM_CHANNEL_2, 																	\
					DIR_RIGHT_GPIO_Port, DIR_RIGHT_Pin, 															\
					DIR_LEFT_GPIO_Port, DIR_LEFT_Pin);																\
	/*Init GPIO UART for Lib*/
		bluetooth_init_UART(&huart3);
 800116e:	482a      	ldr	r0, [pc, #168]	; (8001218 <main+0x130>)
 8001170:	f005 fd52 	bl	8006c18 <bluetooth_init_UART>
	/*Init GPIO UART for Lib*/
//		HC_SR04_init(htim1, TIM_CHANNEL_1, TIM_CHANNEL_1, TIM_IT_CC1, TRIG_PORT, TRIG_PIN);
	/*Start counter timer*/
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001174:	2100      	movs	r1, #0
 8001176:	4827      	ldr	r0, [pc, #156]	; (8001214 <main+0x12c>)
 8001178:	f002 fc62 	bl	8003a40 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800117c:	2104      	movs	r1, #4
 800117e:	4825      	ldr	r0, [pc, #148]	; (8001214 <main+0x12c>)
 8001180:	f002 fc5e 	bl	8003a40 <HAL_TIM_PWM_Start>

		HAL_TIM_Base_Start_IT(&htim4);
 8001184:	4825      	ldr	r0, [pc, #148]	; (800121c <main+0x134>)
 8001186:	f002 fbb1 	bl	80038ec <HAL_TIM_Base_Start_IT>

		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800118a:	2100      	movs	r1, #0
 800118c:	4824      	ldr	r0, [pc, #144]	; (8001220 <main+0x138>)
 800118e:	f002 fd51 	bl	8003c34 <HAL_TIM_IC_Start_IT>

	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	4923      	ldr	r1, [pc, #140]	; (8001224 <main+0x13c>)
 8001196:	4820      	ldr	r0, [pc, #128]	; (8001218 <main+0x130>)
 8001198:	f003 fedb 	bl	8004f52 <HAL_UART_Receive_IT>
//			{
//				tim3_100ms_flag = 0;
//				dis = HCSR04_GetDis(); 	/*Value dis: robot_block*/
//			}
		/*Start by bluetooth*/
			switch(en_state_robot)
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <main+0x140>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d82d      	bhi.n	8001200 <main+0x118>
 80011a4:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <main+0xc4>)
 80011a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011aa:	bf00      	nop
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	080011d9 	.word	0x080011d9
 80011b4:	080011e9 	.word	0x080011e9
 80011b8:	08001201 	.word	0x08001201
 80011bc:	080011ed 	.word	0x080011ed
			{
				case START_ROBOT:
					if(tim3_1ms_flag == 1)
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <main+0x144>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d11d      	bne.n	8001204 <main+0x11c>
					{
						tim3_1ms_flag = 0;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <main+0x144>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
						PID_control(kx, threshold_main_def);
 80011ce:	4918      	ldr	r1, [pc, #96]	; (8001230 <main+0x148>)
 80011d0:	4818      	ldr	r0, [pc, #96]	; (8001234 <main+0x14c>)
 80011d2:	f004 fd57 	bl	8005c84 <PID_control>
					}
					break;
 80011d6:	e015      	b.n	8001204 <main+0x11c>
				case STOP_ROBOT:
					motor_move(0, 0);
 80011d8:	2100      	movs	r1, #0
 80011da:	2000      	movs	r0, #0
 80011dc:	f005 fd0c 	bl	8006bf8 <motor_move>
					IC74HC595(0x00);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f004 fed1 	bl	8005f88 <IC74HC595>
					break;
 80011e6:	e00e      	b.n	8001206 <main+0x11e>
				case CHECK_THRESHOLD:
					__NOP();
 80011e8:	bf00      	nop
					break;
 80011ea:	e00c      	b.n	8001206 <main+0x11e>
				case POWER:
					motor_move(basespeedr, basespeedl);
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <main+0x150>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <main+0x154>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4610      	mov	r0, r2
 80011fa:	f005 fcfd 	bl	8006bf8 <motor_move>
					break;
 80011fe:	e002      	b.n	8001206 <main+0x11e>
				default:
					break;
 8001200:	bf00      	nop
 8001202:	e7cb      	b.n	800119c <main+0xb4>
					break;
 8001204:	bf00      	nop
			switch(en_state_robot)
 8001206:	e7c9      	b.n	800119c <main+0xb4>
 8001208:	20000258 	.word	0x20000258
 800120c:	40010800 	.word	0x40010800
 8001210:	40010c00 	.word	0x40010c00
 8001214:	200002d0 	.word	0x200002d0
 8001218:	20000360 	.word	0x20000360
 800121c:	20000318 	.word	0x20000318
 8001220:	20000288 	.word	0x20000288
 8001224:	200003aa 	.word	0x200003aa
 8001228:	2000000e 	.word	0x2000000e
 800122c:	200003a8 	.word	0x200003a8
 8001230:	20000000 	.word	0x20000000
 8001234:	20000020 	.word	0x20000020
 8001238:	20000019 	.word	0x20000019
 800123c:	2000001a 	.word	0x2000001a

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124a:	2228      	movs	r2, #40	; 0x28
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f006 f880 	bl	8007354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001270:	2301      	movs	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127e:	2301      	movs	r3, #1
 8001280:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001282:	2302      	movs	r3, #2
 8001284:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800128c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001290:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fd5c 	bl	8002d54 <HAL_RCC_OscConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80012a2:	f000 fa33 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a6:	230f      	movs	r3, #15
 80012a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012b2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80012b8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	2102      	movs	r1, #2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f001 ffc7 	bl	8003258 <HAL_RCC_ClockConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d0:	f000 fa1c 	bl	800170c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012d4:	2302      	movs	r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 f948 	bl	8003574 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012ea:	f000 fa0f 	bl	800170c <Error_Handler>
  }
}
 80012ee:	bf00      	nop
 80012f0:	3750      	adds	r7, #80	; 0x50
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_ADC1_Init+0x74>)
 800130a:	4a19      	ldr	r2, [pc, #100]	; (8001370 <MX_ADC1_Init+0x78>)
 800130c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_ADC1_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_ADC1_Init+0x74>)
 8001316:	2201      	movs	r2, #1
 8001318:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_ADC1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_ADC1_Init+0x74>)
 8001322:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001326:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_ADC1_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_ADC1_Init+0x74>)
 8001330:	2201      	movs	r2, #1
 8001332:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_ADC1_Init+0x74>)
 8001336:	f000 fd3f 	bl	8001db8 <HAL_ADC_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001340:	f000 f9e4 	bl	800170c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001344:	2304      	movs	r3, #4
 8001346:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001348:	2301      	movs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800134c:	2307      	movs	r3, #7
 800134e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_ADC1_Init+0x74>)
 8001356:	f000 fff3 	bl	8002340 <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001360:	f000 f9d4 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000258 	.word	0x20000258
 8001370:	40012400 	.word	0x40012400

08001374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001392:	463b      	mov	r3, r7
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013a0:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <MX_TIM1_Init+0xe4>)
 80013a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 80013a4:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013a6:	2223      	movs	r2, #35	; 0x23
 80013a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013be:	4b25      	ldr	r3, [pc, #148]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ca:	4822      	ldr	r0, [pc, #136]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013cc:	f002 fa3e 	bl	800384c <HAL_TIM_Base_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80013d6:	f000 f999 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	4619      	mov	r1, r3
 80013e6:	481b      	ldr	r0, [pc, #108]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013e8:	f002 ff96 	bl	8004318 <HAL_TIM_ConfigClockSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013f2:	f000 f98b 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013f6:	4817      	ldr	r0, [pc, #92]	; (8001454 <MX_TIM1_Init+0xe0>)
 80013f8:	f002 fbc4 	bl	8003b84 <HAL_TIM_IC_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001402:	f000 f983 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <MX_TIM1_Init+0xe0>)
 8001416:	f003 fc59 	bl	8004ccc <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001420:	f000 f974 	bl	800170c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001424:	2300      	movs	r3, #0
 8001426:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001428:	2301      	movs	r3, #1
 800142a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM1_Init+0xe0>)
 800143c:	f002 fe0e 	bl	800405c <HAL_TIM_IC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001446:	f000 f961 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000288 	.word	0x20000288
 8001458:	40012c00 	.word	0x40012c00

0800145c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08e      	sub	sp, #56	; 0x38
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
 8001488:	615a      	str	r2, [r3, #20]
 800148a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <MX_TIM2_Init+0xfc>)
 800148e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001492:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <MX_TIM2_Init+0xfc>)
 8001496:	2223      	movs	r2, #35	; 0x23
 8001498:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <MX_TIM2_Init+0xfc>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <MX_TIM2_Init+0xfc>)
 80014a2:	2263      	movs	r2, #99	; 0x63
 80014a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <MX_TIM2_Init+0xfc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <MX_TIM2_Init+0xfc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b2:	4829      	ldr	r0, [pc, #164]	; (8001558 <MX_TIM2_Init+0xfc>)
 80014b4:	f002 f9ca 	bl	800384c <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80014be:	f000 f925 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4822      	ldr	r0, [pc, #136]	; (8001558 <MX_TIM2_Init+0xfc>)
 80014d0:	f002 ff22 	bl	8004318 <HAL_TIM_ConfigClockSource>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80014da:	f000 f917 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <MX_TIM2_Init+0xfc>)
 80014e0:	f002 fa56 	bl	8003990 <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80014ea:	f000 f90f 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	4619      	mov	r1, r3
 80014fc:	4816      	ldr	r0, [pc, #88]	; (8001558 <MX_TIM2_Init+0xfc>)
 80014fe:	f003 fbe5 	bl	8004ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001508:	f000 f900 	bl	800170c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150c:	2360      	movs	r3, #96	; 0x60
 800150e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_TIM2_Init+0xfc>)
 8001524:	f002 fe36 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800152e:	f000 f8ed 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2204      	movs	r2, #4
 8001536:	4619      	mov	r1, r3
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM2_Init+0xfc>)
 800153a:	f002 fe2b 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001544:	f000 f8e2 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM2_Init+0xfc>)
 800154a:	f000 f9c9 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 800154e:	bf00      	nop
 8001550:	3738      	adds	r7, #56	; 0x38
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200002d0 	.word	0x200002d0

0800155c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <MX_TIM4_Init+0x90>)
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <MX_TIM4_Init+0x94>)
 800157c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 800157e:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <MX_TIM4_Init+0x90>)
 8001580:	2223      	movs	r2, #35	; 0x23
 8001582:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <MX_TIM4_Init+0x90>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <MX_TIM4_Init+0x90>)
 800158c:	2263      	movs	r2, #99	; 0x63
 800158e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_TIM4_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <MX_TIM4_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800159c:	4813      	ldr	r0, [pc, #76]	; (80015ec <MX_TIM4_Init+0x90>)
 800159e:	f002 f955 	bl	800384c <HAL_TIM_Base_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80015a8:	f000 f8b0 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <MX_TIM4_Init+0x90>)
 80015ba:	f002 fead 	bl	8004318 <HAL_TIM_ConfigClockSource>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80015c4:	f000 f8a2 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015d0:	463b      	mov	r3, r7
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_TIM4_Init+0x90>)
 80015d6:	f003 fb79 	bl	8004ccc <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80015e0:	f000 f894 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000318 	.word	0x20000318
 80015f0:	40000800 	.word	0x40000800

080015f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_USART3_UART_Init+0x50>)
 80015fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 8001600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001604:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 800161a:	220c      	movs	r2, #12
 800161c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 8001626:	2200      	movs	r2, #0
 8001628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_USART3_UART_Init+0x4c>)
 800162c:	f003 fbbe 	bl	8004dac <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001636:	f000 f869 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000360 	.word	0x20000360
 8001644:	40004800 	.word	0x40004800

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <MX_GPIO_Init+0xb8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a27      	ldr	r2, [pc, #156]	; (8001700 <MX_GPIO_Init+0xb8>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <MX_GPIO_Init+0xb8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_GPIO_Init+0xb8>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <MX_GPIO_Init+0xb8>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_GPIO_Init+0xb8>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_GPIO_Init+0xb8>)
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <MX_GPIO_Init+0xb8>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6193      	str	r3, [r2, #24]
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_GPIO_Init+0xb8>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	f003 0308 	and.w	r3, r3, #8
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DA_595_Pin|SA_4051_Pin|SB_4051_Pin|SH_595_Pin
 80016a4:	2200      	movs	r2, #0
 80016a6:	f240 616f 	movw	r1, #1647	; 0x66f
 80016aa:	4816      	ldr	r0, [pc, #88]	; (8001704 <MX_GPIO_Init+0xbc>)
 80016ac:	f001 fb20 	bl	8002cf0 <HAL_GPIO_WritePin>
                          |ST_595_Pin|SC_4051_Pin|GPIO_PIN_9|DIR_RIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_LEFT_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80016b6:	4814      	ldr	r0, [pc, #80]	; (8001708 <MX_GPIO_Init+0xc0>)
 80016b8:	f001 fb1a 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DA_595_Pin SA_4051_Pin SB_4051_Pin SH_595_Pin
                           ST_595_Pin SC_4051_Pin PA9 DIR_RIGHT_Pin */
  GPIO_InitStruct.Pin = DA_595_Pin|SA_4051_Pin|SB_4051_Pin|SH_595_Pin
 80016bc:	f240 636f 	movw	r3, #1647	; 0x66f
 80016c0:	613b      	str	r3, [r7, #16]
                          |ST_595_Pin|SC_4051_Pin|GPIO_PIN_9|DIR_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <MX_GPIO_Init+0xbc>)
 80016d6:	f001 f987 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_LEFT_Pin PB9 */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|GPIO_PIN_9;
 80016da:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 80016de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_GPIO_Init+0xc0>)
 80016f4:	f001 f978 	bl	80029e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	40010800 	.word	0x40010800
 8001708:	40010c00 	.word	0x40010c00

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x8>
	...

08001718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_MspInit+0x5c>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a14      	ldr	r2, [pc, #80]	; (8001774 <HAL_MspInit+0x5c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_MspInit+0x5c>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x5c>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_MspInit+0x5c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x5c>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_MspInit+0x60>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_MspInit+0x60>)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000

0800177c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0310 	add.w	r3, r7, #16
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_ADC_MspInit+0x6c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d121      	bne.n	80017e0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <HAL_ADC_MspInit+0x70>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	4a12      	ldr	r2, [pc, #72]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6193      	str	r3, [r2, #24]
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_ADC_MspInit+0x70>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017cc:	2310      	movs	r3, #16
 80017ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_ADC_MspInit+0x74>)
 80017dc:	f001 f904 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40012400 	.word	0x40012400
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010800 	.word	0x40010800

080017f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a30      	ldr	r2, [pc, #192]	; (80018d0 <HAL_TIM_Base_MspInit+0xdc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d12d      	bne.n	8001870 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001814:	4b2f      	ldr	r3, [pc, #188]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 800181a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_HC_SR04_ECHO_Pin;
 8001844:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TIM1_CH1_HC_SR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	4619      	mov	r1, r3
 8001858:	481f      	ldr	r0, [pc, #124]	; (80018d8 <HAL_TIM_Base_MspInit+0xe4>)
 800185a:	f001 f8c5 	bl	80029e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	201b      	movs	r0, #27
 8001864:	f000 ffd7 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001868:	201b      	movs	r0, #27
 800186a:	f000 fff0 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800186e:	e02a      	b.n	80018c6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d10c      	bne.n	8001894 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a15      	ldr	r2, [pc, #84]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
}
 8001892:	e018      	b.n	80018c6 <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a10      	ldr	r2, [pc, #64]	; (80018dc <HAL_TIM_Base_MspInit+0xe8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d113      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 80018a4:	f043 0304 	orr.w	r3, r3, #4
 80018a8:	61d3      	str	r3, [r2, #28]
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <HAL_TIM_Base_MspInit+0xe0>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2105      	movs	r1, #5
 80018ba:	201e      	movs	r0, #30
 80018bc:	f000 ffab 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018c0:	201e      	movs	r0, #30
 80018c2:	f000 ffc4 	bl	800284e <HAL_NVIC_EnableIRQ>
}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40012c00 	.word	0x40012c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40010800 	.word	0x40010800
 80018dc:	40000800 	.word	0x40000800

080018e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fe:	d142      	bne.n	8001986 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_TIM_MspPostInit+0xb0>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_TIM_MspPostInit+0xb0>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_TIM_MspPostInit+0xb0>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_TIM_MspPostInit+0xb0>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a1c      	ldr	r2, [pc, #112]	; (8001990 <HAL_TIM_MspPostInit+0xb0>)
 800191e:	f043 0308 	orr.w	r3, r3, #8
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_TIM_MspPostInit+0xb0>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2302      	movs	r3, #2
 800193c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <HAL_TIM_MspPostInit+0xb4>)
 8001946:	f001 f84f 	bl	80029e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800194a:	2308      	movs	r3, #8
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	480e      	ldr	r0, [pc, #56]	; (8001998 <HAL_TIM_MspPostInit+0xb8>)
 800195e:	f001 f843 	bl	80029e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_TIM_MspPostInit+0xbc>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_TIM_MspPostInit+0xbc>)
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	40010800 	.word	0x40010800
 8001998:	40010c00 	.word	0x40010c00
 800199c:	40010000 	.word	0x40010000

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <HAL_UART_MspInit+0x9c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d139      	bne.n	8001a34 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <HAL_UART_MspInit+0xa0>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <HAL_UART_MspInit+0xa0>)
 80019c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ca:	61d3      	str	r3, [r2, #28]
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_UART_MspInit+0xa0>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_UART_MspInit+0xa0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <HAL_UART_MspInit+0xa0>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_UART_MspInit+0xa0>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019fa:	2303      	movs	r3, #3
 80019fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4619      	mov	r1, r3
 8001a04:	480f      	ldr	r0, [pc, #60]	; (8001a44 <HAL_UART_MspInit+0xa4>)
 8001a06:	f000 ffef 	bl	80029e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <HAL_UART_MspInit+0xa4>)
 8001a20:	f000 ffe2 	bl	80029e8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	210a      	movs	r1, #10
 8001a28:	2027      	movs	r0, #39	; 0x27
 8001a2a:	f000 fef4 	bl	8002816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a2e:	2027      	movs	r0, #39	; 0x27
 8001a30:	f000 ff0d 	bl	800284e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a34:	bf00      	nop
 8001a36:	3720      	adds	r7, #32
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40004800 	.word	0x40004800
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010c00 	.word	0x40010c00

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8e:	f000 f953 	bl	8001d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <TIM1_CC_IRQHandler+0x10>)
 8001a9e:	f002 f9d5 	bl	8003e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000288 	.word	0x20000288

08001aac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <TIM4_IRQHandler+0x10>)
 8001ab2:	f002 f9cb 	bl	8003e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000318 	.word	0x20000318

08001ac0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <USART3_IRQHandler+0x10>)
 8001ac6:	f003 fa69 	bl	8004f9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000360 	.word	0x20000360

08001ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <_kill>:

int _kill(int pid, int sig)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aec:	f005 fbfa 	bl	80072e4 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2216      	movs	r2, #22
 8001af4:	601a      	str	r2, [r3, #0]
  return -1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_exit>:

void _exit (int status)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffe7 	bl	8001ae2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b14:	e7fe      	b.n	8001b14 <_exit+0x12>

08001b16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e00a      	b.n	8001b3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b28:	f3af 8000 	nop.w
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	60ba      	str	r2, [r7, #8]
 8001b34:	b2ca      	uxtb	r2, r1
 8001b36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbf0      	blt.n	8001b28 <_read+0x12>
  }

  return len;
 8001b46:	687b      	ldr	r3, [r7, #4]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e009      	b.n	8001b76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	60ba      	str	r2, [r7, #8]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbf1      	blt.n	8001b62 <_write+0x12>
  }
  return len;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_close>:

int _close(int file)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bae:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <_isatty>:

int _isatty(int file)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc4:	2301      	movs	r3, #1
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf0:	4a14      	ldr	r2, [pc, #80]	; (8001c44 <_sbrk+0x5c>)
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <_sbrk+0x60>)
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <_sbrk+0x64>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	; (8001c50 <_sbrk+0x68>)
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d207      	bcs.n	8001c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c18:	f005 fb64 	bl	80072e4 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	220c      	movs	r2, #12
 8001c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e009      	b.n	8001c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <_sbrk+0x64>)
 8001c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20005000 	.word	0x20005000
 8001c48:	00000400 	.word	0x00000400
 8001c4c:	200003bc 	.word	0x200003bc
 8001c50:	200004e8 	.word	0x200004e8

08001c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c60:	f7ff fff8 	bl	8001c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c66:	490c      	ldr	r1, [pc, #48]	; (8001c98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c68:	4a0c      	ldr	r2, [pc, #48]	; (8001c9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c7c:	4c09      	ldr	r4, [pc, #36]	; (8001ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c8a:	f005 fb31 	bl	80072f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c8e:	f7ff fa2b 	bl	80010e8 <main>
  bx lr
 8001c92:	4770      	bx	lr
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8001c9c:	0800a7f4 	.word	0x0800a7f4
  ldr r2, =_sbss
 8001ca0:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8001ca4:	200004e4 	.word	0x200004e4

08001ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC1_2_IRQHandler>
	...

08001cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_Init+0x28>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_Init+0x28>)
 8001cb6:	f043 0310 	orr.w	r3, r3, #16
 8001cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f000 fd9f 	bl	8002800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc2:	2008      	movs	r0, #8
 8001cc4:	f000 f808 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc8:	f7ff fd26 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x54>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x58>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 fdb7 	bl	800286a <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b0f      	cmp	r3, #15
 8001d0a:	d80a      	bhi.n	8001d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f000 fd7f 	bl	8002816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <HAL_InitTick+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e000      	b.n	8001d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000010 	.word	0x20000010
 8001d30:	20000018 	.word	0x20000018
 8001d34:	20000014 	.word	0x20000014

08001d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x1c>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_IncTick+0x20>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_IncTick+0x20>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000018 	.word	0x20000018
 8001d58:	200003c0 	.word	0x200003c0

08001d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_GetTick+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	200003c0 	.word	0x200003c0

08001d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fff0 	bl	8001d5c <HAL_GetTick>
 8001d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d005      	beq.n	8001d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_Delay+0x44>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d96:	bf00      	nop
 8001d98:	f7ff ffe0 	bl	8001d5c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d8f7      	bhi.n	8001d98 <HAL_Delay+0x28>
  {
  }
}
 8001da8:	bf00      	nop
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000018 	.word	0x20000018

08001db8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0be      	b.n	8001f58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fcc0 	bl	800177c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fbf1 	bl	80025e4 <ADC_ConversionStop_Disable>
 8001e02:	4603      	mov	r3, r0
 8001e04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 8099 	bne.w	8001f46 <HAL_ADC_Init+0x18e>
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 8095 	bne.w	8001f46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e24:	f023 0302 	bic.w	r3, r3, #2
 8001e28:	f043 0202 	orr.w	r2, r3, #2
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7b1b      	ldrb	r3, [r3, #12]
 8001e3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e50:	d003      	beq.n	8001e5a <HAL_ADC_Init+0xa2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_ADC_Init+0xa8>
 8001e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_Init+0xaa>
 8001e60:	2300      	movs	r3, #0
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7d1b      	ldrb	r3, [r3, #20]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d119      	bne.n	8001ea4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7b1b      	ldrb	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	035a      	lsls	r2, r3, #13
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <HAL_ADC_Init+0x1a8>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed4:	d003      	beq.n	8001ede <HAL_ADC_Init+0x126>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d104      	bne.n	8001ee8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	051b      	lsls	r3, r3, #20
 8001ee6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_ADC_Init+0x1ac>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10b      	bne.n	8001f24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f023 0303 	bic.w	r3, r3, #3
 8001f1a:	f043 0201 	orr.w	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f22:	e018      	b.n	8001f56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	f023 0312 	bic.w	r3, r3, #18
 8001f2c:	f043 0210 	orr.w	r2, r3, #16
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f043 0201 	orr.w	r2, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f44:	e007      	b.n	8001f56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f043 0210 	orr.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	ffe1f7fd 	.word	0xffe1f7fd
 8001f64:	ff1f0efe 	.word	0xff1f0efe

08001f68 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_Start+0x1a>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e098      	b.n	80020b4 <HAL_ADC_Start+0x14c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fad0 	bl	8002530 <ADC_Enable>
 8001f90:	4603      	mov	r3, r0
 8001f92:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 8087 	bne.w	80020aa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a41      	ldr	r2, [pc, #260]	; (80020bc <HAL_ADC_Start+0x154>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d105      	bne.n	8001fc6 <HAL_ADC_Start+0x5e>
 8001fba:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_ADC_Start+0x158>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d115      	bne.n	8001ff2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d026      	beq.n	800202e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fe8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ff0:	e01d      	b.n	800202e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <HAL_ADC_Start+0x158>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d004      	beq.n	8002012 <HAL_ADC_Start+0xaa>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <HAL_ADC_Start+0x154>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d10d      	bne.n	800202e <HAL_ADC_Start+0xc6>
 8002012:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_ADC_Start+0x158>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002026:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f023 0206 	bic.w	r2, r3, #6
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c
 8002046:	e002      	b.n	800204e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0202 	mvn.w	r2, #2
 800205e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800206a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800206e:	d113      	bne.n	8002098 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_ADC_Start+0x154>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d105      	bne.n	8002086 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_ADC_Start+0x158>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	e00c      	b.n	80020b2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e003      	b.n	80020b2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40012800 	.word	0x40012800
 80020c0:	40012400 	.word	0x40012400

080020c4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_ADC_Stop+0x1a>
 80020da:	2302      	movs	r3, #2
 80020dc:	e01a      	b.n	8002114 <HAL_ADC_Stop+0x50>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fa7c 	bl	80025e4 <ADC_ConversionStop_Disable>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002132:	f7ff fe13 	bl	8001d5c <HAL_GetTick>
 8002136:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00b      	beq.n	800215e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	f043 0220 	orr.w	r2, r3, #32
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0d3      	b.n	8002306 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d131      	bne.n	80021d0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d12a      	bne.n	80021d0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800217a:	e021      	b.n	80021c0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d01d      	beq.n	80021c0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_ADC_PollForConversion+0x7e>
 800218a:	f7ff fde7 	bl	8001d5c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d212      	bcs.n	80021c0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f043 0204 	orr.w	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0a2      	b.n	8002306 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0d6      	beq.n	800217c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021ce:	e070      	b.n	80022b2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021d0:	4b4f      	ldr	r3, [pc, #316]	; (8002310 <HAL_ADC_PollForConversion+0x1f4>)
 80021d2:	681c      	ldr	r4, [r3, #0]
 80021d4:	2002      	movs	r0, #2
 80021d6:	f001 fa83 	bl	80036e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80021da:	4603      	mov	r3, r0
 80021dc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6919      	ldr	r1, [r3, #16]
 80021e6:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_ADC_PollForConversion+0x1f8>)
 80021e8:	400b      	ands	r3, r1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d118      	bne.n	8002220 <HAL_ADC_PollForConversion+0x104>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68d9      	ldr	r1, [r3, #12]
 80021f4:	4b48      	ldr	r3, [pc, #288]	; (8002318 <HAL_ADC_PollForConversion+0x1fc>)
 80021f6:	400b      	ands	r3, r1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d111      	bne.n	8002220 <HAL_ADC_PollForConversion+0x104>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6919      	ldr	r1, [r3, #16]
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_ADC_PollForConversion+0x200>)
 8002204:	400b      	ands	r3, r1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <HAL_ADC_PollForConversion+0x100>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68d9      	ldr	r1, [r3, #12]
 8002210:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_ADC_PollForConversion+0x204>)
 8002212:	400b      	ands	r3, r1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_PollForConversion+0x100>
 8002218:	2314      	movs	r3, #20
 800221a:	e020      	b.n	800225e <HAL_ADC_PollForConversion+0x142>
 800221c:	2329      	movs	r3, #41	; 0x29
 800221e:	e01e      	b.n	800225e <HAL_ADC_PollForConversion+0x142>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6919      	ldr	r1, [r3, #16]
 8002226:	4b3d      	ldr	r3, [pc, #244]	; (800231c <HAL_ADC_PollForConversion+0x200>)
 8002228:	400b      	ands	r3, r1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_ADC_PollForConversion+0x120>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68d9      	ldr	r1, [r3, #12]
 8002234:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_ADC_PollForConversion+0x204>)
 8002236:	400b      	ands	r3, r1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00d      	beq.n	8002258 <HAL_ADC_PollForConversion+0x13c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6919      	ldr	r1, [r3, #16]
 8002242:	4b38      	ldr	r3, [pc, #224]	; (8002324 <HAL_ADC_PollForConversion+0x208>)
 8002244:	400b      	ands	r3, r1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <HAL_ADC_PollForConversion+0x140>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68d9      	ldr	r1, [r3, #12]
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_ADC_PollForConversion+0x208>)
 8002252:	400b      	ands	r3, r1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_PollForConversion+0x140>
 8002258:	2354      	movs	r3, #84	; 0x54
 800225a:	e000      	b.n	800225e <HAL_ADC_PollForConversion+0x142>
 800225c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002264:	e021      	b.n	80022aa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d01a      	beq.n	80022a4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_ADC_PollForConversion+0x168>
 8002274:	f7ff fd72 	bl	8001d5c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d20f      	bcs.n	80022a4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d90b      	bls.n	80022a4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	f043 0204 	orr.w	r2, r3, #4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e030      	b.n	8002306 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3301      	adds	r3, #1
 80022a8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d8d9      	bhi.n	8002266 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f06f 0212 	mvn.w	r2, #18
 80022ba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022d6:	d115      	bne.n	8002304 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d111      	bne.n	8002304 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	bd90      	pop	{r4, r7, pc}
 800230e:	bf00      	nop
 8002310:	20000010 	.word	0x20000010
 8002314:	24924924 	.word	0x24924924
 8002318:	00924924 	.word	0x00924924
 800231c:	12492492 	.word	0x12492492
 8002320:	00492492 	.word	0x00492492
 8002324:	00249249 	.word	0x00249249

08002328 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x20>
 800235c:	2302      	movs	r3, #2
 800235e:	e0dc      	b.n	800251a <HAL_ADC_ConfigChannel+0x1da>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b06      	cmp	r3, #6
 800236e:	d81c      	bhi.n	80023aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3b05      	subs	r3, #5
 8002382:	221f      	movs	r2, #31
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	4019      	ands	r1, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b05      	subs	r3, #5
 800239c:	fa00 f203 	lsl.w	r2, r0, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	635a      	str	r2, [r3, #52]	; 0x34
 80023a8:	e03c      	b.n	8002424 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d81c      	bhi.n	80023ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	3b23      	subs	r3, #35	; 0x23
 80023c4:	221f      	movs	r2, #31
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	4019      	ands	r1, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b23      	subs	r3, #35	; 0x23
 80023de:	fa00 f203 	lsl.w	r2, r0, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
 80023ea:	e01b      	b.n	8002424 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b41      	subs	r3, #65	; 0x41
 80023fe:	221f      	movs	r2, #31
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	4019      	ands	r1, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b41      	subs	r3, #65	; 0x41
 8002418:	fa00 f203 	lsl.w	r2, r0, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b09      	cmp	r3, #9
 800242a:	d91c      	bls.n	8002466 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68d9      	ldr	r1, [r3, #12]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	3b1e      	subs	r3, #30
 800243e:	2207      	movs	r2, #7
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	4019      	ands	r1, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6898      	ldr	r0, [r3, #8]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	3b1e      	subs	r3, #30
 8002458:	fa00 f203 	lsl.w	r2, r0, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	60da      	str	r2, [r3, #12]
 8002464:	e019      	b.n	800249a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6919      	ldr	r1, [r3, #16]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	2207      	movs	r2, #7
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	4019      	ands	r1, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6898      	ldr	r0, [r3, #8]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	fa00 f203 	lsl.w	r2, r0, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b10      	cmp	r3, #16
 80024a0:	d003      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024a6:	2b11      	cmp	r3, #17
 80024a8:	d132      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <HAL_ADC_ConfigChannel+0x1e4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d125      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d126      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024d0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d11a      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024da:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_ADC_ConfigChannel+0x1e8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a13      	ldr	r2, [pc, #76]	; (800252c <HAL_ADC_ConfigChannel+0x1ec>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	0c9a      	lsrs	r2, r3, #18
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f0:	e002      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f9      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x1b2>
 80024fe:	e007      	b.n	8002510 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40012400 	.word	0x40012400
 8002528:	20000010 	.word	0x20000010
 800252c:	431bde83 	.word	0x431bde83

08002530 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d040      	beq.n	80025d0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <ADC_Enable+0xac>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <ADC_Enable+0xb0>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	0c9b      	lsrs	r3, r3, #18
 800256a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800256c:	e002      	b.n	8002574 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3b01      	subs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f9      	bne.n	800256e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800257a:	f7ff fbef 	bl	8001d5c <HAL_GetTick>
 800257e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002580:	e01f      	b.n	80025c2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002582:	f7ff fbeb 	bl	8001d5c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d918      	bls.n	80025c2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b01      	cmp	r3, #1
 800259c:	d011      	beq.n	80025c2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	f043 0210 	orr.w	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	f043 0201 	orr.w	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e007      	b.n	80025d2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d1d8      	bne.n	8002582 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000010 	.word	0x20000010
 80025e0:	431bde83 	.word	0x431bde83

080025e4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d12e      	bne.n	800265c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800260e:	f7ff fba5 	bl	8001d5c <HAL_GetTick>
 8002612:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002614:	e01b      	b.n	800264e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002616:	f7ff fba1 	bl	8001d5c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d914      	bls.n	800264e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b01      	cmp	r3, #1
 8002630:	d10d      	bne.n	800264e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	f043 0210 	orr.w	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e007      	b.n	800265e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d0dc      	beq.n	8002616 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4906      	ldr	r1, [pc, #24]	; (8002700 <__NVIC_EnableIRQ+0x34>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027cc:	d301      	bcc.n	80027d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <SysTick_Config+0x40>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027da:	210f      	movs	r1, #15
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	f7ff ff90 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <SysTick_Config+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <SysTick_Config+0x40>)
 80027ec:	2207      	movs	r2, #7
 80027ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	e000e010 	.word	0xe000e010

08002800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff ff2d 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002828:	f7ff ff42 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 800282c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff90 	bl	8002758 <NVIC_EncodePriority>
 8002838:	4602      	mov	r2, r0
 800283a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff5f 	bl	8002704 <__NVIC_SetPriority>
}
 8002846:	bf00      	nop
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	4603      	mov	r3, r0
 8002856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff35 	bl	80026cc <__NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ffa2 	bl	80027bc <SysTick_Config>
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d008      	beq.n	80028ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2204      	movs	r2, #4
 800289e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e020      	b.n	80028ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 020e 	bic.w	r2, r2, #14
 80028ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0201 	bic.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f202 	lsl.w	r2, r1, r2
 80028da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d005      	beq.n	800291c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2204      	movs	r2, #4
 8002914:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e051      	b.n	80029c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 020e 	bic.w	r2, r2, #14
 800292a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a22      	ldr	r2, [pc, #136]	; (80029cc <HAL_DMA_Abort_IT+0xd4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d029      	beq.n	800299a <HAL_DMA_Abort_IT+0xa2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a21      	ldr	r2, [pc, #132]	; (80029d0 <HAL_DMA_Abort_IT+0xd8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d022      	beq.n	8002996 <HAL_DMA_Abort_IT+0x9e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1f      	ldr	r2, [pc, #124]	; (80029d4 <HAL_DMA_Abort_IT+0xdc>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d01a      	beq.n	8002990 <HAL_DMA_Abort_IT+0x98>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1e      	ldr	r2, [pc, #120]	; (80029d8 <HAL_DMA_Abort_IT+0xe0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d012      	beq.n	800298a <HAL_DMA_Abort_IT+0x92>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <HAL_DMA_Abort_IT+0xe4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00a      	beq.n	8002984 <HAL_DMA_Abort_IT+0x8c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <HAL_DMA_Abort_IT+0xe8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d102      	bne.n	800297e <HAL_DMA_Abort_IT+0x86>
 8002978:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800297c:	e00e      	b.n	800299c <HAL_DMA_Abort_IT+0xa4>
 800297e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002982:	e00b      	b.n	800299c <HAL_DMA_Abort_IT+0xa4>
 8002984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002988:	e008      	b.n	800299c <HAL_DMA_Abort_IT+0xa4>
 800298a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298e:	e005      	b.n	800299c <HAL_DMA_Abort_IT+0xa4>
 8002990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002994:	e002      	b.n	800299c <HAL_DMA_Abort_IT+0xa4>
 8002996:	2310      	movs	r3, #16
 8002998:	e000      	b.n	800299c <HAL_DMA_Abort_IT+0xa4>
 800299a:	2301      	movs	r3, #1
 800299c:	4a11      	ldr	r2, [pc, #68]	; (80029e4 <HAL_DMA_Abort_IT+0xec>)
 800299e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
    } 
  }
  return status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40020008 	.word	0x40020008
 80029d0:	4002001c 	.word	0x4002001c
 80029d4:	40020030 	.word	0x40020030
 80029d8:	40020044 	.word	0x40020044
 80029dc:	40020058 	.word	0x40020058
 80029e0:	4002006c 	.word	0x4002006c
 80029e4:	40020000 	.word	0x40020000

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b08b      	sub	sp, #44	; 0x2c
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029fa:	e169      	b.n	8002cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029fc:	2201      	movs	r2, #1
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	f040 8158 	bne.w	8002cca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a9a      	ldr	r2, [pc, #616]	; (8002c88 <HAL_GPIO_Init+0x2a0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d05e      	beq.n	8002ae2 <HAL_GPIO_Init+0xfa>
 8002a24:	4a98      	ldr	r2, [pc, #608]	; (8002c88 <HAL_GPIO_Init+0x2a0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d875      	bhi.n	8002b16 <HAL_GPIO_Init+0x12e>
 8002a2a:	4a98      	ldr	r2, [pc, #608]	; (8002c8c <HAL_GPIO_Init+0x2a4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d058      	beq.n	8002ae2 <HAL_GPIO_Init+0xfa>
 8002a30:	4a96      	ldr	r2, [pc, #600]	; (8002c8c <HAL_GPIO_Init+0x2a4>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d86f      	bhi.n	8002b16 <HAL_GPIO_Init+0x12e>
 8002a36:	4a96      	ldr	r2, [pc, #600]	; (8002c90 <HAL_GPIO_Init+0x2a8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d052      	beq.n	8002ae2 <HAL_GPIO_Init+0xfa>
 8002a3c:	4a94      	ldr	r2, [pc, #592]	; (8002c90 <HAL_GPIO_Init+0x2a8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d869      	bhi.n	8002b16 <HAL_GPIO_Init+0x12e>
 8002a42:	4a94      	ldr	r2, [pc, #592]	; (8002c94 <HAL_GPIO_Init+0x2ac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d04c      	beq.n	8002ae2 <HAL_GPIO_Init+0xfa>
 8002a48:	4a92      	ldr	r2, [pc, #584]	; (8002c94 <HAL_GPIO_Init+0x2ac>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d863      	bhi.n	8002b16 <HAL_GPIO_Init+0x12e>
 8002a4e:	4a92      	ldr	r2, [pc, #584]	; (8002c98 <HAL_GPIO_Init+0x2b0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d046      	beq.n	8002ae2 <HAL_GPIO_Init+0xfa>
 8002a54:	4a90      	ldr	r2, [pc, #576]	; (8002c98 <HAL_GPIO_Init+0x2b0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d85d      	bhi.n	8002b16 <HAL_GPIO_Init+0x12e>
 8002a5a:	2b12      	cmp	r3, #18
 8002a5c:	d82a      	bhi.n	8002ab4 <HAL_GPIO_Init+0xcc>
 8002a5e:	2b12      	cmp	r3, #18
 8002a60:	d859      	bhi.n	8002b16 <HAL_GPIO_Init+0x12e>
 8002a62:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <HAL_GPIO_Init+0x80>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002ae3 	.word	0x08002ae3
 8002a6c:	08002abd 	.word	0x08002abd
 8002a70:	08002acf 	.word	0x08002acf
 8002a74:	08002b11 	.word	0x08002b11
 8002a78:	08002b17 	.word	0x08002b17
 8002a7c:	08002b17 	.word	0x08002b17
 8002a80:	08002b17 	.word	0x08002b17
 8002a84:	08002b17 	.word	0x08002b17
 8002a88:	08002b17 	.word	0x08002b17
 8002a8c:	08002b17 	.word	0x08002b17
 8002a90:	08002b17 	.word	0x08002b17
 8002a94:	08002b17 	.word	0x08002b17
 8002a98:	08002b17 	.word	0x08002b17
 8002a9c:	08002b17 	.word	0x08002b17
 8002aa0:	08002b17 	.word	0x08002b17
 8002aa4:	08002b17 	.word	0x08002b17
 8002aa8:	08002b17 	.word	0x08002b17
 8002aac:	08002ac5 	.word	0x08002ac5
 8002ab0:	08002ad9 	.word	0x08002ad9
 8002ab4:	4a79      	ldr	r2, [pc, #484]	; (8002c9c <HAL_GPIO_Init+0x2b4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002aba:	e02c      	b.n	8002b16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	623b      	str	r3, [r7, #32]
          break;
 8002ac2:	e029      	b.n	8002b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	623b      	str	r3, [r7, #32]
          break;
 8002acc:	e024      	b.n	8002b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	623b      	str	r3, [r7, #32]
          break;
 8002ad6:	e01f      	b.n	8002b18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	330c      	adds	r3, #12
 8002ade:	623b      	str	r3, [r7, #32]
          break;
 8002ae0:	e01a      	b.n	8002b18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aea:	2304      	movs	r3, #4
 8002aec:	623b      	str	r3, [r7, #32]
          break;
 8002aee:	e013      	b.n	8002b18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002af8:	2308      	movs	r3, #8
 8002afa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	611a      	str	r2, [r3, #16]
          break;
 8002b02:	e009      	b.n	8002b18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b04:	2308      	movs	r3, #8
 8002b06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	615a      	str	r2, [r3, #20]
          break;
 8002b0e:	e003      	b.n	8002b18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
          break;
 8002b14:	e000      	b.n	8002b18 <HAL_GPIO_Init+0x130>
          break;
 8002b16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2bff      	cmp	r3, #255	; 0xff
 8002b1c:	d801      	bhi.n	8002b22 <HAL_GPIO_Init+0x13a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	e001      	b.n	8002b26 <HAL_GPIO_Init+0x13e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3304      	adds	r3, #4
 8002b26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2bff      	cmp	r3, #255	; 0xff
 8002b2c:	d802      	bhi.n	8002b34 <HAL_GPIO_Init+0x14c>
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	e002      	b.n	8002b3a <HAL_GPIO_Init+0x152>
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	3b08      	subs	r3, #8
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	210f      	movs	r1, #15
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 80b1 	beq.w	8002cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b68:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_GPIO_Init+0x2b8>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ca0 <HAL_GPIO_Init+0x2b8>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6193      	str	r3, [r2, #24]
 8002b74:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_GPIO_Init+0x2b8>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b80:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <HAL_GPIO_Init+0x2bc>)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a40      	ldr	r2, [pc, #256]	; (8002ca8 <HAL_GPIO_Init+0x2c0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d013      	beq.n	8002bd4 <HAL_GPIO_Init+0x1ec>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a3f      	ldr	r2, [pc, #252]	; (8002cac <HAL_GPIO_Init+0x2c4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00d      	beq.n	8002bd0 <HAL_GPIO_Init+0x1e8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a3e      	ldr	r2, [pc, #248]	; (8002cb0 <HAL_GPIO_Init+0x2c8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <HAL_GPIO_Init+0x1e4>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a3d      	ldr	r2, [pc, #244]	; (8002cb4 <HAL_GPIO_Init+0x2cc>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d101      	bne.n	8002bc8 <HAL_GPIO_Init+0x1e0>
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e006      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	e004      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e002      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd8:	f002 0203 	and.w	r2, r2, #3
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	4093      	lsls	r3, r2
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002be6:	492f      	ldr	r1, [pc, #188]	; (8002ca4 <HAL_GPIO_Init+0x2bc>)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	492c      	ldr	r1, [pc, #176]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	4928      	ldr	r1, [pc, #160]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60cb      	str	r3, [r1, #12]
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	491e      	ldr	r1, [pc, #120]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4918      	ldr	r1, [pc, #96]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
 8002c5c:	e006      	b.n	8002c6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	4914      	ldr	r1, [pc, #80]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d021      	beq.n	8002cbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	490e      	ldr	r1, [pc, #56]	; (8002cb8 <HAL_GPIO_Init+0x2d0>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e021      	b.n	8002cca <HAL_GPIO_Init+0x2e2>
 8002c86:	bf00      	nop
 8002c88:	10320000 	.word	0x10320000
 8002c8c:	10310000 	.word	0x10310000
 8002c90:	10220000 	.word	0x10220000
 8002c94:	10210000 	.word	0x10210000
 8002c98:	10120000 	.word	0x10120000
 8002c9c:	10110000 	.word	0x10110000
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40010800 	.word	0x40010800
 8002cac:	40010c00 	.word	0x40010c00
 8002cb0:	40011000 	.word	0x40011000
 8002cb4:	40011400 	.word	0x40011400
 8002cb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	4909      	ldr	r1, [pc, #36]	; (8002cec <HAL_GPIO_Init+0x304>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	3301      	adds	r3, #1
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f47f ae8e 	bne.w	80029fc <HAL_GPIO_Init+0x14>
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	372c      	adds	r7, #44	; 0x2c
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	40010400 	.word	0x40010400

08002cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d0c:	e003      	b.n	8002d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	041a      	lsls	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d32:	887a      	ldrh	r2, [r7, #2]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4013      	ands	r3, r2
 8002d38:	041a      	lsls	r2, r3, #16
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43d9      	mvns	r1, r3
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	400b      	ands	r3, r1
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e272      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8087 	beq.w	8002e82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d74:	4b92      	ldr	r3, [pc, #584]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 030c 	and.w	r3, r3, #12
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d00c      	beq.n	8002d9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d80:	4b8f      	ldr	r3, [pc, #572]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d112      	bne.n	8002db2 <HAL_RCC_OscConfig+0x5e>
 8002d8c:	4b8c      	ldr	r3, [pc, #560]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d98:	d10b      	bne.n	8002db2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9a:	4b89      	ldr	r3, [pc, #548]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d06c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x12c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d168      	bne.n	8002e80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e24c      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x76>
 8002dbc:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7f      	ldr	r2, [pc, #508]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e02e      	b.n	8002e28 <HAL_RCC_OscConfig+0xd4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x98>
 8002dd2:	4b7b      	ldr	r3, [pc, #492]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a7a      	ldr	r2, [pc, #488]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b78      	ldr	r3, [pc, #480]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a77      	ldr	r2, [pc, #476]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xd4>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0xbc>
 8002df6:	4b72      	ldr	r3, [pc, #456]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b6f      	ldr	r3, [pc, #444]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a6e      	ldr	r2, [pc, #440]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xd4>
 8002e10:	4b6b      	ldr	r3, [pc, #428]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6a      	ldr	r2, [pc, #424]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b68      	ldr	r3, [pc, #416]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a67      	ldr	r2, [pc, #412]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe ff94 	bl	8001d5c <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe ff90 	bl	8001d5c <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e200      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b5d      	ldr	r3, [pc, #372]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe4>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe ff80 	bl	8001d5c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe ff7c 	bl	8001d5c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1ec      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e72:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x10c>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d063      	beq.n	8002f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e8e:	4b4c      	ldr	r3, [pc, #304]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00b      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e9a:	4b49      	ldr	r3, [pc, #292]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d11c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x18c>
 8002ea6:	4b46      	ldr	r3, [pc, #280]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d116      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb2:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_RCC_OscConfig+0x176>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e1c0      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4939      	ldr	r1, [pc, #228]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	e03a      	b.n	8002f56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee8:	4b36      	ldr	r3, [pc, #216]	; (8002fc4 <HAL_RCC_OscConfig+0x270>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eee:	f7fe ff35 	bl	8001d5c <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe ff31 	bl	8001d5c <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1a1      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f08:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f14:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4927      	ldr	r1, [pc, #156]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	e015      	b.n	8002f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f2a:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe ff14 	bl	8001d5c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe ff10 	bl	8001d5c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e180      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d03a      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d019      	beq.n	8002f9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fe fef4 	bl	8001d5c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe fef0 	bl	8001d5c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e160      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f96:	2001      	movs	r0, #1
 8002f98:	f000 face 	bl	8003538 <RCC_Delay>
 8002f9c:	e01c      	b.n	8002fd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7fe feda 	bl	8001d5c <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002faa:	e00f      	b.n	8002fcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fe fed6 	bl	8001d5c <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d908      	bls.n	8002fcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e146      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
 8002fbe:	bf00      	nop
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	42420000 	.word	0x42420000
 8002fc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	4b92      	ldr	r3, [pc, #584]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1e9      	bne.n	8002fac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a6 	beq.w	8003132 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fea:	4b8b      	ldr	r3, [pc, #556]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10d      	bne.n	8003012 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4b88      	ldr	r3, [pc, #544]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4a87      	ldr	r2, [pc, #540]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003000:	61d3      	str	r3, [r2, #28]
 8003002:	4b85      	ldr	r3, [pc, #532]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300e:	2301      	movs	r3, #1
 8003010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003012:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_RCC_OscConfig+0x4c8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d118      	bne.n	8003050 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800301e:	4b7f      	ldr	r3, [pc, #508]	; (800321c <HAL_RCC_OscConfig+0x4c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7e      	ldr	r2, [pc, #504]	; (800321c <HAL_RCC_OscConfig+0x4c8>)
 8003024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800302a:	f7fe fe97 	bl	8001d5c <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003032:	f7fe fe93 	bl	8001d5c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b64      	cmp	r3, #100	; 0x64
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e103      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003044:	4b75      	ldr	r3, [pc, #468]	; (800321c <HAL_RCC_OscConfig+0x4c8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d106      	bne.n	8003066 <HAL_RCC_OscConfig+0x312>
 8003058:	4b6f      	ldr	r3, [pc, #444]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	4a6e      	ldr	r2, [pc, #440]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6213      	str	r3, [r2, #32]
 8003064:	e02d      	b.n	80030c2 <HAL_RCC_OscConfig+0x36e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x334>
 800306e:	4b6a      	ldr	r3, [pc, #424]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4a69      	ldr	r2, [pc, #420]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6213      	str	r3, [r2, #32]
 800307a:	4b67      	ldr	r3, [pc, #412]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4a66      	ldr	r2, [pc, #408]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	6213      	str	r3, [r2, #32]
 8003086:	e01c      	b.n	80030c2 <HAL_RCC_OscConfig+0x36e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d10c      	bne.n	80030aa <HAL_RCC_OscConfig+0x356>
 8003090:	4b61      	ldr	r3, [pc, #388]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4a60      	ldr	r2, [pc, #384]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	6213      	str	r3, [r2, #32]
 800309c:	4b5e      	ldr	r3, [pc, #376]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4a5d      	ldr	r2, [pc, #372]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	6213      	str	r3, [r2, #32]
 80030a8:	e00b      	b.n	80030c2 <HAL_RCC_OscConfig+0x36e>
 80030aa:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4a5a      	ldr	r2, [pc, #360]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6213      	str	r3, [r2, #32]
 80030b6:	4b58      	ldr	r3, [pc, #352]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	4a57      	ldr	r2, [pc, #348]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d015      	beq.n	80030f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fe47 	bl	8001d5c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d0:	e00a      	b.n	80030e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7fe fe43 	bl	8001d5c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0b1      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e8:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ee      	beq.n	80030d2 <HAL_RCC_OscConfig+0x37e>
 80030f4:	e014      	b.n	8003120 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fe31 	bl	8001d5c <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7fe fe2d 	bl	8001d5c <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	f241 3288 	movw	r2, #5000	; 0x1388
 800310c:	4293      	cmp	r3, r2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e09b      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003114:	4b40      	ldr	r3, [pc, #256]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ee      	bne.n	80030fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d105      	bne.n	8003132 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003126:	4b3c      	ldr	r3, [pc, #240]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4a3b      	ldr	r2, [pc, #236]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003130:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8087 	beq.w	800324a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 030c 	and.w	r3, r3, #12
 8003144:	2b08      	cmp	r3, #8
 8003146:	d061      	beq.n	800320c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d146      	bne.n	80031de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b33      	ldr	r3, [pc, #204]	; (8003220 <HAL_RCC_OscConfig+0x4cc>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7fe fe01 	bl	8001d5c <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800315e:	f7fe fdfd 	bl	8001d5c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e06d      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003170:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d108      	bne.n	8003198 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4921      	ldr	r1, [pc, #132]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003198:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a19      	ldr	r1, [r3, #32]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	430b      	orrs	r3, r1
 80031aa:	491b      	ldr	r1, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <HAL_RCC_OscConfig+0x4cc>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7fe fdd1 	bl	8001d5c <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031be:	f7fe fdcd 	bl	8001d5c <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e03d      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x46a>
 80031dc:	e035      	b.n	800324a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <HAL_RCC_OscConfig+0x4cc>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fe fdba 	bl	8001d5c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe fdb6 	bl	8001d5c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e026      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x498>
 800320a:	e01e      	b.n	800324a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e019      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_OscConfig+0x500>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	429a      	cmp	r2, r3
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000

08003258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0d0      	b.n	800340e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800326c:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d910      	bls.n	800329c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b67      	ldr	r3, [pc, #412]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 0207 	bic.w	r2, r3, #7
 8003282:	4965      	ldr	r1, [pc, #404]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0b8      	b.n	800340e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	494d      	ldr	r1, [pc, #308]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d040      	beq.n	8003378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d115      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d107      	bne.n	8003326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e073      	b.n	800340e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e06b      	b.n	800340e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	4936      	ldr	r1, [pc, #216]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003348:	f7fe fd08 	bl	8001d5c <HAL_GetTick>
 800334c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fe fd04 	bl	8001d5c <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e053      	b.n	800340e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d210      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 0207 	bic.w	r2, r3, #7
 800338e:	4922      	ldr	r1, [pc, #136]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e032      	b.n	800340e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4916      	ldr	r1, [pc, #88]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	490e      	ldr	r1, [pc, #56]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033e6:	f000 f821 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	490a      	ldr	r1, [pc, #40]	; (8003420 <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	5ccb      	ldrb	r3, [r1, r3]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1cc>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1d0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe fc66 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40022000 	.word	0x40022000
 800341c:	40021000 	.word	0x40021000
 8003420:	0800a370 	.word	0x0800a370
 8003424:	20000010 	.word	0x20000010
 8003428:	20000014 	.word	0x20000014

0800342c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	2300      	movs	r3, #0
 8003440:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b04      	cmp	r3, #4
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x30>
 8003456:	2b08      	cmp	r3, #8
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x36>
 800345a:	e027      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800345e:	613b      	str	r3, [r7, #16]
      break;
 8003460:	e027      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	0c9b      	lsrs	r3, r3, #18
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	4a17      	ldr	r2, [pc, #92]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800346c:	5cd3      	ldrb	r3, [r2, r3]
 800346e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d010      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800347a:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	0c5b      	lsrs	r3, r3, #17
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	4a11      	ldr	r2, [pc, #68]	; (80034cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800348e:	fb03 f202 	mul.w	r2, r3, r2
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e004      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	613b      	str	r3, [r7, #16]
      break;
 80034aa:	e002      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ae:	613b      	str	r3, [r7, #16]
      break;
 80034b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b2:	693b      	ldr	r3, [r7, #16]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	007a1200 	.word	0x007a1200
 80034c8:	0800a388 	.word	0x0800a388
 80034cc:	0800a398 	.word	0x0800a398
 80034d0:	003d0900 	.word	0x003d0900

080034d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d8:	4b02      	ldr	r3, [pc, #8]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	20000010 	.word	0x20000010

080034e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ec:	f7ff fff2 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	0800a380 	.word	0x0800a380

08003510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003514:	f7ff ffde 	bl	80034d4 <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	0adb      	lsrs	r3, r3, #11
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4903      	ldr	r1, [pc, #12]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800352c:	4618      	mov	r0, r3
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	0800a380 	.word	0x0800a380

08003538 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003540:	4b0a      	ldr	r3, [pc, #40]	; (800356c <RCC_Delay+0x34>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <RCC_Delay+0x38>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	0a5b      	lsrs	r3, r3, #9
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	fb02 f303 	mul.w	r3, r2, r3
 8003552:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003554:	bf00      	nop
  }
  while (Delay --);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1e5a      	subs	r2, r3, #1
 800355a:	60fa      	str	r2, [r7, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f9      	bne.n	8003554 <RCC_Delay+0x1c>
}
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	20000010 	.word	0x20000010
 8003570:	10624dd3 	.word	0x10624dd3

08003574 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d07d      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003590:	2300      	movs	r3, #0
 8003592:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003594:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a0:	4b4c      	ldr	r3, [pc, #304]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	4a4b      	ldr	r2, [pc, #300]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035aa:	61d3      	str	r3, [r2, #28]
 80035ac:	4b49      	ldr	r3, [pc, #292]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b8:	2301      	movs	r3, #1
 80035ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d118      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c8:	4b43      	ldr	r3, [pc, #268]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a42      	ldr	r2, [pc, #264]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d4:	f7fe fbc2 	bl	8001d5c <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	e008      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035dc:	f7fe fbbe 	bl	8001d5c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e06d      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003602:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d02e      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d027      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003620:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003622:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003628:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800362e:	4a29      	ldr	r2, [pc, #164]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d014      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fe fb8d 	bl	8001d5c <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe fb89 	bl	8001d5c <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e036      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4917      	ldr	r1, [pc, #92]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	4313      	orrs	r3, r2
 8003678:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d105      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003698:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	490b      	ldr	r1, [pc, #44]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d008      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036b6:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	4904      	ldr	r1, [pc, #16]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42420440 	.word	0x42420440

080036e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d00a      	beq.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b10      	cmp	r3, #16
 8003706:	f200 808a 	bhi.w	800381e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d045      	beq.n	800379c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d075      	beq.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003716:	e082      	b.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003718:	4b46      	ldr	r3, [pc, #280]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800371e:	4b45      	ldr	r3, [pc, #276]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d07b      	beq.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	0c9b      	lsrs	r3, r3, #18
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	4a41      	ldr	r2, [pc, #260]	; (8003838 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003734:	5cd3      	ldrb	r3, [r2, r3]
 8003736:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d015      	beq.n	800376e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003742:	4b3c      	ldr	r3, [pc, #240]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	0c5b      	lsrs	r3, r3, #17
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	4a3b      	ldr	r2, [pc, #236]	; (800383c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800374e:	5cd3      	ldrb	r3, [r2, r3]
 8003750:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800375c:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fbb2 f2f3 	udiv	r2, r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	e004      	b.n	8003778 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4a34      	ldr	r2, [pc, #208]	; (8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003778:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003784:	d102      	bne.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	61bb      	str	r3, [r7, #24]
      break;
 800378a:	e04a      	b.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	61bb      	str	r3, [r7, #24]
      break;
 800379a:	e042      	b.n	8003822 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ac:	d108      	bne.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80037b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e01f      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ca:	d109      	bne.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80037cc:	4b19      	ldr	r3, [pc, #100]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80037d8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e00f      	b.n	8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ea:	d11c      	bne.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d016      	beq.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80037f8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80037fc:	61bb      	str	r3, [r7, #24]
      break;
 80037fe:	e012      	b.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003800:	e011      	b.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003802:	f7ff fe85 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	0b9b      	lsrs	r3, r3, #14
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	3301      	adds	r3, #1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	61bb      	str	r3, [r7, #24]
      break;
 800381c:	e004      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003826:	bf00      	nop
    }
  }
  return (frequency);
 8003828:	69bb      	ldr	r3, [r7, #24]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40021000 	.word	0x40021000
 8003838:	0800a39c 	.word	0x0800a39c
 800383c:	0800a3ac 	.word	0x0800a3ac
 8003840:	007a1200 	.word	0x007a1200
 8003844:	003d0900 	.word	0x003d0900
 8003848:	aaaaaaab 	.word	0xaaaaaaab

0800384c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e041      	b.n	80038e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd ffbe 	bl	80017f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f000 fe6c 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d001      	beq.n	8003904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e03a      	b.n	800397a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a18      	ldr	r2, [pc, #96]	; (8003984 <HAL_TIM_Base_Start_IT+0x98>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00e      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0x58>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d009      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0x58>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <HAL_TIM_Base_Start_IT+0x9c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d004      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0x58>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a13      	ldr	r2, [pc, #76]	; (800398c <HAL_TIM_Base_Start_IT+0xa0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d111      	bne.n	8003968 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b06      	cmp	r3, #6
 8003954:	d010      	beq.n	8003978 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	e007      	b.n	8003978 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40012c00 	.word	0x40012c00
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800

08003990 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e041      	b.n	8003a26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f839 	bl	8003a2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f000 fdca 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_TIM_PWM_Start+0x24>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e022      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d109      	bne.n	8003a7e <HAL_TIM_PWM_Start+0x3e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e015      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_PWM_Start+0x58>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e008      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e05e      	b.n	8003b70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0x82>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ac0:	e013      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x92>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ad0:	e00b      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0xa2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae0:	e003      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2201      	movs	r2, #1
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 f8c5 	bl	8004c82 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_TIM_PWM_Start+0x138>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d107      	bne.n	8003b12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_TIM_PWM_Start+0x138>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00e      	beq.n	8003b3a <HAL_TIM_PWM_Start+0xfa>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b24:	d009      	beq.n	8003b3a <HAL_TIM_PWM_Start+0xfa>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <HAL_TIM_PWM_Start+0x13c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <HAL_TIM_PWM_Start+0xfa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a12      	ldr	r2, [pc, #72]	; (8003b80 <HAL_TIM_PWM_Start+0x140>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d111      	bne.n	8003b5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d010      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	e007      	b.n	8003b6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800

08003b84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e041      	b.n	8003c1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f839 	bl	8003c22 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f000 fcd0 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <HAL_TIM_IC_Start_IT+0x1e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	e013      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x46>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_IC_Start_IT+0x2e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	e00b      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x46>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_IC_Start_IT+0x3e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	e003      	b.n	8003c7a <HAL_TIM_IC_Start_IT+0x46>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <HAL_TIM_IC_Start_IT+0x58>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e013      	b.n	8003cb4 <HAL_TIM_IC_Start_IT+0x80>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d104      	bne.n	8003c9c <HAL_TIM_IC_Start_IT+0x68>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	e00b      	b.n	8003cb4 <HAL_TIM_IC_Start_IT+0x80>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d104      	bne.n	8003cac <HAL_TIM_IC_Start_IT+0x78>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e003      	b.n	8003cb4 <HAL_TIM_IC_Start_IT+0x80>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cb6:	7bbb      	ldrb	r3, [r7, #14]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d102      	bne.n	8003cc2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cbc:	7b7b      	ldrb	r3, [r7, #13]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e0b8      	b.n	8003e38 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <HAL_TIM_IC_Start_IT+0xa2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd4:	e013      	b.n	8003cfe <HAL_TIM_IC_Start_IT+0xca>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d104      	bne.n	8003ce6 <HAL_TIM_IC_Start_IT+0xb2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce4:	e00b      	b.n	8003cfe <HAL_TIM_IC_Start_IT+0xca>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d104      	bne.n	8003cf6 <HAL_TIM_IC_Start_IT+0xc2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf4:	e003      	b.n	8003cfe <HAL_TIM_IC_Start_IT+0xca>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_IC_Start_IT+0xda>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0c:	e013      	b.n	8003d36 <HAL_TIM_IC_Start_IT+0x102>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_IC_Start_IT+0xea>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d1c:	e00b      	b.n	8003d36 <HAL_TIM_IC_Start_IT+0x102>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_IC_Start_IT+0xfa>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d2c:	e003      	b.n	8003d36 <HAL_TIM_IC_Start_IT+0x102>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d841      	bhi.n	8003dc0 <HAL_TIM_IC_Start_IT+0x18c>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <HAL_TIM_IC_Start_IT+0x110>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d79 	.word	0x08003d79
 8003d48:	08003dc1 	.word	0x08003dc1
 8003d4c:	08003dc1 	.word	0x08003dc1
 8003d50:	08003dc1 	.word	0x08003dc1
 8003d54:	08003d8b 	.word	0x08003d8b
 8003d58:	08003dc1 	.word	0x08003dc1
 8003d5c:	08003dc1 	.word	0x08003dc1
 8003d60:	08003dc1 	.word	0x08003dc1
 8003d64:	08003d9d 	.word	0x08003d9d
 8003d68:	08003dc1 	.word	0x08003dc1
 8003d6c:	08003dc1 	.word	0x08003dc1
 8003d70:	08003dc1 	.word	0x08003dc1
 8003d74:	08003daf 	.word	0x08003daf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0202 	orr.w	r2, r2, #2
 8003d86:	60da      	str	r2, [r3, #12]
      break;
 8003d88:	e01d      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0204 	orr.w	r2, r2, #4
 8003d98:	60da      	str	r2, [r3, #12]
      break;
 8003d9a:	e014      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0208 	orr.w	r2, r2, #8
 8003daa:	60da      	str	r2, [r3, #12]
      break;
 8003dac:	e00b      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0210 	orr.w	r2, r2, #16
 8003dbc:	60da      	str	r2, [r3, #12]
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d134      	bne.n	8003e36 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 ff54 	bl	8004c82 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a18      	ldr	r2, [pc, #96]	; (8003e40 <HAL_TIM_IC_Start_IT+0x20c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_TIM_IC_Start_IT+0x1ce>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dec:	d009      	beq.n	8003e02 <HAL_TIM_IC_Start_IT+0x1ce>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_TIM_IC_Start_IT+0x210>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_TIM_IC_Start_IT+0x1ce>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <HAL_TIM_IC_Start_IT+0x214>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d111      	bne.n	8003e26 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b06      	cmp	r3, #6
 8003e12:	d010      	beq.n	8003e36 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e24:	e007      	b.n	8003e36 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800

08003e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d122      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0202 	mvn.w	r2, #2
 8003e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f001 fe06 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8003e94:	e005      	b.n	8003ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fb4a 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb50 	bl	8004542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d122      	bne.n	8003efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d11b      	bne.n	8003efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0204 	mvn.w	r2, #4
 8003ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f001 fddc 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fb20 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fb26 	bl	8004542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d122      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d11b      	bne.n	8003f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0208 	mvn.w	r2, #8
 8003f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2204      	movs	r2, #4
 8003f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f001 fdb2 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 faf6 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fafc 	bl	8004542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d122      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d11b      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0210 	mvn.w	r2, #16
 8003f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f001 fd88 	bl	8005aa0 <HAL_TIM_IC_CaptureCallback>
 8003f90:	e005      	b.n	8003f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 facc 	bl	8004530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fad2 	bl	8004542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0201 	mvn.w	r2, #1
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd f84e 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fda:	2b80      	cmp	r3, #128	; 0x80
 8003fdc:	d10e      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fecf 	bl	8004d9a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	d10e      	bne.n	8004028 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d107      	bne.n	8004028 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa96 	bl	8004554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b20      	cmp	r3, #32
 8004034:	d10e      	bne.n	8004054 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b20      	cmp	r3, #32
 8004042:	d107      	bne.n	8004054 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0220 	mvn.w	r2, #32
 800404c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fe9a 	bl	8004d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004076:	2302      	movs	r3, #2
 8004078:	e088      	b.n	800418c <HAL_TIM_IC_ConfigChannel+0x130>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d11b      	bne.n	80040c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f000 fc50 	bl	800493c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 020c 	bic.w	r2, r2, #12
 80040aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6999      	ldr	r1, [r3, #24]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	619a      	str	r2, [r3, #24]
 80040be:	e060      	b.n	8004182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d11c      	bne.n	8004100 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f000 fcb9 	bl	8004a4c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6999      	ldr	r1, [r3, #24]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	619a      	str	r2, [r3, #24]
 80040fe:	e040      	b.n	8004182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d11b      	bne.n	800413e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f000 fd04 	bl	8004b22 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 020c 	bic.w	r2, r2, #12
 8004128:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69d9      	ldr	r1, [r3, #28]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	61da      	str	r2, [r3, #28]
 800413c:	e021      	b.n	8004182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	d11c      	bne.n	800417e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f000 fd20 	bl	8004b98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004166:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	69d9      	ldr	r1, [r3, #28]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	021a      	lsls	r2, r3, #8
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	61da      	str	r2, [r3, #28]
 800417c:	e001      	b.n	8004182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0ae      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	f200 809f 	bhi.w	8004300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	08004301 	.word	0x08004301
 80041d0:	08004301 	.word	0x08004301
 80041d4:	08004301 	.word	0x08004301
 80041d8:	0800423d 	.word	0x0800423d
 80041dc:	08004301 	.word	0x08004301
 80041e0:	08004301 	.word	0x08004301
 80041e4:	08004301 	.word	0x08004301
 80041e8:	0800427f 	.word	0x0800427f
 80041ec:	08004301 	.word	0x08004301
 80041f0:	08004301 	.word	0x08004301
 80041f4:	08004301 	.word	0x08004301
 80041f8:	080042bf 	.word	0x080042bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fa12 	bl	800462c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6999      	ldr	r1, [r3, #24]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	619a      	str	r2, [r3, #24]
      break;
 800423a:	e064      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fa58 	bl	80046f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	619a      	str	r2, [r3, #24]
      break;
 800427c:	e043      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 faa1 	bl	80047cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0208 	orr.w	r2, r2, #8
 8004298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0204 	bic.w	r2, r2, #4
 80042a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]
      break;
 80042bc:	e023      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 faeb 	bl	80048a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	021a      	lsls	r2, r3, #8
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	61da      	str	r2, [r3, #28]
      break;
 80042fe:	e002      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
      break;
 8004304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIM_ConfigClockSource+0x1c>
 8004330:	2302      	movs	r3, #2
 8004332:	e0b4      	b.n	800449e <HAL_TIM_ConfigClockSource+0x186>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800435a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436c:	d03e      	beq.n	80043ec <HAL_TIM_ConfigClockSource+0xd4>
 800436e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004372:	f200 8087 	bhi.w	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437a:	f000 8086 	beq.w	800448a <HAL_TIM_ConfigClockSource+0x172>
 800437e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004382:	d87f      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004384:	2b70      	cmp	r3, #112	; 0x70
 8004386:	d01a      	beq.n	80043be <HAL_TIM_ConfigClockSource+0xa6>
 8004388:	2b70      	cmp	r3, #112	; 0x70
 800438a:	d87b      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 800438c:	2b60      	cmp	r3, #96	; 0x60
 800438e:	d050      	beq.n	8004432 <HAL_TIM_ConfigClockSource+0x11a>
 8004390:	2b60      	cmp	r3, #96	; 0x60
 8004392:	d877      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 8004394:	2b50      	cmp	r3, #80	; 0x50
 8004396:	d03c      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0xfa>
 8004398:	2b50      	cmp	r3, #80	; 0x50
 800439a:	d873      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d058      	beq.n	8004452 <HAL_TIM_ConfigClockSource+0x13a>
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d86f      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043a4:	2b30      	cmp	r3, #48	; 0x30
 80043a6:	d064      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043a8:	2b30      	cmp	r3, #48	; 0x30
 80043aa:	d86b      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d060      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d867      	bhi.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d05c      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043b8:	2b10      	cmp	r3, #16
 80043ba:	d05a      	beq.n	8004472 <HAL_TIM_ConfigClockSource+0x15a>
 80043bc:	e062      	b.n	8004484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6899      	ldr	r1, [r3, #8]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f000 fc39 	bl	8004c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	609a      	str	r2, [r3, #8]
      break;
 80043ea:	e04f      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6899      	ldr	r1, [r3, #8]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f000 fc22 	bl	8004c44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800440e:	609a      	str	r2, [r3, #8]
      break;
 8004410:	e03c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6859      	ldr	r1, [r3, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	461a      	mov	r2, r3
 8004420:	f000 fae6 	bl	80049f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2150      	movs	r1, #80	; 0x50
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fbf0 	bl	8004c10 <TIM_ITRx_SetConfig>
      break;
 8004430:	e02c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6859      	ldr	r1, [r3, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	461a      	mov	r2, r3
 8004440:	f000 fb40 	bl	8004ac4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2160      	movs	r1, #96	; 0x60
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fbe0 	bl	8004c10 <TIM_ITRx_SetConfig>
      break;
 8004450:	e01c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	461a      	mov	r2, r3
 8004460:	f000 fac6 	bl	80049f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2140      	movs	r1, #64	; 0x40
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fbd0 	bl	8004c10 <TIM_ITRx_SetConfig>
      break;
 8004470:	e00c      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f000 fbc7 	bl	8004c10 <TIM_ITRx_SetConfig>
      break;
 8004482:	e003      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      break;
 8004488:	e000      	b.n	800448c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800448a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	d831      	bhi.n	8004520 <HAL_TIM_ReadCapturedValue+0x78>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	08004521 	.word	0x08004521
 80044cc:	08004521 	.word	0x08004521
 80044d0:	08004521 	.word	0x08004521
 80044d4:	08004503 	.word	0x08004503
 80044d8:	08004521 	.word	0x08004521
 80044dc:	08004521 	.word	0x08004521
 80044e0:	08004521 	.word	0x08004521
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004521 	.word	0x08004521
 80044ec:	08004521 	.word	0x08004521
 80044f0:	08004521 	.word	0x08004521
 80044f4:	08004517 	.word	0x08004517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fe:	60fb      	str	r3, [r7, #12]

      break;
 8004500:	e00f      	b.n	8004522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	60fb      	str	r3, [r7, #12]

      break;
 800450a:	e00a      	b.n	8004522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	60fb      	str	r3, [r7, #12]

      break;
 8004514:	e005      	b.n	8004522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	60fb      	str	r3, [r7, #12]

      break;
 800451e:	e000      	b.n	8004522 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004520:	bf00      	nop
  }

  return tmpreg;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
	...

08004568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a29      	ldr	r2, [pc, #164]	; (8004620 <TIM_Base_SetConfig+0xb8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004586:	d007      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a26      	ldr	r2, [pc, #152]	; (8004624 <TIM_Base_SetConfig+0xbc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0x30>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a25      	ldr	r2, [pc, #148]	; (8004628 <TIM_Base_SetConfig+0xc0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d108      	bne.n	80045aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <TIM_Base_SetConfig+0xb8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a19      	ldr	r2, [pc, #100]	; (8004624 <TIM_Base_SetConfig+0xbc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0x62>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a18      	ldr	r2, [pc, #96]	; (8004628 <TIM_Base_SetConfig+0xc0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a07      	ldr	r2, [pc, #28]	; (8004620 <TIM_Base_SetConfig+0xb8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	40012c00 	.word	0x40012c00
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800

0800462c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f023 0201 	bic.w	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 0302 	bic.w	r3, r3, #2
 8004674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <TIM_OC1_SetConfig+0xc8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d10c      	bne.n	80046a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0308 	bic.w	r3, r3, #8
 800468e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 0304 	bic.w	r3, r3, #4
 80046a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <TIM_OC1_SetConfig+0xc8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d111      	bne.n	80046ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00

080046f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f023 0210 	bic.w	r2, r3, #16
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0320 	bic.w	r3, r3, #32
 8004742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a1d      	ldr	r2, [pc, #116]	; (80047c8 <TIM_OC2_SetConfig+0xd0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d10d      	bne.n	8004774 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <TIM_OC2_SetConfig+0xd0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d113      	bne.n	80047a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004782:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800478a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr
 80047c8:	40012c00 	.word	0x40012c00

080047cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1d      	ldr	r2, [pc, #116]	; (800489c <TIM_OC3_SetConfig+0xd0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10d      	bne.n	8004846 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a14      	ldr	r2, [pc, #80]	; (800489c <TIM_OC3_SetConfig+0xd0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d113      	bne.n	8004876 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	bc80      	pop	{r7}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40012c00 	.word	0x40012c00

080048a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	031b      	lsls	r3, r3, #12
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0f      	ldr	r2, [pc, #60]	; (8004938 <TIM_OC4_SetConfig+0x98>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d109      	bne.n	8004914 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	019b      	lsls	r3, r3, #6
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00

0800493c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f023 0201 	bic.w	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <TIM_TI1_SetConfig+0xa8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <TIM_TI1_SetConfig+0x46>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004970:	d007      	beq.n	8004982 <TIM_TI1_SetConfig+0x46>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <TIM_TI1_SetConfig+0xac>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_TI1_SetConfig+0x46>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <TIM_TI1_SetConfig+0xb0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d101      	bne.n	8004986 <TIM_TI1_SetConfig+0x4a>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <TIM_TI1_SetConfig+0x4c>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e003      	b.n	80049a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f043 0301 	orr.w	r3, r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f023 030a 	bic.w	r3, r3, #10
 80049c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f003 030a 	and.w	r3, r3, #10
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	621a      	str	r2, [r3, #32]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800

080049f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 030a 	bic.w	r3, r3, #10
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f023 0210 	bic.w	r2, r3, #16
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	031b      	lsls	r3, r3, #12
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a9e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f023 0210 	bic.w	r2, r3, #16
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	031b      	lsls	r3, r3, #12
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b00:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b087      	sub	sp, #28
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
 8004b2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b72:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	621a      	str	r2, [r3, #32]
}
 8004b8e:	bf00      	nop
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bc80      	pop	{r7}
 8004b96:	4770      	bx	lr

08004b98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	021b      	lsls	r3, r3, #8
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	031b      	lsls	r3, r3, #12
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	031b      	lsls	r3, r3, #12
 8004bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr

08004c10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f043 0307 	orr.w	r3, r3, #7
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	609a      	str	r2, [r3, #8]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	021a      	lsls	r2, r3, #8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	609a      	str	r2, [r3, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b087      	sub	sp, #28
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	60b9      	str	r1, [r7, #8]
 8004c8c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2201      	movs	r2, #1
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a1a      	ldr	r2, [r3, #32]
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1a      	ldr	r2, [r3, #32]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	621a      	str	r2, [r3, #32]
}
 8004cc0:	bf00      	nop
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr
	...

08004ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e046      	b.n	8004d72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00e      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d30:	d009      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a12      	ldr	r2, [pc, #72]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d10c      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800

08004d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e042      	b.n	8004e44 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc fde4 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	; 0x24
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fdc5 	bl	8005980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d16d      	bne.n	8004f48 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_UART_Transmit+0x2c>
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e066      	b.n	8004f4a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2221      	movs	r2, #33	; 0x21
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8a:	f7fc ff67 	bl	8001d5c <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	88fa      	ldrh	r2, [r7, #6]
 8004e9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea4:	d108      	bne.n	8004eb8 <HAL_UART_Transmit+0x6c>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d104      	bne.n	8004eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	e003      	b.n	8004ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ec0:	e02a      	b.n	8004f18 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fb14 	bl	80054fa <UART_WaitOnFlagUntilTimeout>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e036      	b.n	8004f4a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ef0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	e007      	b.n	8004f0a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	781a      	ldrb	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1cf      	bne.n	8004ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2140      	movs	r1, #64	; 0x40
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fae4 	bl	80054fa <UART_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e006      	b.n	8004f4a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	e000      	b.n	8004f4a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
  }
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d112      	bne.n	8004f92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_UART_Receive_IT+0x26>
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e00b      	b.n	8004f94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	461a      	mov	r2, r3
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fb24 	bl	80055d6 <UART_Start_Receive_IT>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	e000      	b.n	8004f94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
  }
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b0ba      	sub	sp, #232	; 0xe8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10f      	bne.n	8005002 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <HAL_UART_IRQHandler+0x66>
 8004fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fc01 	bl	8005802 <UART_Receive_IT>
      return;
 8005000:	e25b      	b.n	80054ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80de 	beq.w	80051c8 <HAL_UART_IRQHandler+0x22c>
 800500c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	d106      	bne.n	8005026 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80d1 	beq.w	80051c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <HAL_UART_IRQHandler+0xae>
 8005032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	f043 0201 	orr.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800504a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_UART_IRQHandler+0xd2>
 8005056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d005      	beq.n	800506e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	f043 0202 	orr.w	r2, r3, #2
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00b      	beq.n	8005092 <HAL_UART_IRQHandler+0xf6>
 800507a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	f043 0204 	orr.w	r2, r3, #4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b00      	cmp	r3, #0
 800509c:	d011      	beq.n	80050c2 <HAL_UART_IRQHandler+0x126>
 800509e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d105      	bne.n	80050b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	f043 0208 	orr.w	r2, r3, #8
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 81f2 	beq.w	80054b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d008      	beq.n	80050ea <HAL_UART_IRQHandler+0x14e>
 80050d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d002      	beq.n	80050ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fb8c 	bl	8005802 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf14      	ite	ne
 80050f8:	2301      	movne	r3, #1
 80050fa:	2300      	moveq	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <HAL_UART_IRQHandler+0x17a>
 800510e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d04f      	beq.n	80051b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fa96 	bl	8005648 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d041      	beq.n	80051ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3314      	adds	r3, #20
 8005130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3314      	adds	r3, #20
 8005152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005156:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800515a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800516e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1d9      	bne.n	800512a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d013      	beq.n	80051a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	4a7e      	ldr	r2, [pc, #504]	; (800537c <HAL_UART_IRQHandler+0x3e0>)
 8005184:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	4618      	mov	r0, r3
 800518c:	f7fd fbb4 	bl	80028f8 <HAL_DMA_Abort_IT>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051a0:	4610      	mov	r0, r2
 80051a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a4:	e00e      	b.n	80051c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f993 	bl	80054d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ac:	e00a      	b.n	80051c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f98f 	bl	80054d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b4:	e006      	b.n	80051c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f98b 	bl	80054d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80051c2:	e175      	b.n	80054b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c4:	bf00      	nop
    return;
 80051c6:	e173      	b.n	80054b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	f040 814f 	bne.w	8005470 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8148 	beq.w	8005470 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051e4:	f003 0310 	and.w	r3, r3, #16
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8141 	beq.w	8005470 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 80b6 	beq.w	8005380 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005220:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8145 	beq.w	80054b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800522e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005232:	429a      	cmp	r2, r3
 8005234:	f080 813e 	bcs.w	80054b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800523e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	2b20      	cmp	r3, #32
 8005248:	f000 8088 	beq.w	800535c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	330c      	adds	r3, #12
 8005252:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800526a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005278:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800527c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005284:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005288:	e841 2300 	strex	r3, r2, [r1]
 800528c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005290:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1d9      	bne.n	800524c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3314      	adds	r3, #20
 800529e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80052a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	3314      	adds	r3, #20
 80052b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80052bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80052c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80052c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e1      	bne.n	8005298 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3314      	adds	r3, #20
 80052da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3314      	adds	r3, #20
 80052f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e3      	bne.n	80052d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800532a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532c:	f023 0310 	bic.w	r3, r3, #16
 8005330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800533e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005340:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800534c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e3      	bne.n	800531a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	4618      	mov	r0, r3
 8005358:	f7fd fa93 	bl	8002882 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800536a:	b29b      	uxth	r3, r3
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	b29b      	uxth	r3, r3
 8005370:	4619      	mov	r1, r3
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8b6 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005378:	e09c      	b.n	80054b4 <HAL_UART_IRQHandler+0x518>
 800537a:	bf00      	nop
 800537c:	0800570d 	.word	0x0800570d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005388:	b29b      	uxth	r3, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 808e 	beq.w	80054b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800539c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8089 	beq.w	80054b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	330c      	adds	r3, #12
 80053c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80053ca:	647a      	str	r2, [r7, #68]	; 0x44
 80053cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e3      	bne.n	80053a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3314      	adds	r3, #20
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	623b      	str	r3, [r7, #32]
   return(result);
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f023 0301 	bic.w	r3, r3, #1
 80053f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3314      	adds	r3, #20
 80053fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005402:	633a      	str	r2, [r7, #48]	; 0x30
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e3      	bne.n	80053de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	60fb      	str	r3, [r7, #12]
   return(result);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0310 	bic.w	r3, r3, #16
 800543a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	330c      	adds	r3, #12
 8005444:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005448:	61fa      	str	r2, [r7, #28]
 800544a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	69b9      	ldr	r1, [r7, #24]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	617b      	str	r3, [r7, #20]
   return(result);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e3      	bne.n	8005424 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005462:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f83b 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800546e:	e023      	b.n	80054b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <HAL_UART_IRQHandler+0x4f4>
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f953 	bl	8005734 <UART_Transmit_IT>
    return;
 800548e:	e014      	b.n	80054ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00e      	beq.n	80054ba <HAL_UART_IRQHandler+0x51e>
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f992 	bl	80057d2 <UART_EndTransmit_IT>
    return;
 80054ae:	e004      	b.n	80054ba <HAL_UART_IRQHandler+0x51e>
    return;
 80054b0:	bf00      	nop
 80054b2:	e002      	b.n	80054ba <HAL_UART_IRQHandler+0x51e>
      return;
 80054b4:	bf00      	nop
 80054b6:	e000      	b.n	80054ba <HAL_UART_IRQHandler+0x51e>
      return;
 80054b8:	bf00      	nop
  }
}
 80054ba:	37e8      	adds	r7, #232	; 0xe8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr

080054d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr

080054fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b090      	sub	sp, #64	; 0x40
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	4613      	mov	r3, r2
 8005508:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550a:	e050      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d04c      	beq.n	80055ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <UART_WaitOnFlagUntilTimeout+0x30>
 800551a:	f7fc fc1f 	bl	8001d5c <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005526:	429a      	cmp	r2, r3
 8005528:	d241      	bcs.n	80055ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800554a:	637a      	str	r2, [r7, #52]	; 0x34
 800554c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e5      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3314      	adds	r3, #20
 8005564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	613b      	str	r3, [r7, #16]
   return(result);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f023 0301 	bic.w	r3, r3, #1
 8005574:	63bb      	str	r3, [r7, #56]	; 0x38
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800557e:	623a      	str	r2, [r7, #32]
 8005580:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	69f9      	ldr	r1, [r7, #28]
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	61bb      	str	r3, [r7, #24]
   return(result);
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e5      	bne.n	800555e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e00f      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d09f      	beq.n	800550c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3740      	adds	r7, #64	; 0x40
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	88fa      	ldrh	r2, [r7, #6]
 80055ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2222      	movs	r2, #34	; 0x22
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800561a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0201 	orr.w	r2, r2, #1
 800562a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0220 	orr.w	r2, r2, #32
 800563a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005648:	b480      	push	{r7}
 800564a:	b095      	sub	sp, #84	; 0x54
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	e853 3f00 	ldrex	r3, [r3]
 800565e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005670:	643a      	str	r2, [r7, #64]	; 0x40
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005674:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005678:	e841 2300 	strex	r3, r2, [r1]
 800567c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1e5      	bne.n	8005650 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	61fb      	str	r3, [r7, #28]
   return(result);
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	64bb      	str	r3, [r7, #72]	; 0x48
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ac:	e841 2300 	strex	r3, r2, [r1]
 80056b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e5      	bne.n	8005684 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d119      	bne.n	80056f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	e853 3f00 	ldrex	r3, [r3]
 80056ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f023 0310 	bic.w	r3, r3, #16
 80056d6:	647b      	str	r3, [r7, #68]	; 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056e0:	61ba      	str	r2, [r7, #24]
 80056e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6979      	ldr	r1, [r7, #20]
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	613b      	str	r3, [r7, #16]
   return(result);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e5      	bne.n	80056c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005702:	bf00      	nop
 8005704:	3754      	adds	r7, #84	; 0x54
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff fed3 	bl	80054d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b21      	cmp	r3, #33	; 0x21
 8005746:	d13e      	bne.n	80057c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005750:	d114      	bne.n	800577c <UART_Transmit_IT+0x48>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d110      	bne.n	800577c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800576e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	1c9a      	adds	r2, r3, #2
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	621a      	str	r2, [r3, #32]
 800577a:	e008      	b.n	800578e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6211      	str	r1, [r2, #32]
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29b      	uxth	r3, r3
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	4619      	mov	r1, r3
 800579c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7ff fe64 	bl	80054c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b08c      	sub	sp, #48	; 0x30
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b22      	cmp	r3, #34	; 0x22
 8005814:	f040 80ae 	bne.w	8005974 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005820:	d117      	bne.n	8005852 <UART_Receive_IT+0x50>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d113      	bne.n	8005852 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005840:	b29a      	uxth	r2, r3
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28
 8005850:	e026      	b.n	80058a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005858:	2300      	movs	r3, #0
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005864:	d007      	beq.n	8005876 <UART_Receive_IT+0x74>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <UART_Receive_IT+0x82>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	b2da      	uxtb	r2, r3
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	e008      	b.n	8005896 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005890:	b2da      	uxtb	r2, r3
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	4619      	mov	r1, r3
 80058ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d15d      	bne.n	8005970 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0220 	bic.w	r2, r2, #32
 80058c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d135      	bne.n	8005966 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	613b      	str	r3, [r7, #16]
   return(result);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f023 0310 	bic.w	r3, r3, #16
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005920:	623a      	str	r2, [r7, #32]
 8005922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005924:	69f9      	ldr	r1, [r7, #28]
 8005926:	6a3a      	ldr	r2, [r7, #32]
 8005928:	e841 2300 	strex	r3, r2, [r1]
 800592c:	61bb      	str	r3, [r7, #24]
   return(result);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e5      	bne.n	8005900 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b10      	cmp	r3, #16
 8005940:	d10a      	bne.n	8005958 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff fdc0 	bl	80054e4 <HAL_UARTEx_RxEventCallback>
 8005964:	e002      	b.n	800596c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fb fb32 	bl	8000fd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e002      	b.n	8005976 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	e000      	b.n	8005976 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005974:	2302      	movs	r3, #2
  }
}
 8005976:	4618      	mov	r0, r3
 8005978:	3730      	adds	r7, #48	; 0x30
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059ba:	f023 030c 	bic.w	r3, r3, #12
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	430b      	orrs	r3, r1
 80059c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <UART_SetConfig+0x114>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d103      	bne.n	80059f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059e8:	f7fd fd92 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	e002      	b.n	80059f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059f0:	f7fd fd7a 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 80059f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009a      	lsls	r2, r3, #2
 8005a00:	441a      	add	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <UART_SetConfig+0x118>)
 8005a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	0119      	lsls	r1, r3, #4
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009a      	lsls	r2, r3, #2
 8005a20:	441a      	add	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a2c:	4b1a      	ldr	r3, [pc, #104]	; (8005a98 <UART_SetConfig+0x118>)
 8005a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	2064      	movs	r0, #100	; 0x64
 8005a36:	fb00 f303 	mul.w	r3, r0, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	3332      	adds	r3, #50	; 0x32
 8005a40:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <UART_SetConfig+0x118>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	095b      	lsrs	r3, r3, #5
 8005a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a4c:	4419      	add	r1, r3
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009a      	lsls	r2, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <UART_SetConfig+0x118>)
 8005a66:	fba3 0302 	umull	r0, r3, r3, r2
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	2064      	movs	r0, #100	; 0x64
 8005a6e:	fb00 f303 	mul.w	r3, r0, r3
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	3332      	adds	r3, #50	; 0x32
 8005a78:	4a07      	ldr	r2, [pc, #28]	; (8005a98 <UART_SetConfig+0x118>)
 8005a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	f003 020f 	and.w	r2, r3, #15
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	440a      	add	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40013800 	.word	0x40013800
 8005a98:	51eb851f 	.word	0x51eb851f
 8005a9c:	00000000 	.word	0x00000000

08005aa0 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7f1b      	ldrb	r3, [r3, #28]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f040 8083 	bne.w	8005bb8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8005ab2:	4b45      	ldr	r3, [pc, #276]	; (8005bc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11a      	bne.n	8005af0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8005aba:	2100      	movs	r1, #0
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fe fcf3 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	4a41      	ldr	r2, [pc, #260]	; (8005bcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005ac6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8005ac8:	4b3f      	ldr	r3, [pc, #252]	; (8005bc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 020a 	bic.w	r2, r2, #10
 8005adc:	621a      	str	r2, [r3, #32]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0202 	orr.w	r2, r2, #2
 8005aec:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8005aee:	e063      	b.n	8005bb8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8005af0:	4b35      	ldr	r3, [pc, #212]	; (8005bc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d15f      	bne.n	8005bb8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8005af8:	2100      	movs	r1, #0
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fe fcd4 	bl	80044a8 <HAL_TIM_ReadCapturedValue>
 8005b00:	4603      	mov	r3, r0
 8005b02:	4a33      	ldr	r2, [pc, #204]	; (8005bd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005b04:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8005b0e:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d907      	bls.n	8005b2a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8005b1a:	4b2d      	ldr	r3, [pc, #180]	; (8005bd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	4a2b      	ldr	r2, [pc, #172]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e00f      	b.n	8005b4a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8005b2a:	4b28      	ldr	r3, [pc, #160]	; (8005bcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d909      	bls.n	8005b4a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8005b36:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005b44:	33ff      	adds	r3, #255	; 0xff
 8005b46:	4a23      	ldr	r2, [pc, #140]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005b48:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8005b4a:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fa fc48 	bl	80003e4 <__aeabi_ui2d>
 8005b54:	a31a      	add	r3, pc, #104	; (adr r3, 8005bc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f7fa fcbd 	bl	80004d8 <__aeabi_dmul>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b6e:	f7fa fddd 	bl	800072c <__aeabi_ddiv>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4610      	mov	r0, r2
 8005b78:	4619      	mov	r1, r3
 8005b7a:	f7fa ff85 	bl	8000a88 <__aeabi_d2uiz>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005b84:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 020a 	bic.w	r2, r2, #10
 8005b9a:	621a      	str	r2, [r3, #32]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6a12      	ldr	r2, [r2, #32]
 8005ba6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0202 	bic.w	r2, r2, #2
 8005bb6:	60da      	str	r2, [r3, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	b020c49c 	.word	0xb020c49c
 8005bc4:	3fa16872 	.word	0x3fa16872
 8005bc8:	200003d0 	.word	0x200003d0
 8005bcc:	200003c4 	.word	0x200003c4
 8005bd0:	200003c8 	.word	0x200003c8
 8005bd4:	200003cc 	.word	0x200003cc
 8005bd8:	200003d1 	.word	0x200003d1
 8005bdc:	20000288 	.word	0x20000288

08005be0 <past_errors>:
int speed_left_debug = 0;
/*Static variable*/
static int errors[10] = { 0 };
static int lastError = 0;
/*Supports PID algorithm*/
void past_errors(int error) {
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	for (int i = 9; i > 0; i--) {
 8005be8:	2309      	movs	r3, #9
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e00b      	b.n	8005c06 <past_errors+0x26>
		errors[i] = errors[i - 1];
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <past_errors+0x3c>)
 8005bf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005bf8:	4908      	ldr	r1, [pc, #32]	; (8005c1c <past_errors+0x3c>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 9; i > 0; i--) {
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	dcf0      	bgt.n	8005bee <past_errors+0xe>
	}
	errors[0] = error;
 8005c0c:	4a03      	ldr	r2, [pc, #12]	; (8005c1c <past_errors+0x3c>)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6013      	str	r3, [r2, #0]
}
 8005c12:	bf00      	nop
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr
 8005c1c:	200003d4 	.word	0x200003d4

08005c20 <errors_sum>:
int errors_sum(int index, int abs) {
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	int sum = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < index; i++) {
 8005c2e:	2300      	movs	r3, #0
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	e01a      	b.n	8005c6a <errors_sum+0x4a>
		if (abs == 1 && errors[i] < 0)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d10d      	bne.n	8005c56 <errors_sum+0x36>
 8005c3a:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <errors_sum+0x60>)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	da07      	bge.n	8005c56 <errors_sum+0x36>
			sum += -errors[i];
 8005c46:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <errors_sum+0x60>)
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	e006      	b.n	8005c64 <errors_sum+0x44>
		else
			sum += errors[i];
 8005c56:	4a0a      	ldr	r2, [pc, #40]	; (8005c80 <errors_sum+0x60>)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < index; i++) {
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	dbe0      	blt.n	8005c34 <errors_sum+0x14>
	}
	return sum;
 8005c72:	68fb      	ldr	r3, [r7, #12]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	200003d4 	.word	0x200003d4

08005c84 <PID_control>:
/*PID Control*/
void PID_control(float *Kx, uint16_t *threshold_func_PID)	// Kx: Kp, Ki, Kd
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
	int position = define_data(threshold_func_PID);
 8005c8e:	6838      	ldr	r0, [r7, #0]
 8005c90:	f000 f9e4 	bl	800605c <define_data>
 8005c94:	4603      	mov	r3, r0
 8005c96:	61fb      	str	r3, [r7, #28]
	int error = 4000 - position;
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f5c3 637a 	rsb	r3, r3, #4000	; 0xfa0
 8005c9e:	61bb      	str	r3, [r7, #24]
	int P = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
	int I = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	613b      	str	r3, [r7, #16]
	int D = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]

	past_errors(error);
 8005cac:	69b8      	ldr	r0, [r7, #24]
 8005cae:	f7ff ff97 	bl	8005be0 <past_errors>
	// Kx: Kp, Ki, Kd
	P = error * Kx[0];
 8005cb2:	69b8      	ldr	r0, [r7, #24]
 8005cb4:	f7fa ffc2 	bl	8000c3c <__aeabi_i2f>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f7fb f80f 	bl	8000ce4 <__aeabi_fmul>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fb f95b 	bl	8000f84 <__aeabi_f2iz>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	617b      	str	r3, [r7, #20]
	I = errors_sum(5, 0) * Kx[1];
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	2005      	movs	r0, #5
 8005cd6:	f7ff ffa3 	bl	8005c20 <errors_sum>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fa ffad 	bl	8000c3c <__aeabi_i2f>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f7fa fff9 	bl	8000ce4 <__aeabi_fmul>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fb f945 	bl	8000f84 <__aeabi_f2iz>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	613b      	str	r3, [r7, #16]
	D = (error - lastError) * Kx[2];
 8005cfe:	4b22      	ldr	r3, [pc, #136]	; (8005d88 <PID_control+0x104>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fa ff98 	bl	8000c3c <__aeabi_i2f>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3308      	adds	r3, #8
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4619      	mov	r1, r3
 8005d16:	4610      	mov	r0, r2
 8005d18:	f7fa ffe4 	bl	8000ce4 <__aeabi_fmul>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fb f930 	bl	8000f84 <__aeabi_f2iz>
 8005d24:	4603      	mov	r3, r0
 8005d26:	60fb      	str	r3, [r7, #12]

	lastError = error;
 8005d28:	4a17      	ldr	r2, [pc, #92]	; (8005d88 <PID_control+0x104>)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	6013      	str	r3, [r2, #0]

	int motorspeed = P + I + D;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4413      	add	r3, r2
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	60bb      	str	r3, [r7, #8]

	int motor_speed_right = basespeedr - motorspeed;
 8005d3a:	4b14      	ldr	r3, [pc, #80]	; (8005d8c <PID_control+0x108>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
	int motor_speed_left = basespeedl + motorspeed;
 8005d46:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <PID_control+0x10c>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4413      	add	r3, r2
 8005d50:	623b      	str	r3, [r7, #32]
	/*Feed rate*/
	if (motor_speed_right > maxspeedl) {
 8005d52:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <PID_control+0x110>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	dd02      	ble.n	8005d64 <PID_control+0xe0>
		motor_speed_right = maxspeedl;
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <PID_control+0x110>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (motor_speed_left > maxspeedr) {
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <PID_control+0x114>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	dd02      	ble.n	8005d76 <PID_control+0xf2>
		motor_speed_left = maxspeedr;
 8005d70:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <PID_control+0x114>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	623b      	str	r3, [r7, #32]
	}
	/*Control motor*/
	forward_brake(motor_speed_right, motor_speed_left);
 8005d76:	6a39      	ldr	r1, [r7, #32]
 8005d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d7a:	f000 fdcf 	bl	800691c <forward_brake>

}
 8005d7e:	bf00      	nop
 8005d80:	3728      	adds	r7, #40	; 0x28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	200003fc 	.word	0x200003fc
 8005d8c:	20000019 	.word	0x20000019
 8005d90:	2000001a 	.word	0x2000001a
 8005d94:	2000001c 	.word	0x2000001c
 8005d98:	2000001b 	.word	0x2000001b

08005d9c <IC74HC4051_Init>:
		static uint16_t	pre_pos						= 0;
/*Init function of 74HC4051 and 74HC595*/
	/*74HC4051 INIT*/
		void IC74HC4051_Init(	ADC_HandleTypeDef handler, GPIO_TypeDef * GPIO, 									\
								uint16_t GPIO_Pin_S0, uint16_t GPIO_Pin_S1, uint16_t GPIO_Pin_S2)					\
		{
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	b4b0      	push	{r4, r5, r7}
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	f107 040c 	add.w	r4, r7, #12
 8005da6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			hadc_lib 							= 	handler;
 8005daa:	4b10      	ldr	r3, [pc, #64]	; (8005dec <IC74HC4051_Init+0x50>)
 8005dac:	461d      	mov	r5, r3
 8005dae:	f107 040c 	add.w	r4, r7, #12
 8005db2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005db4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005db6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005db8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005dbe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			IC74HC4051_GPIOx 					= 	GPIO;
 8005dc2:	4a0b      	ldr	r2, [pc, #44]	; (8005df0 <IC74HC4051_Init+0x54>)
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc6:	6013      	str	r3, [r2, #0]
			IC74HC4051_S0_Pin 					= 	GPIO_Pin_S0;
 8005dc8:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <IC74HC4051_Init+0x58>)
 8005dca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005dce:	8013      	strh	r3, [r2, #0]
			IC74HC4051_S1_Pin 					= 	GPIO_Pin_S1;
 8005dd0:	4a09      	ldr	r2, [pc, #36]	; (8005df8 <IC74HC4051_Init+0x5c>)
 8005dd2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005dd6:	8013      	strh	r3, [r2, #0]
			IC74HC4051_S2_Pin 					= 	GPIO_Pin_S2;
 8005dd8:	4a08      	ldr	r2, [pc, #32]	; (8005dfc <IC74HC4051_Init+0x60>)
 8005dda:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005dde:	8013      	strh	r3, [r2, #0]
		}
 8005de0:	bf00      	nop
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bcb0      	pop	{r4, r5, r7}
 8005de6:	b004      	add	sp, #16
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000408 	.word	0x20000408
 8005df0:	20000438 	.word	0x20000438
 8005df4:	2000043c 	.word	0x2000043c
 8005df8:	2000043e 	.word	0x2000043e
 8005dfc:	20000440 	.word	0x20000440

08005e00 <IC74HC595_Init>:
	/*74HC595 INIT*/
		void IC74HC595_Init(	GPIO_TypeDef * DS_Port, GPIO_TypeDef * Shift_Port, GPIO_TypeDef * ST_Port, 			\
								uint16_t DS_Pin, uint16_t SH_Pin, uint16_t ST_Pin)									\
		{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
 8005e0c:	807b      	strh	r3, [r7, #2]
			IC74HC595_ST_Port		=	ST_Port;
 8005e0e:	4a0b      	ldr	r2, [pc, #44]	; (8005e3c <IC74HC595_Init+0x3c>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6013      	str	r3, [r2, #0]
			IC74hc595_DS_Port		= 	DS_Port;
 8005e14:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <IC74HC595_Init+0x40>)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6013      	str	r3, [r2, #0]
			IC74HC595_Shift_Port	=	Shift_Port;
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <IC74HC595_Init+0x44>)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6013      	str	r3, [r2, #0]
			IC74HC595_ST_Pin		=	ST_Pin;
 8005e20:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <IC74HC595_Init+0x48>)
 8005e22:	8bbb      	ldrh	r3, [r7, #28]
 8005e24:	8013      	strh	r3, [r2, #0]
			IC74hc595_Shift_Pin		=	SH_Pin;
 8005e26:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <IC74HC595_Init+0x4c>)
 8005e28:	8b3b      	ldrh	r3, [r7, #24]
 8005e2a:	8013      	strh	r3, [r2, #0]
			IC74hc595_DS_Pin		=	DS_Pin;
 8005e2c:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <IC74HC595_Init+0x50>)
 8005e2e:	887b      	ldrh	r3, [r7, #2]
 8005e30:	8013      	strh	r3, [r2, #0]
		}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr
 8005e3c:	20000444 	.word	0x20000444
 8005e40:	20000448 	.word	0x20000448
 8005e44:	2000044c 	.word	0x2000044c
 8005e48:	20000454 	.word	0x20000454
 8005e4c:	20000450 	.word	0x20000450
 8005e50:	20000452 	.word	0x20000452

08005e54 <IC74hc4051_BitRead>:
/*74HC4051 FUNCTION*/
	GPIO_PinState IC74hc4051_BitRead(uint8_t channel_01, uint8_t index)
	{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	71fb      	strb	r3, [r7, #7]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71bb      	strb	r3, [r7, #6]
		if(((channel_01 >> index) & 1) == 0)
 8005e64:	79fa      	ldrb	r2, [r7, #7]
 8005e66:	79bb      	ldrb	r3, [r7, #6]
 8005e68:	fa42 f303 	asr.w	r3, r2, r3
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <IC74hc4051_BitRead+0x24>
		{
			return GPIO_PIN_RESET;
 8005e74:	2300      	movs	r3, #0
 8005e76:	e000      	b.n	8005e7a <IC74hc4051_BitRead+0x26>
		}
		else
		{
			return GPIO_PIN_SET;
 8005e78:	2301      	movs	r3, #1
		}
	}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr

08005e84 <IC74hc4051_SelectChannel>:
	void IC74hc4051_SelectChannel(uint8_t channel)
	{
 8005e84:	b5b0      	push	{r4, r5, r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(IC74HC4051_GPIOx, IC74HC4051_S0_Pin | IC74HC4051_S1_Pin | IC74HC4051_S2_Pin, GPIO_PIN_RESET);
 8005e8e:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <IC74hc4051_SelectChannel+0x8c>)
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <IC74hc4051_SelectChannel+0x90>)
 8005e94:	881a      	ldrh	r2, [r3, #0]
 8005e96:	4b20      	ldr	r3, [pc, #128]	; (8005f18 <IC74hc4051_SelectChannel+0x94>)
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	4b1f      	ldr	r3, [pc, #124]	; (8005f1c <IC74hc4051_SelectChannel+0x98>)
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fc ff21 	bl	8002cf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IC74HC4051_GPIOx, IC74HC4051_S0_Pin, IC74hc4051_BitRead(channel, 0));
 8005eae:	4b18      	ldr	r3, [pc, #96]	; (8005f10 <IC74hc4051_SelectChannel+0x8c>)
 8005eb0:	681c      	ldr	r4, [r3, #0]
 8005eb2:	4b18      	ldr	r3, [pc, #96]	; (8005f14 <IC74hc4051_SelectChannel+0x90>)
 8005eb4:	881d      	ldrh	r5, [r3, #0]
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff ffca 	bl	8005e54 <IC74hc4051_BitRead>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f7fc ff12 	bl	8002cf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IC74HC4051_GPIOx, IC74HC4051_S1_Pin, IC74hc4051_BitRead(channel, 1));
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <IC74hc4051_SelectChannel+0x8c>)
 8005ece:	681c      	ldr	r4, [r3, #0]
 8005ed0:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <IC74hc4051_SelectChannel+0x94>)
 8005ed2:	881d      	ldrh	r5, [r3, #0]
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff ffbb 	bl	8005e54 <IC74hc4051_BitRead>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	f7fc ff03 	bl	8002cf0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IC74HC4051_GPIOx, IC74HC4051_S2_Pin, IC74hc4051_BitRead(channel, 2));
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <IC74hc4051_SelectChannel+0x8c>)
 8005eec:	681c      	ldr	r4, [r3, #0]
 8005eee:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <IC74hc4051_SelectChannel+0x98>)
 8005ef0:	881d      	ldrh	r5, [r3, #0]
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	2102      	movs	r1, #2
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff ffac 	bl	8005e54 <IC74hc4051_BitRead>
 8005efc:	4603      	mov	r3, r0
 8005efe:	461a      	mov	r2, r3
 8005f00:	4629      	mov	r1, r5
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7fc fef4 	bl	8002cf0 <HAL_GPIO_WritePin>
	}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f10:	20000438 	.word	0x20000438
 8005f14:	2000043c 	.word	0x2000043c
 8005f18:	2000043e 	.word	0x2000043e
 8005f1c:	20000440 	.word	0x20000440

08005f20 <IC74hc4051_Read_rawADC_7Chan>:
		HAL_ADC_Stop(&hadc_lib);
		return value1;
	}
	/*Read real Value 7 Sensor*/
	uint16_t* IC74hc4051_Read_rawADC_7Chan()
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
		uint8_t 				i			= 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	71fb      	strb	r3, [r7, #7]
		static uint16_t 		value[8] 	= {0};
		for(i = 0; i <= 7; i++)
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	71fb      	strb	r3, [r7, #7]
 8005f2e:	e01e      	b.n	8005f6e <IC74hc4051_Read_rawADC_7Chan+0x4e>
		{
			IC74hc4051_SelectChannel(i);												// select one mux pin at a time
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff ffa6 	bl	8005e84 <IC74hc4051_SelectChannel>
			HAL_ADC_Start(&hadc_lib); 														// start the ADC
 8005f38:	4811      	ldr	r0, [pc, #68]	; (8005f80 <IC74hc4051_Read_rawADC_7Chan+0x60>)
 8005f3a:	f7fc f815 	bl	8001f68 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc_lib, 1000);  									// poll for conversion
 8005f3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f42:	480f      	ldr	r0, [pc, #60]	; (8005f80 <IC74hc4051_Read_rawADC_7Chan+0x60>)
 8005f44:	f7fc f8ea 	bl	800211c <HAL_ADC_PollForConversion>
			value[i] 	=  (HAL_ADC_GetValue(&hadc_lib) *100) / 4096;  						// store adc value in value, return value between 0 - 100
 8005f48:	480d      	ldr	r0, [pc, #52]	; (8005f80 <IC74hc4051_Read_rawADC_7Chan+0x60>)
 8005f4a:	f7fc f9ed 	bl	8002328 <HAL_ADC_GetValue>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2264      	movs	r2, #100	; 0x64
 8005f52:	fb02 f303 	mul.w	r3, r2, r3
 8005f56:	0b1a      	lsrs	r2, r3, #12
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	b291      	uxth	r1, r2
 8005f5c:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <IC74hc4051_Read_rawADC_7Chan+0x64>)
 8005f5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			HAL_ADC_Stop(&hadc_lib);
 8005f62:	4807      	ldr	r0, [pc, #28]	; (8005f80 <IC74hc4051_Read_rawADC_7Chan+0x60>)
 8005f64:	f7fc f8ae 	bl	80020c4 <HAL_ADC_Stop>
		for(i = 0; i <= 7; i++)
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	71fb      	strb	r3, [r7, #7]
 8005f6e:	79fb      	ldrb	r3, [r7, #7]
 8005f70:	2b07      	cmp	r3, #7
 8005f72:	d9dd      	bls.n	8005f30 <IC74hc4051_Read_rawADC_7Chan+0x10>
		}
		return value;
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <IC74hc4051_Read_rawADC_7Chan+0x64>)
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000408 	.word	0x20000408
 8005f84:	2000045c 	.word	0x2000045c

08005f88 <IC74HC595>:
/*74HC595 FUNCTION*/
	void IC74HC595(uint16_t  tt)
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	80fb      	strh	r3, [r7, #6]
		uint16_t	tam 	= 	0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	81bb      	strh	r3, [r7, #12]
		uint8_t		i 		= 	0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	73fb      	strb	r3, [r7, #15]
		tam 				= 	tt;
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	81bb      	strh	r3, [r7, #12]
		for(i = 0; i < 8; i++)
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]
 8005fa2:	e031      	b.n	8006008 <IC74HC595+0x80>
		{
			if(tam & (0x80 >> i))
 8005fa4:	89ba      	ldrh	r2, [r7, #12]
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2180      	movs	r1, #128	; 0x80
 8005faa:	fa41 f303 	asr.w	r3, r1, r3
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <IC74HC595+0x3e>
			{
				HAL_GPIO_WritePin(IC74hc595_DS_Port, IC74hc595_DS_Pin, GPIO_PIN_SET);
 8005fb4:	4b23      	ldr	r3, [pc, #140]	; (8006044 <IC74HC595+0xbc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a23      	ldr	r2, [pc, #140]	; (8006048 <IC74HC595+0xc0>)
 8005fba:	8811      	ldrh	r1, [r2, #0]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fc fe96 	bl	8002cf0 <HAL_GPIO_WritePin>
 8005fc4:	e007      	b.n	8005fd6 <IC74HC595+0x4e>
			}
			else
			{
				HAL_GPIO_WritePin(IC74hc595_DS_Port, IC74hc595_DS_Pin, GPIO_PIN_RESET);
 8005fc6:	4b1f      	ldr	r3, [pc, #124]	; (8006044 <IC74HC595+0xbc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1f      	ldr	r2, [pc, #124]	; (8006048 <IC74HC595+0xc0>)
 8005fcc:	8811      	ldrh	r1, [r2, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fc fe8d 	bl	8002cf0 <HAL_GPIO_WritePin>
			}
			HAL_GPIO_WritePin(IC74HC595_Shift_Port, IC74hc595_Shift_Pin ,GPIO_PIN_SET);
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <IC74HC595+0xc4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1d      	ldr	r2, [pc, #116]	; (8006050 <IC74HC595+0xc8>)
 8005fdc:	8811      	ldrh	r1, [r2, #0]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fc fe85 	bl	8002cf0 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	f7fb fec2 	bl	8001d70 <HAL_Delay>
			HAL_GPIO_WritePin(IC74HC595_Shift_Port, IC74hc595_Shift_Pin, GPIO_PIN_RESET);
 8005fec:	4b17      	ldr	r3, [pc, #92]	; (800604c <IC74HC595+0xc4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a17      	ldr	r2, [pc, #92]	; (8006050 <IC74HC595+0xc8>)
 8005ff2:	8811      	ldrh	r1, [r2, #0]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fc fe7a 	bl	8002cf0 <HAL_GPIO_WritePin>
			HAL_Delay(1);
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	f7fb feb7 	bl	8001d70 <HAL_Delay>
		for(i = 0; i < 8; i++)
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3301      	adds	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	2b07      	cmp	r3, #7
 800600c:	d9ca      	bls.n	8005fa4 <IC74HC595+0x1c>
		}
		HAL_GPIO_WritePin(IC74HC595_ST_Port, IC74HC595_ST_Pin, GPIO_PIN_SET);
 800600e:	4b11      	ldr	r3, [pc, #68]	; (8006054 <IC74HC595+0xcc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a11      	ldr	r2, [pc, #68]	; (8006058 <IC74HC595+0xd0>)
 8006014:	8811      	ldrh	r1, [r2, #0]
 8006016:	2201      	movs	r2, #1
 8006018:	4618      	mov	r0, r3
 800601a:	f7fc fe69 	bl	8002cf0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800601e:	2001      	movs	r0, #1
 8006020:	f7fb fea6 	bl	8001d70 <HAL_Delay>
		HAL_GPIO_WritePin(IC74HC595_ST_Port, IC74HC595_ST_Pin, GPIO_PIN_RESET);
 8006024:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <IC74HC595+0xcc>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0b      	ldr	r2, [pc, #44]	; (8006058 <IC74HC595+0xd0>)
 800602a:	8811      	ldrh	r1, [r2, #0]
 800602c:	2200      	movs	r2, #0
 800602e:	4618      	mov	r0, r3
 8006030:	f7fc fe5e 	bl	8002cf0 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8006034:	2001      	movs	r0, #1
 8006036:	f7fb fe9b 	bl	8001d70 <HAL_Delay>
	}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000448 	.word	0x20000448
 8006048:	20000452 	.word	0x20000452
 800604c:	2000044c 	.word	0x2000044c
 8006050:	20000450 	.word	0x20000450
 8006054:	20000444 	.word	0x20000444
 8006058:	20000454 	.word	0x20000454

0800605c <define_data>:
/*Blink LED on Sensor*/
	uint16_t define_data(uint16_t* threshold)
	{
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b089      	sub	sp, #36	; 0x24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
		ADC_get_rawValue_sensor 	= IC74hc4051_Read_rawADC_7Chan(); 				/*Extern variable*/
 8006064:	f7ff ff5c 	bl	8005f20 <IC74hc4051_Read_rawADC_7Chan>
 8006068:	4603      	mov	r3, r0
 800606a:	4a93      	ldr	r2, [pc, #588]	; (80062b8 <define_data+0x25c>)
 800606c:	6013      	str	r3, [r2, #0]
		/*Func variable*/
			uint16_t 	Led_Feedback 				= 0x00;
 800606e:	2300      	movs	r3, #0
 8006070:	83fb      	strh	r3, [r7, #30]
			uint16_t 	MATLED[7] 					= {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40}; // Cathode chung ( chân GND nối chung)
 8006072:	4b92      	ldr	r3, [pc, #584]	; (80062bc <define_data+0x260>)
 8006074:	f107 040c 	add.w	r4, r7, #12
 8006078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800607a:	c407      	stmia	r4!, {r0, r1, r2}
 800607c:	8023      	strh	r3, [r4, #0]
		/*VAL Support func PID*/
			uint16_t 	pos 						= 0;
 800607e:	2300      	movs	r3, #0
 8006080:	83bb      	strh	r3, [r7, #28]
						active	 					= 0;							/*Extern variable*/
 8006082:	4b8f      	ldr	r3, [pc, #572]	; (80062c0 <define_data+0x264>)
 8006084:	2200      	movs	r2, #0
 8006086:	701a      	strb	r2, [r3, #0]
//						last_end 					= END_MIDDLE;					/*Extern variable*/
		/*Check line: BLACK and change value: POS*/
			if (state_line_check == LINE_BLACK)
 8006088:	4b8e      	ldr	r3, [pc, #568]	; (80062c4 <define_data+0x268>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b01      	cmp	r3, #1
 800608e:	f040 8131 	bne.w	80062f4 <define_data+0x298>
			{
				if (threshold[0] < ADC_get_rawValue_sensor[S0])
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	881a      	ldrh	r2, [r3, #0]
 8006096:	4b88      	ldr	r3, [pc, #544]	; (80062b8 <define_data+0x25c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d21b      	bcs.n	80060d8 <define_data+0x7c>
				{
					pos += 1000;
 80060a0:	8bbb      	ldrh	r3, [r7, #28]
 80060a2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80060a6:	83bb      	strh	r3, [r7, #28]
					Led_Feedback |= MATLED[0];									// Set BIT
 80060a8:	89ba      	ldrh	r2, [r7, #12]
 80060aa:	8bfb      	ldrh	r3, [r7, #30]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	83fb      	strh	r3, [r7, #30]
					if((active == 0) && (last_end == END_LEFT))
 80060b0:	4b83      	ldr	r3, [pc, #524]	; (80062c0 <define_data+0x264>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <define_data+0x68>
 80060b8:	4b83      	ldr	r3, [pc, #524]	; (80062c8 <define_data+0x26c>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <define_data+0x68>
					{
						__NOP();
 80060c0:	bf00      	nop
 80060c2:	e012      	b.n	80060ea <define_data+0x8e>
					}
					else
					{
						last_end = END_RIGHT;
 80060c4:	4b80      	ldr	r3, [pc, #512]	; (80062c8 <define_data+0x26c>)
 80060c6:	2202      	movs	r2, #2
 80060c8:	701a      	strb	r2, [r3, #0]
						active++;
 80060ca:	4b7d      	ldr	r3, [pc, #500]	; (80062c0 <define_data+0x264>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	4b7b      	ldr	r3, [pc, #492]	; (80062c0 <define_data+0x264>)
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	e008      	b.n	80060ea <define_data+0x8e>
					}
				}
				else
				{
					Led_Feedback &= ~MATLED[0];									// Clear BIT
 80060d8:	89bb      	ldrh	r3, [r7, #12]
 80060da:	b21b      	sxth	r3, r3
 80060dc:	43db      	mvns	r3, r3
 80060de:	b21a      	sxth	r2, r3
 80060e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80060e4:	4013      	ands	r3, r2
 80060e6:	b21b      	sxth	r3, r3
 80060e8:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[6] < ADC_get_rawValue_sensor[S6])
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	330c      	adds	r3, #12
 80060ee:	881a      	ldrh	r2, [r3, #0]
 80060f0:	4b71      	ldr	r3, [pc, #452]	; (80062b8 <define_data+0x25c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	330a      	adds	r3, #10
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d21c      	bcs.n	8006136 <define_data+0xda>
				{
					pos += 7000;
 80060fc:	8bbb      	ldrh	r3, [r7, #28]
 80060fe:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 8006102:	3318      	adds	r3, #24
 8006104:	83bb      	strh	r3, [r7, #28]
					Led_Feedback |= MATLED[6];									// Set BIT
 8006106:	8b3a      	ldrh	r2, [r7, #24]
 8006108:	8bfb      	ldrh	r3, [r7, #30]
 800610a:	4313      	orrs	r3, r2
 800610c:	83fb      	strh	r3, [r7, #30]
					if((active == 0) && (last_end == END_RIGHT))
 800610e:	4b6c      	ldr	r3, [pc, #432]	; (80062c0 <define_data+0x264>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d105      	bne.n	8006122 <define_data+0xc6>
 8006116:	4b6c      	ldr	r3, [pc, #432]	; (80062c8 <define_data+0x26c>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d101      	bne.n	8006122 <define_data+0xc6>
					{
						__NOP();
 800611e:	bf00      	nop
 8006120:	e012      	b.n	8006148 <define_data+0xec>
					}
					else
					{
						last_end = END_LEFT;
 8006122:	4b69      	ldr	r3, [pc, #420]	; (80062c8 <define_data+0x26c>)
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]
						active++;
 8006128:	4b65      	ldr	r3, [pc, #404]	; (80062c0 <define_data+0x264>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	4b63      	ldr	r3, [pc, #396]	; (80062c0 <define_data+0x264>)
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	e008      	b.n	8006148 <define_data+0xec>
					}// Set BIT
				}
				else
				{
					Led_Feedback &= ~MATLED[6];									// Clear BIT
 8006136:	8b3b      	ldrh	r3, [r7, #24]
 8006138:	b21b      	sxth	r3, r3
 800613a:	43db      	mvns	r3, r3
 800613c:	b21a      	sxth	r2, r3
 800613e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006142:	4013      	ands	r3, r2
 8006144:	b21b      	sxth	r3, r3
 8006146:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[1] < ADC_get_rawValue_sensor[S1])
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3302      	adds	r3, #2
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	4b5a      	ldr	r3, [pc, #360]	; (80062b8 <define_data+0x25c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3302      	adds	r3, #2
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d21b      	bcs.n	8006192 <define_data+0x136>
				{
					pos += 2000;
 800615a:	8bbb      	ldrh	r3, [r7, #28]
 800615c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006160:	83bb      	strh	r3, [r7, #28]
					Led_Feedback |= MATLED[1];									// Set BIT
 8006162:	89fa      	ldrh	r2, [r7, #14]
 8006164:	8bfb      	ldrh	r3, [r7, #30]
 8006166:	4313      	orrs	r3, r2
 8006168:	83fb      	strh	r3, [r7, #30]
//					last_end = END_RIGHT;
					if((active == 0) && (last_end == END_LEFT))
 800616a:	4b55      	ldr	r3, [pc, #340]	; (80062c0 <define_data+0x264>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d105      	bne.n	800617e <define_data+0x122>
 8006172:	4b55      	ldr	r3, [pc, #340]	; (80062c8 <define_data+0x26c>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <define_data+0x122>
					{
						__NOP();
 800617a:	bf00      	nop
 800617c:	e012      	b.n	80061a4 <define_data+0x148>
					}
					else
					{
						last_end 					= END_MIDDLE;
 800617e:	4b52      	ldr	r3, [pc, #328]	; (80062c8 <define_data+0x26c>)
 8006180:	2204      	movs	r2, #4
 8006182:	701a      	strb	r2, [r3, #0]
						active++;
 8006184:	4b4e      	ldr	r3, [pc, #312]	; (80062c0 <define_data+0x264>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	b2da      	uxtb	r2, r3
 800618c:	4b4c      	ldr	r3, [pc, #304]	; (80062c0 <define_data+0x264>)
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e008      	b.n	80061a4 <define_data+0x148>
					}
				}
				else
				{
					Led_Feedback &= ~MATLED[1];									// Clear BIT
 8006192:	89fb      	ldrh	r3, [r7, #14]
 8006194:	b21b      	sxth	r3, r3
 8006196:	43db      	mvns	r3, r3
 8006198:	b21a      	sxth	r2, r3
 800619a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800619e:	4013      	ands	r3, r2
 80061a0:	b21b      	sxth	r3, r3
 80061a2:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[2] < ADC_get_rawValue_sensor[S2])
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	881a      	ldrh	r2, [r3, #0]
 80061aa:	4b43      	ldr	r3, [pc, #268]	; (80062b8 <define_data+0x25c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3304      	adds	r3, #4
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d211      	bcs.n	80061da <define_data+0x17e>
				{
					pos += 3000;
 80061b6:	8bbb      	ldrh	r3, [r7, #28]
 80061b8:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80061bc:	83bb      	strh	r3, [r7, #28]
					active++;
 80061be:	4b40      	ldr	r3, [pc, #256]	; (80062c0 <define_data+0x264>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	3301      	adds	r3, #1
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	4b3e      	ldr	r3, [pc, #248]	; (80062c0 <define_data+0x264>)
 80061c8:	701a      	strb	r2, [r3, #0]
					Led_Feedback |= MATLED[2];
 80061ca:	8a3a      	ldrh	r2, [r7, #16]
 80061cc:	8bfb      	ldrh	r3, [r7, #30]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	83fb      	strh	r3, [r7, #30]
					last_end 					= END_MIDDLE;// Set BIT
 80061d2:	4b3d      	ldr	r3, [pc, #244]	; (80062c8 <define_data+0x26c>)
 80061d4:	2204      	movs	r2, #4
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	e008      	b.n	80061ec <define_data+0x190>
				}
				else
				{
					Led_Feedback &= ~MATLED[2];									// Clear BIT
 80061da:	8a3b      	ldrh	r3, [r7, #16]
 80061dc:	b21b      	sxth	r3, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	b21a      	sxth	r2, r3
 80061e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80061e6:	4013      	ands	r3, r2
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[3] < ADC_get_rawValue_sensor[S3])
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3306      	adds	r3, #6
 80061f0:	881a      	ldrh	r2, [r3, #0]
 80061f2:	4b31      	ldr	r3, [pc, #196]	; (80062b8 <define_data+0x25c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d211      	bcs.n	8006222 <define_data+0x1c6>
				{
					pos += 4000;
 80061fe:	8bbb      	ldrh	r3, [r7, #28]
 8006200:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8006204:	83bb      	strh	r3, [r7, #28]
					active++;
 8006206:	4b2e      	ldr	r3, [pc, #184]	; (80062c0 <define_data+0x264>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	3301      	adds	r3, #1
 800620c:	b2da      	uxtb	r2, r3
 800620e:	4b2c      	ldr	r3, [pc, #176]	; (80062c0 <define_data+0x264>)
 8006210:	701a      	strb	r2, [r3, #0]
					Led_Feedback |= MATLED[3];
 8006212:	8a7a      	ldrh	r2, [r7, #18]
 8006214:	8bfb      	ldrh	r3, [r7, #30]
 8006216:	4313      	orrs	r3, r2
 8006218:	83fb      	strh	r3, [r7, #30]
					last_end 					= END_MIDDLE;// Set BIT
 800621a:	4b2b      	ldr	r3, [pc, #172]	; (80062c8 <define_data+0x26c>)
 800621c:	2204      	movs	r2, #4
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e008      	b.n	8006234 <define_data+0x1d8>
				}
				else
				{
					Led_Feedback &= ~MATLED[3];									// Clear BIT
 8006222:	8a7b      	ldrh	r3, [r7, #18]
 8006224:	b21b      	sxth	r3, r3
 8006226:	43db      	mvns	r3, r3
 8006228:	b21a      	sxth	r2, r3
 800622a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800622e:	4013      	ands	r3, r2
 8006230:	b21b      	sxth	r3, r3
 8006232:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[4] < ADC_get_rawValue_sensor[S4])
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3308      	adds	r3, #8
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	4b1f      	ldr	r3, [pc, #124]	; (80062b8 <define_data+0x25c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	330c      	adds	r3, #12
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d212      	bcs.n	800626c <define_data+0x210>
				{
					pos += 5000;
 8006246:	8bbb      	ldrh	r3, [r7, #28]
 8006248:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800624c:	3308      	adds	r3, #8
 800624e:	83bb      	strh	r3, [r7, #28]
					active++;
 8006250:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <define_data+0x264>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	3301      	adds	r3, #1
 8006256:	b2da      	uxtb	r2, r3
 8006258:	4b19      	ldr	r3, [pc, #100]	; (80062c0 <define_data+0x264>)
 800625a:	701a      	strb	r2, [r3, #0]
					Led_Feedback |= MATLED[4];
 800625c:	8aba      	ldrh	r2, [r7, #20]
 800625e:	8bfb      	ldrh	r3, [r7, #30]
 8006260:	4313      	orrs	r3, r2
 8006262:	83fb      	strh	r3, [r7, #30]
					last_end 					= END_MIDDLE;// Set BIT
 8006264:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <define_data+0x26c>)
 8006266:	2204      	movs	r2, #4
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	e008      	b.n	800627e <define_data+0x222>
				}
				else
				{
					Led_Feedback &= ~MATLED[4];									// Clear BIT
 800626c:	8abb      	ldrh	r3, [r7, #20]
 800626e:	b21b      	sxth	r3, r3
 8006270:	43db      	mvns	r3, r3
 8006272:	b21a      	sxth	r2, r3
 8006274:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006278:	4013      	ands	r3, r2
 800627a:	b21b      	sxth	r3, r3
 800627c:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[5] < ADC_get_rawValue_sensor[S5])
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	330a      	adds	r3, #10
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <define_data+0x25c>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330e      	adds	r3, #14
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d227      	bcs.n	80062e0 <define_data+0x284>
				{
					pos += 6000;
 8006290:	8bbb      	ldrh	r3, [r7, #28]
 8006292:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8006296:	3310      	adds	r3, #16
 8006298:	83bb      	strh	r3, [r7, #28]
					Led_Feedback |= MATLED[5];									// Set BIT
 800629a:	8afa      	ldrh	r2, [r7, #22]
 800629c:	8bfb      	ldrh	r3, [r7, #30]
 800629e:	4313      	orrs	r3, r2
 80062a0:	83fb      	strh	r3, [r7, #30]
//					last_end = END_LEFT;
					if((active == 0) && (last_end == END_RIGHT))
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <define_data+0x264>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d110      	bne.n	80062cc <define_data+0x270>
 80062aa:	4b07      	ldr	r3, [pc, #28]	; (80062c8 <define_data+0x26c>)
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d10c      	bne.n	80062cc <define_data+0x270>
					{
						__NOP();
 80062b2:	bf00      	nop
 80062b4:	e13d      	b.n	8006532 <define_data+0x4d6>
 80062b6:	bf00      	nop
 80062b8:	20000404 	.word	0x20000404
 80062bc:	0800a1f8 	.word	0x0800a1f8
 80062c0:	20000402 	.word	0x20000402
 80062c4:	20000458 	.word	0x20000458
 80062c8:	2000001d 	.word	0x2000001d
					}
					else
					{
						last_end 					= END_MIDDLE;
 80062cc:	4b90      	ldr	r3, [pc, #576]	; (8006510 <define_data+0x4b4>)
 80062ce:	2204      	movs	r2, #4
 80062d0:	701a      	strb	r2, [r3, #0]
						active++;
 80062d2:	4b90      	ldr	r3, [pc, #576]	; (8006514 <define_data+0x4b8>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	3301      	adds	r3, #1
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	4b8e      	ldr	r3, [pc, #568]	; (8006514 <define_data+0x4b8>)
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	e128      	b.n	8006532 <define_data+0x4d6>
					}
				}
				else
				{
					Led_Feedback &= ~MATLED[5];									// Clear BIT
 80062e0:	8afb      	ldrh	r3, [r7, #22]
 80062e2:	b21b      	sxth	r3, r3
 80062e4:	43db      	mvns	r3, r3
 80062e6:	b21a      	sxth	r2, r3
 80062e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80062ec:	4013      	ands	r3, r2
 80062ee:	b21b      	sxth	r3, r3
 80062f0:	83fb      	strh	r3, [r7, #30]
 80062f2:	e11e      	b.n	8006532 <define_data+0x4d6>
				}
			}
		/*End check line: BLACK*/

		/*Check line: WHITE and change value: POS*/
			else if(state_line_check == LINE_WHITE)
 80062f4:	4b88      	ldr	r3, [pc, #544]	; (8006518 <define_data+0x4bc>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 811a 	bne.w	8006532 <define_data+0x4d6>
			{
				if (threshold[0] >= ADC_get_rawValue_sensor[S0])
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	881a      	ldrh	r2, [r3, #0]
 8006302:	4b86      	ldr	r3, [pc, #536]	; (800651c <define_data+0x4c0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d31b      	bcc.n	8006344 <define_data+0x2e8>
				{
					pos += 1000;
 800630c:	8bbb      	ldrh	r3, [r7, #28]
 800630e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8006312:	83bb      	strh	r3, [r7, #28]
					Led_Feedback |= MATLED[0];									// Set BIT
 8006314:	89ba      	ldrh	r2, [r7, #12]
 8006316:	8bfb      	ldrh	r3, [r7, #30]
 8006318:	4313      	orrs	r3, r2
 800631a:	83fb      	strh	r3, [r7, #30]
					if((active == 0) && (last_end == END_LEFT))
 800631c:	4b7d      	ldr	r3, [pc, #500]	; (8006514 <define_data+0x4b8>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d105      	bne.n	8006330 <define_data+0x2d4>
 8006324:	4b7a      	ldr	r3, [pc, #488]	; (8006510 <define_data+0x4b4>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <define_data+0x2d4>
					{
						__NOP();
 800632c:	bf00      	nop
 800632e:	e012      	b.n	8006356 <define_data+0x2fa>
					}
					else
					{
						last_end = END_RIGHT;
 8006330:	4b77      	ldr	r3, [pc, #476]	; (8006510 <define_data+0x4b4>)
 8006332:	2202      	movs	r2, #2
 8006334:	701a      	strb	r2, [r3, #0]
						active++;
 8006336:	4b77      	ldr	r3, [pc, #476]	; (8006514 <define_data+0x4b8>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	b2da      	uxtb	r2, r3
 800633e:	4b75      	ldr	r3, [pc, #468]	; (8006514 <define_data+0x4b8>)
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	e008      	b.n	8006356 <define_data+0x2fa>
					}
				}
				else
				{
					Led_Feedback &= ~MATLED[0];									// Clear BIT
 8006344:	89bb      	ldrh	r3, [r7, #12]
 8006346:	b21b      	sxth	r3, r3
 8006348:	43db      	mvns	r3, r3
 800634a:	b21a      	sxth	r2, r3
 800634c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006350:	4013      	ands	r3, r2
 8006352:	b21b      	sxth	r3, r3
 8006354:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[6] >= ADC_get_rawValue_sensor[S6])
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	330c      	adds	r3, #12
 800635a:	881a      	ldrh	r2, [r3, #0]
 800635c:	4b6f      	ldr	r3, [pc, #444]	; (800651c <define_data+0x4c0>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330a      	adds	r3, #10
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d31c      	bcc.n	80063a2 <define_data+0x346>
				{
					pos += 7000;
 8006368:	8bbb      	ldrh	r3, [r7, #28]
 800636a:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800636e:	3318      	adds	r3, #24
 8006370:	83bb      	strh	r3, [r7, #28]
					Led_Feedback |= MATLED[6];
 8006372:	8b3a      	ldrh	r2, [r7, #24]
 8006374:	8bfb      	ldrh	r3, [r7, #30]
 8006376:	4313      	orrs	r3, r2
 8006378:	83fb      	strh	r3, [r7, #30]
					if((active == 0) && (last_end == END_RIGHT))
 800637a:	4b66      	ldr	r3, [pc, #408]	; (8006514 <define_data+0x4b8>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d105      	bne.n	800638e <define_data+0x332>
 8006382:	4b63      	ldr	r3, [pc, #396]	; (8006510 <define_data+0x4b4>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d101      	bne.n	800638e <define_data+0x332>
					{
						__NOP();
 800638a:	bf00      	nop
 800638c:	e012      	b.n	80063b4 <define_data+0x358>
					}
					else
					{
						last_end = END_LEFT;
 800638e:	4b60      	ldr	r3, [pc, #384]	; (8006510 <define_data+0x4b4>)
 8006390:	2201      	movs	r2, #1
 8006392:	701a      	strb	r2, [r3, #0]
						active++;
 8006394:	4b5f      	ldr	r3, [pc, #380]	; (8006514 <define_data+0x4b8>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	4b5d      	ldr	r3, [pc, #372]	; (8006514 <define_data+0x4b8>)
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	e008      	b.n	80063b4 <define_data+0x358>
					}// Set BIT
				}
				else
				{
					Led_Feedback &= ~MATLED[6];									// Clear BIT
 80063a2:	8b3b      	ldrh	r3, [r7, #24]
 80063a4:	b21b      	sxth	r3, r3
 80063a6:	43db      	mvns	r3, r3
 80063a8:	b21a      	sxth	r2, r3
 80063aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80063ae:	4013      	ands	r3, r2
 80063b0:	b21b      	sxth	r3, r3
 80063b2:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[1] >= ADC_get_rawValue_sensor[S1])
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3302      	adds	r3, #2
 80063b8:	881a      	ldrh	r2, [r3, #0]
 80063ba:	4b58      	ldr	r3, [pc, #352]	; (800651c <define_data+0x4c0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3302      	adds	r3, #2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d311      	bcc.n	80063ea <define_data+0x38e>
				{
					pos += 2000;
 80063c6:	8bbb      	ldrh	r3, [r7, #28]
 80063c8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80063cc:	83bb      	strh	r3, [r7, #28]
					active++;
 80063ce:	4b51      	ldr	r3, [pc, #324]	; (8006514 <define_data+0x4b8>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b4f      	ldr	r3, [pc, #316]	; (8006514 <define_data+0x4b8>)
 80063d8:	701a      	strb	r2, [r3, #0]
					Led_Feedback |= MATLED[1];									// Set BIT
 80063da:	89fa      	ldrh	r2, [r7, #14]
 80063dc:	8bfb      	ldrh	r3, [r7, #30]
 80063de:	4313      	orrs	r3, r2
 80063e0:	83fb      	strh	r3, [r7, #30]
//					last_end = END_RIGHT;
					last_end 					= END_MIDDLE;
 80063e2:	4b4b      	ldr	r3, [pc, #300]	; (8006510 <define_data+0x4b4>)
 80063e4:	2204      	movs	r2, #4
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	e008      	b.n	80063fc <define_data+0x3a0>
				}
				else
				{
					Led_Feedback &= ~MATLED[1];									// Clear BIT
 80063ea:	89fb      	ldrh	r3, [r7, #14]
 80063ec:	b21b      	sxth	r3, r3
 80063ee:	43db      	mvns	r3, r3
 80063f0:	b21a      	sxth	r2, r3
 80063f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80063f6:	4013      	ands	r3, r2
 80063f8:	b21b      	sxth	r3, r3
 80063fa:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[2] >= ADC_get_rawValue_sensor[S2])
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	881a      	ldrh	r2, [r3, #0]
 8006402:	4b46      	ldr	r3, [pc, #280]	; (800651c <define_data+0x4c0>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d311      	bcc.n	8006432 <define_data+0x3d6>
				{
					pos += 3000;
 800640e:	8bbb      	ldrh	r3, [r7, #28]
 8006410:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8006414:	83bb      	strh	r3, [r7, #28]
					active++;
 8006416:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <define_data+0x4b8>)
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	3301      	adds	r3, #1
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4b3d      	ldr	r3, [pc, #244]	; (8006514 <define_data+0x4b8>)
 8006420:	701a      	strb	r2, [r3, #0]
					Led_Feedback |= MATLED[2];									// Set BIT
 8006422:	8a3a      	ldrh	r2, [r7, #16]
 8006424:	8bfb      	ldrh	r3, [r7, #30]
 8006426:	4313      	orrs	r3, r2
 8006428:	83fb      	strh	r3, [r7, #30]
					last_end 					= END_MIDDLE;
 800642a:	4b39      	ldr	r3, [pc, #228]	; (8006510 <define_data+0x4b4>)
 800642c:	2204      	movs	r2, #4
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	e008      	b.n	8006444 <define_data+0x3e8>
				}
				else
				{
					Led_Feedback &= ~MATLED[2];									// Clear BIT
 8006432:	8a3b      	ldrh	r3, [r7, #16]
 8006434:	b21b      	sxth	r3, r3
 8006436:	43db      	mvns	r3, r3
 8006438:	b21a      	sxth	r2, r3
 800643a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800643e:	4013      	ands	r3, r2
 8006440:	b21b      	sxth	r3, r3
 8006442:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[3] >= ADC_get_rawValue_sensor[S3])
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3306      	adds	r3, #6
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	4b34      	ldr	r3, [pc, #208]	; (800651c <define_data+0x4c0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3308      	adds	r3, #8
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d311      	bcc.n	800647a <define_data+0x41e>
				{
					pos += 4000;
 8006456:	8bbb      	ldrh	r3, [r7, #28]
 8006458:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800645c:	83bb      	strh	r3, [r7, #28]
					active++;
 800645e:	4b2d      	ldr	r3, [pc, #180]	; (8006514 <define_data+0x4b8>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	3301      	adds	r3, #1
 8006464:	b2da      	uxtb	r2, r3
 8006466:	4b2b      	ldr	r3, [pc, #172]	; (8006514 <define_data+0x4b8>)
 8006468:	701a      	strb	r2, [r3, #0]
					Led_Feedback |= MATLED[3];
 800646a:	8a7a      	ldrh	r2, [r7, #18]
 800646c:	8bfb      	ldrh	r3, [r7, #30]
 800646e:	4313      	orrs	r3, r2
 8006470:	83fb      	strh	r3, [r7, #30]
					last_end 					= END_MIDDLE;// Set BIT
 8006472:	4b27      	ldr	r3, [pc, #156]	; (8006510 <define_data+0x4b4>)
 8006474:	2204      	movs	r2, #4
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e008      	b.n	800648c <define_data+0x430>
				}
				else
				{
					Led_Feedback &= ~MATLED[3];									// Clear BIT
 800647a:	8a7b      	ldrh	r3, [r7, #18]
 800647c:	b21b      	sxth	r3, r3
 800647e:	43db      	mvns	r3, r3
 8006480:	b21a      	sxth	r2, r3
 8006482:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006486:	4013      	ands	r3, r2
 8006488:	b21b      	sxth	r3, r3
 800648a:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[4] >= ADC_get_rawValue_sensor[S4])
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3308      	adds	r3, #8
 8006490:	881a      	ldrh	r2, [r3, #0]
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <define_data+0x4c0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	330c      	adds	r3, #12
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d312      	bcc.n	80064c4 <define_data+0x468>
				{
					pos += 5000;
 800649e:	8bbb      	ldrh	r3, [r7, #28]
 80064a0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80064a4:	3308      	adds	r3, #8
 80064a6:	83bb      	strh	r3, [r7, #28]
					active++;
 80064a8:	4b1a      	ldr	r3, [pc, #104]	; (8006514 <define_data+0x4b8>)
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	4b18      	ldr	r3, [pc, #96]	; (8006514 <define_data+0x4b8>)
 80064b2:	701a      	strb	r2, [r3, #0]
					Led_Feedback |= MATLED[4];									// Set BIT
 80064b4:	8aba      	ldrh	r2, [r7, #20]
 80064b6:	8bfb      	ldrh	r3, [r7, #30]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	83fb      	strh	r3, [r7, #30]
					last_end 					= END_MIDDLE;
 80064bc:	4b14      	ldr	r3, [pc, #80]	; (8006510 <define_data+0x4b4>)
 80064be:	2204      	movs	r2, #4
 80064c0:	701a      	strb	r2, [r3, #0]
 80064c2:	e008      	b.n	80064d6 <define_data+0x47a>
				}
				else
				{
					Led_Feedback &= ~MATLED[4];									// Clear BIT
 80064c4:	8abb      	ldrh	r3, [r7, #20]
 80064c6:	b21b      	sxth	r3, r3
 80064c8:	43db      	mvns	r3, r3
 80064ca:	b21a      	sxth	r2, r3
 80064cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80064d0:	4013      	ands	r3, r2
 80064d2:	b21b      	sxth	r3, r3
 80064d4:	83fb      	strh	r3, [r7, #30]
				}
				if (threshold[5] >= ADC_get_rawValue_sensor[S5])
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	330a      	adds	r3, #10
 80064da:	881a      	ldrh	r2, [r3, #0]
 80064dc:	4b0f      	ldr	r3, [pc, #60]	; (800651c <define_data+0x4c0>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330e      	adds	r3, #14
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d31b      	bcc.n	8006520 <define_data+0x4c4>
				{
					pos += 6000;
 80064e8:	8bbb      	ldrh	r3, [r7, #28]
 80064ea:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80064ee:	3310      	adds	r3, #16
 80064f0:	83bb      	strh	r3, [r7, #28]
					active++;
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <define_data+0x4b8>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <define_data+0x4b8>)
 80064fc:	701a      	strb	r2, [r3, #0]
					Led_Feedback |= MATLED[5];									// Set BIT
 80064fe:	8afa      	ldrh	r2, [r7, #22]
 8006500:	8bfb      	ldrh	r3, [r7, #30]
 8006502:	4313      	orrs	r3, r2
 8006504:	83fb      	strh	r3, [r7, #30]
//					last_end = END_LEFT;
					last_end 					= END_MIDDLE;
 8006506:	4b02      	ldr	r3, [pc, #8]	; (8006510 <define_data+0x4b4>)
 8006508:	2204      	movs	r2, #4
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	e011      	b.n	8006532 <define_data+0x4d6>
 800650e:	bf00      	nop
 8006510:	2000001d 	.word	0x2000001d
 8006514:	20000402 	.word	0x20000402
 8006518:	20000458 	.word	0x20000458
 800651c:	20000404 	.word	0x20000404
				}
				else
				{
					Led_Feedback &= ~MATLED[5];									// Clear BIT
 8006520:	8afb      	ldrh	r3, [r7, #22]
 8006522:	b21b      	sxth	r3, r3
 8006524:	43db      	mvns	r3, r3
 8006526:	b21a      	sxth	r2, r3
 8006528:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800652c:	4013      	ands	r3, r2
 800652e:	b21b      	sxth	r3, r3
 8006530:	83fb      	strh	r3, [r7, #30]
				}
			}
		/* End check line: WHITE*/
		/* Set LED on Sensor circuit */
			IC74HC595(Led_Feedback);
 8006532:	8bfb      	ldrh	r3, [r7, #30]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fd27 	bl	8005f88 <IC74HC595>
		/*Check sensor: Giai quyet vach xuong ca*/
			pos_sensor = Led_Feedback;
 800653a:	4a21      	ldr	r2, [pc, #132]	; (80065c0 <define_data+0x564>)
 800653c:	8bfb      	ldrh	r3, [r7, #30]
 800653e:	8013      	strh	r3, [r2, #0]
			if		(Check_error(pos_sensor) == LINE_ERROR)								// If haven't right state
 8006540:	4b1f      	ldr	r3, [pc, #124]	; (80065c0 <define_data+0x564>)
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f849 	bl	80065dc <Check_error>
 800654a:	4603      	mov	r3, r0
 800654c:	2b08      	cmp	r3, #8
 800654e:	d10a      	bne.n	8006566 <define_data+0x50a>
			{
				/*Tam dung doc sensor va cho chay theo vi tri cu~*/
					active 						= pre_active;
 8006550:	4b1c      	ldr	r3, [pc, #112]	; (80065c4 <define_data+0x568>)
 8006552:	781a      	ldrb	r2, [r3, #0]
 8006554:	4b1c      	ldr	r3, [pc, #112]	; (80065c8 <define_data+0x56c>)
 8006556:	701a      	strb	r2, [r3, #0]
					pos							= pre_pos;
 8006558:	4b1c      	ldr	r3, [pc, #112]	; (80065cc <define_data+0x570>)
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	83bb      	strh	r3, [r7, #28]
					last_end 					= END_MIDDLE;
 800655e:	4b1c      	ldr	r3, [pc, #112]	; (80065d0 <define_data+0x574>)
 8006560:	2204      	movs	r2, #4
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	e00e      	b.n	8006584 <define_data+0x528>
			}
			else if	(Check_error(pos_sensor) == LINE_VALID)
 8006566:	4b16      	ldr	r3, [pc, #88]	; (80065c0 <define_data+0x564>)
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f836 	bl	80065dc <Check_error>
 8006570:	4603      	mov	r3, r0
 8006572:	2b09      	cmp	r3, #9
 8006574:	d106      	bne.n	8006584 <define_data+0x528>
			{
					pre_active					= active;
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <define_data+0x56c>)
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <define_data+0x568>)
 800657c:	701a      	strb	r2, [r3, #0]
					pre_pos						= pos;
 800657e:	4a13      	ldr	r2, [pc, #76]	; (80065cc <define_data+0x570>)
 8006580:	8bbb      	ldrh	r3, [r7, #28]
 8006582:	8013      	strh	r3, [r2, #0]
			}
		/*Return value*/
			if (active == 0)
 8006584:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <define_data+0x56c>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10c      	bne.n	80065a6 <define_data+0x54a>
			{
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 800658c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006590:	4810      	ldr	r0, [pc, #64]	; (80065d4 <define_data+0x578>)
 8006592:	f7fc fbc5 	bl	8002d20 <HAL_GPIO_TogglePin>
				last_idle ++;
 8006596:	4b10      	ldr	r3, [pc, #64]	; (80065d8 <define_data+0x57c>)
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	3301      	adds	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <define_data+0x57c>)
 80065a0:	801a      	strh	r2, [r3, #0]
				return 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e008      	b.n	80065b8 <define_data+0x55c>
			}
			else
			{
				last_idle = 0;
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <define_data+0x57c>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	801a      	strh	r2, [r3, #0]
				return pos/(uint16_t)active;
 80065ac:	8bbb      	ldrh	r3, [r7, #28]
 80065ae:	4a06      	ldr	r2, [pc, #24]	; (80065c8 <define_data+0x56c>)
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80065b6:	b29b      	uxth	r3, r3
			}
	}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3724      	adds	r7, #36	; 0x24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd90      	pop	{r4, r7, pc}
 80065c0:	20000456 	.word	0x20000456
 80065c4:	20000459 	.word	0x20000459
 80065c8:	20000402 	.word	0x20000402
 80065cc:	2000045a 	.word	0x2000045a
 80065d0:	2000001d 	.word	0x2000001d
 80065d4:	40010c00 	.word	0x40010c00
 80065d8:	20000400 	.word	0x20000400

080065dc <Check_error>:
	/*Line signal error??*/
	LINE_STATE Check_error(uint16_t F_pos_SS)
	{
 80065dc:	b490      	push	{r4, r7}
 80065de:	b08e      	sub	sp, #56	; 0x38
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	80fb      	strh	r3, [r7, #6]
		uint16_t 	pos1_valid[7]	=	{0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40};
 80065e6:	4b53      	ldr	r3, [pc, #332]	; (8006734 <Check_error+0x158>)
 80065e8:	f107 0420 	add.w	r4, r7, #32
 80065ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065ee:	c407      	stmia	r4!, {r0, r1, r2}
 80065f0:	8023      	strh	r3, [r4, #0]
		uint16_t 	pos2_valid[6]	=	{0x60, 0x18, 0x06, 0x30, 0x0C, 0x03};
 80065f2:	4a51      	ldr	r2, [pc, #324]	; (8006738 <Check_error+0x15c>)
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80065fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		uint16_t	pos3_valid[5]	=	{0x38, 0x07, 0x70, 0x0D, 0x1C};
 80065fe:	4a4f      	ldr	r2, [pc, #316]	; (800673c <Check_error+0x160>)
 8006600:	f107 0308 	add.w	r3, r7, #8
 8006604:	ca07      	ldmia	r2, {r0, r1, r2}
 8006606:	c303      	stmia	r3!, {r0, r1}
 8006608:	801a      	strh	r2, [r3, #0]
//		uint16_t 	pos4_valid[4]	= 	{0xF0, 0x0F, 0x1E, 0x3C};
//		uint16_t 	pos5_valid[2]	= 	{0x7C, 0x1F};

		uint16_t	tam 			= 	F_pos_SS;
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	863b      	strh	r3, [r7, #48]	; 0x30
		uint8_t 	count			=	0;
 800660e:	2300      	movs	r3, #0
 8006610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		uint8_t		valid_mem		=	0;
 8006614:	2300      	movs	r3, #0
 8006616:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		/*How many SS get line = count*/
			for(uint8_t i = 1; i <= 7; i++)
 800661a:	2301      	movs	r3, #1
 800661c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006620:	e012      	b.n	8006648 <Check_error+0x6c>
			{
				if(tam & (0x80 >> i))
 8006622:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006624:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006628:	2180      	movs	r1, #128	; 0x80
 800662a:	fa41 f303 	asr.w	r3, r1, r3
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <Check_error+0x62>
				{
					count++;
 8006634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006638:	3301      	adds	r3, #1
 800663a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			for(uint8_t i = 1; i <= 7; i++)
 800663e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006642:	3301      	adds	r3, #1
 8006644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8006648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800664c:	2b07      	cmp	r3, #7
 800664e:	d9e8      	bls.n	8006622 <Check_error+0x46>
				}
			}
		/*State Line BLACK LINE*/
			/*STate LINE BLACK = 1*/
			if(count == 1)
 8006650:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006654:	2b01      	cmp	r3, #1
 8006656:	d11c      	bne.n	8006692 <Check_error+0xb6>
			{
				for(uint8_t i1 = 0; i1 <= sizeof(pos1_valid); i1++)
 8006658:	2300      	movs	r3, #0
 800665a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800665e:	e013      	b.n	8006688 <Check_error+0xac>
				{
					if(tam == pos1_valid[i1])
 8006660:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	3338      	adds	r3, #56	; 0x38
 8006668:	443b      	add	r3, r7
 800666a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800666e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006670:	429a      	cmp	r2, r3
 8006672:	d104      	bne.n	800667e <Check_error+0xa2>
					{
						valid_mem++;
 8006674:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006678:	3301      	adds	r3, #1
 800667a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				for(uint8_t i1 = 0; i1 <= sizeof(pos1_valid); i1++)
 800667e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006682:	3301      	adds	r3, #1
 8006684:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8006688:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800668c:	2b0e      	cmp	r3, #14
 800668e:	d9e7      	bls.n	8006660 <Check_error+0x84>
 8006690:	e040      	b.n	8006714 <Check_error+0x138>
					}
				}
			}
			/*STate LINE BLACK = 2*/
			else if(count == 2)
 8006692:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006696:	2b02      	cmp	r3, #2
 8006698:	d11c      	bne.n	80066d4 <Check_error+0xf8>
			{
				for(uint8_t i2 = 0; i2 <= sizeof(pos2_valid); i2++)
 800669a:	2300      	movs	r3, #0
 800669c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066a0:	e013      	b.n	80066ca <Check_error+0xee>
				{
					if(tam == pos2_valid[i2])
 80066a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	3338      	adds	r3, #56	; 0x38
 80066aa:	443b      	add	r3, r7
 80066ac:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80066b0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d104      	bne.n	80066c0 <Check_error+0xe4>
					{
						valid_mem++;
 80066b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80066ba:	3301      	adds	r3, #1
 80066bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				for(uint8_t i2 = 0; i2 <= sizeof(pos2_valid); i2++)
 80066c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066c4:	3301      	adds	r3, #1
 80066c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066ce:	2b0c      	cmp	r3, #12
 80066d0:	d9e7      	bls.n	80066a2 <Check_error+0xc6>
 80066d2:	e01f      	b.n	8006714 <Check_error+0x138>
					}
				}
			}
			/*STate LINE BLACK = 3*/
			else if(count == 3)
 80066d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d11b      	bne.n	8006714 <Check_error+0x138>
			{
				for(uint8_t i3 = 0; i3 <= sizeof(pos3_valid); i3++)
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80066e2:	e013      	b.n	800670c <Check_error+0x130>
				{
					if(tam == pos3_valid[i3])
 80066e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	3338      	adds	r3, #56	; 0x38
 80066ec:	443b      	add	r3, r7
 80066ee:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80066f2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d104      	bne.n	8006702 <Check_error+0x126>
					{
						valid_mem++;
 80066f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80066fc:	3301      	adds	r3, #1
 80066fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				for(uint8_t i3 = 0; i3 <= sizeof(pos3_valid); i3++)
 8006702:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006706:	3301      	adds	r3, #1
 8006708:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800670c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006710:	2b0a      	cmp	r3, #10
 8006712:	d9e7      	bls.n	80066e4 <Check_error+0x108>
//						valid_mem++;
//					}
//				}
//			}

		if(valid_mem >= 1 || count == 0)
 8006714:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <Check_error+0x148>
 800671c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <Check_error+0x14c>
		{
			return LINE_VALID;
 8006724:	2309      	movs	r3, #9
 8006726:	e000      	b.n	800672a <Check_error+0x14e>
		}
		else
		{
			return LINE_ERROR;
 8006728:	2308      	movs	r3, #8
		}
	}
 800672a:	4618      	mov	r0, r3
 800672c:	3738      	adds	r7, #56	; 0x38
 800672e:	46bd      	mov	sp, r7
 8006730:	bc90      	pop	{r4, r7}
 8006732:	4770      	bx	lr
 8006734:	0800a1f8 	.word	0x0800a1f8
 8006738:	0800a208 	.word	0x0800a208
 800673c:	0800a214 	.word	0x0800a214

08006740 <TimerInit>:
/* Phần code động cơ - thuật toán PID  */
	void TimerInit(TIM_HandleTypeDef * timerHandler_right, TIM_HandleTypeDef * timerHandler_left, 	\
						uint32_t Channel_R, uint32_t Channel_L, 									\
						GPIO_TypeDef *GPIO_R, uint16_t GPIO_Pin_R, 									\
						GPIO_TypeDef *GPIO_L, uint16_t GPIO_Pin_L)									\
	{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
		handlerTimerInLib_left 	= 	timerHandler_left;
 800674e:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <TimerInit+0x48>)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6013      	str	r3, [r2, #0]
		handlerTimerInLib_right	= 	timerHandler_right;
 8006754:	4a0d      	ldr	r2, [pc, #52]	; (800678c <TimerInit+0x4c>)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6013      	str	r3, [r2, #0]

		Channel_TIM_right		=	Channel_R;
 800675a:	4a0d      	ldr	r2, [pc, #52]	; (8006790 <TimerInit+0x50>)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6013      	str	r3, [r2, #0]
		Channel_TIM_left		=	Channel_L;
 8006760:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <TimerInit+0x54>)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	6013      	str	r3, [r2, #0]
		/*Port on lib_motor.c*/
			Port_DIR_Right			=	GPIO_R;
 8006766:	4a0c      	ldr	r2, [pc, #48]	; (8006798 <TimerInit+0x58>)
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	6013      	str	r3, [r2, #0]
			Port_DIR_Left			=	GPIO_L;
 800676c:	4a0b      	ldr	r2, [pc, #44]	; (800679c <TimerInit+0x5c>)
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	6013      	str	r3, [r2, #0]
		/*Pin on lib_motor.c*/
			Pin_DIR_Right			=	GPIO_Pin_R;
 8006772:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <TimerInit+0x60>)
 8006774:	8bbb      	ldrh	r3, [r7, #28]
 8006776:	8013      	strh	r3, [r2, #0]
			Pin_DIR_Left			=	GPIO_Pin_L;
 8006778:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <TimerInit+0x64>)
 800677a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800677c:	8013      	strh	r3, [r2, #0]
	}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	20000474 	.word	0x20000474
 800678c:	20000470 	.word	0x20000470
 8006790:	20000478 	.word	0x20000478
 8006794:	2000047c 	.word	0x2000047c
 8006798:	20000480 	.word	0x20000480
 800679c:	20000484 	.word	0x20000484
 80067a0:	20000488 	.word	0x20000488
 80067a4:	2000048a 	.word	0x2000048a

080067a8 <motor_control>:
/*Output speed motor*/
	void motor_control (int speed_right, int speed_left) 	//forward_brake(motor_speed_increase, motor_speed_decread)
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
		int speed_motor_right_PV = speed_right;			 	// 0 <= |speed left or right| <= 100
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
		int speed_motor_left_PV = speed_left;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	60bb      	str	r3, [r7, #8]

		if(speed_left < 0)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da05      	bge.n	80067cc <motor_control+0x24>
		{
			motor_left_down(100 - (- speed_motor_left_PV));
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	3364      	adds	r3, #100	; 0x64
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 f981 	bl	8006acc <motor_left_down>
 80067ca:	e005      	b.n	80067d8 <motor_control+0x30>
		}
		else
		{
			motor_left_move(100 - speed_motor_left_PV);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f93e 	bl	8006a54 <motor_left_move>
		}
		if(speed_right < 0)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da05      	bge.n	80067ea <motor_control+0x42>
		{
			motor_right_down(100 - (- speed_motor_right_PV));
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3364      	adds	r3, #100	; 0x64
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f8fa 	bl	80069dc <motor_right_down>
		}
		else
		{
			motor_right_move(100 - speed_motor_right_PV);
		}
	}
 80067e8:	e005      	b.n	80067f6 <motor_control+0x4e>
			motor_right_move(100 - speed_motor_right_PV);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f8b7 	bl	8006964 <motor_right_move>
	}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <quick_turn>:
	void quick_turn()
	{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
//		static uint8_t last_end_pre = 0;

		if (last_idle <= 14) /*36ms last_idle + 1*/
 8006804:	4b40      	ldr	r3, [pc, #256]	; (8006908 <quick_turn+0x108>)
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	2b0e      	cmp	r3, #14
 800680a:	d82e      	bhi.n	800686a <quick_turn+0x6a>
		{
			if(state_motor == 1)
 800680c:	4b3f      	ldr	r3, [pc, #252]	; (800690c <quick_turn+0x10c>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d126      	bne.n	8006862 <quick_turn+0x62>
			{
				switch (last_end)
 8006814:	4b3e      	ldr	r3, [pc, #248]	; (8006910 <quick_turn+0x110>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b04      	cmp	r3, #4
 800681a:	d006      	beq.n	800682a <quick_turn+0x2a>
 800681c:	2b04      	cmp	r3, #4
 800681e:	dc1e      	bgt.n	800685e <quick_turn+0x5e>
 8006820:	2b01      	cmp	r3, #1
 8006822:	d007      	beq.n	8006834 <quick_turn+0x34>
 8006824:	2b02      	cmp	r3, #2
 8006826:	d010      	beq.n	800684a <quick_turn+0x4a>
 8006828:	e019      	b.n	800685e <quick_turn+0x5e>
				{
					case END_MIDDLE:	/*SS giua la SS cuoi cung nhan vach den*/
						motor_control(40,32);
 800682a:	2120      	movs	r1, #32
 800682c:	2028      	movs	r0, #40	; 0x28
 800682e:	f7ff ffbb 	bl	80067a8 <motor_control>
						break;
 8006832:	e067      	b.n	8006904 <quick_turn+0x104>
					case END_LEFT:		/*SS ben trai la SS cuoi cung nhan vach den*/
						motor_control(quick_speed_right - 5, -quick_speed_left);
 8006834:	4b37      	ldr	r3, [pc, #220]	; (8006914 <quick_turn+0x114>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	3b05      	subs	r3, #5
 800683a:	4a37      	ldr	r2, [pc, #220]	; (8006918 <quick_turn+0x118>)
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	4252      	negs	r2, r2
 8006840:	4611      	mov	r1, r2
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff ffb0 	bl	80067a8 <motor_control>
						break;
 8006848:	e05c      	b.n	8006904 <quick_turn+0x104>
					case END_RIGHT:		/*SS ben phai la SS cuoi cung nhan vach den*/
						motor_control(-quick_speed_left, quick_speed_right);
 800684a:	4b33      	ldr	r3, [pc, #204]	; (8006918 <quick_turn+0x118>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	425b      	negs	r3, r3
 8006850:	4a30      	ldr	r2, [pc, #192]	; (8006914 <quick_turn+0x114>)
 8006852:	7812      	ldrb	r2, [r2, #0]
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff ffa6 	bl	80067a8 <motor_control>
						break;
 800685c:	e052      	b.n	8006904 <quick_turn+0x104>
					default:
						__NOP();
 800685e:	bf00      	nop
						break;
 8006860:	e050      	b.n	8006904 <quick_turn+0x104>
				}
			}
			else
			{
				motor_stop(0);
 8006862:	2000      	movs	r0, #0
 8006864:	f000 f96e 	bl	8006b44 <motor_stop>
//						speed_right_debug = 30;
//						speed_left_debug = -30;
				}
			}
		}
	}
 8006868:	e04c      	b.n	8006904 <quick_turn+0x104>
		else if(last_idle <= 35) /*1.5s*/
 800686a:	4b27      	ldr	r3, [pc, #156]	; (8006908 <quick_turn+0x108>)
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	2b23      	cmp	r3, #35	; 0x23
 8006870:	d825      	bhi.n	80068be <quick_turn+0xbe>
			if(state_motor == 1)
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <quick_turn+0x10c>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d11d      	bne.n	80068b6 <quick_turn+0xb6>
				switch (last_end)
 800687a:	4b25      	ldr	r3, [pc, #148]	; (8006910 <quick_turn+0x110>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b04      	cmp	r3, #4
 8006880:	d006      	beq.n	8006890 <quick_turn+0x90>
 8006882:	2b04      	cmp	r3, #4
 8006884:	dc15      	bgt.n	80068b2 <quick_turn+0xb2>
 8006886:	2b01      	cmp	r3, #1
 8006888:	d007      	beq.n	800689a <quick_turn+0x9a>
 800688a:	2b02      	cmp	r3, #2
 800688c:	d00b      	beq.n	80068a6 <quick_turn+0xa6>
 800688e:	e010      	b.n	80068b2 <quick_turn+0xb2>
						motor_control(40,32);
 8006890:	2120      	movs	r1, #32
 8006892:	2028      	movs	r0, #40	; 0x28
 8006894:	f7ff ff88 	bl	80067a8 <motor_control>
						break;
 8006898:	e034      	b.n	8006904 <quick_turn+0x104>
						motor_control(40, -20);
 800689a:	f06f 0113 	mvn.w	r1, #19
 800689e:	2028      	movs	r0, #40	; 0x28
 80068a0:	f7ff ff82 	bl	80067a8 <motor_control>
						break;
 80068a4:	e02e      	b.n	8006904 <quick_turn+0x104>
						motor_control(-15, 45);
 80068a6:	212d      	movs	r1, #45	; 0x2d
 80068a8:	f06f 000e 	mvn.w	r0, #14
 80068ac:	f7ff ff7c 	bl	80067a8 <motor_control>
						break;
 80068b0:	e028      	b.n	8006904 <quick_turn+0x104>
						__NOP();
 80068b2:	bf00      	nop
						break;
 80068b4:	e026      	b.n	8006904 <quick_turn+0x104>
				motor_stop(0);
 80068b6:	2000      	movs	r0, #0
 80068b8:	f000 f944 	bl	8006b44 <motor_stop>
	}
 80068bc:	e022      	b.n	8006904 <quick_turn+0x104>
			if(state_motor == 1)
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <quick_turn+0x10c>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d11d      	bne.n	8006902 <quick_turn+0x102>
				switch (last_end)
 80068c6:	4b12      	ldr	r3, [pc, #72]	; (8006910 <quick_turn+0x110>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d006      	beq.n	80068dc <quick_turn+0xdc>
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	dc15      	bgt.n	80068fe <quick_turn+0xfe>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d007      	beq.n	80068e6 <quick_turn+0xe6>
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d00b      	beq.n	80068f2 <quick_turn+0xf2>
 80068da:	e010      	b.n	80068fe <quick_turn+0xfe>
						motor_control(30,35);
 80068dc:	2123      	movs	r1, #35	; 0x23
 80068de:	201e      	movs	r0, #30
 80068e0:	f7ff ff62 	bl	80067a8 <motor_control>
						break;
 80068e4:	e00e      	b.n	8006904 <quick_turn+0x104>
						motor_control(-15, 45);
 80068e6:	212d      	movs	r1, #45	; 0x2d
 80068e8:	f06f 000e 	mvn.w	r0, #14
 80068ec:	f7ff ff5c 	bl	80067a8 <motor_control>
						break;
 80068f0:	e008      	b.n	8006904 <quick_turn+0x104>
						motor_control(40, -20);
 80068f2:	f06f 0113 	mvn.w	r1, #19
 80068f6:	2028      	movs	r0, #40	; 0x28
 80068f8:	f7ff ff56 	bl	80067a8 <motor_control>
						break;
 80068fc:	e002      	b.n	8006904 <quick_turn+0x104>
						__NOP();
 80068fe:	bf00      	nop
						break;
 8006900:	e000      	b.n	8006904 <quick_turn+0x104>
			}
 8006902:	bf00      	nop
	}
 8006904:	bf00      	nop
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20000400 	.word	0x20000400
 800690c:	2000046c 	.word	0x2000046c
 8006910:	2000001d 	.word	0x2000001d
 8006914:	2000001e 	.word	0x2000001e
 8006918:	2000001f 	.word	0x2000001f

0800691c <forward_brake>:
	void forward_brake(int pos_right, int pos_left)
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
		if (active == 0)
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <forward_brake+0x40>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <forward_brake+0x18>
		{
			quick_turn();
 800692e:	f7ff ff67 	bl	8006800 <quick_turn>
			else
			{
				motor_stop(0);
			}
		}
	}
 8006932:	e00f      	b.n	8006954 <forward_brake+0x38>
		else if(active > 0)
 8006934:	4b09      	ldr	r3, [pc, #36]	; (800695c <forward_brake+0x40>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <forward_brake+0x38>
			if(state_motor == 1)
 800693c:	4b08      	ldr	r3, [pc, #32]	; (8006960 <forward_brake+0x44>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d104      	bne.n	800694e <forward_brake+0x32>
				motor_control(pos_right, pos_left);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff ff2e 	bl	80067a8 <motor_control>
	}
 800694c:	e002      	b.n	8006954 <forward_brake+0x38>
				motor_stop(0);
 800694e:	2000      	movs	r0, #0
 8006950:	f000 f8f8 	bl	8006b44 <motor_stop>
	}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000402 	.word	0x20000402
 8006960:	2000046c 	.word	0x2000046c

08006964 <motor_right_move>:
/*dir Motor right*/
	void motor_right_move(int speed_r)
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Port_DIR_Right, Pin_DIR_Right, GPIO_PIN_RESET );
 800696c:	4b17      	ldr	r3, [pc, #92]	; (80069cc <motor_right_move+0x68>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a17      	ldr	r2, [pc, #92]	; (80069d0 <motor_right_move+0x6c>)
 8006972:	8811      	ldrh	r1, [r2, #0]
 8006974:	2200      	movs	r2, #0
 8006976:	4618      	mov	r0, r3
 8006978:	f7fc f9ba 	bl	8002cf0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, speed_r);
 800697c:	4b15      	ldr	r3, [pc, #84]	; (80069d4 <motor_right_move+0x70>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <motor_right_move+0x2c>
 8006984:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <motor_right_move+0x74>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	635a      	str	r2, [r3, #52]	; 0x34
	}
 800698e:	e018      	b.n	80069c2 <motor_right_move+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, speed_r);
 8006990:	4b10      	ldr	r3, [pc, #64]	; (80069d4 <motor_right_move+0x70>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b04      	cmp	r3, #4
 8006996:	d105      	bne.n	80069a4 <motor_right_move+0x40>
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <motor_right_move+0x74>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6393      	str	r3, [r2, #56]	; 0x38
	}
 80069a2:	e00e      	b.n	80069c2 <motor_right_move+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, speed_r);
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <motor_right_move+0x70>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d105      	bne.n	80069b8 <motor_right_move+0x54>
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <motor_right_move+0x74>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
 80069b6:	e004      	b.n	80069c2 <motor_right_move+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, speed_r);
 80069b8:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <motor_right_move+0x74>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6413      	str	r3, [r2, #64]	; 0x40
	}
 80069c2:	bf00      	nop
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000480 	.word	0x20000480
 80069d0:	20000488 	.word	0x20000488
 80069d4:	20000478 	.word	0x20000478
 80069d8:	20000470 	.word	0x20000470

080069dc <motor_right_down>:
	void motor_right_down(int speed_r)
	{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Port_DIR_Right, Pin_DIR_Right, GPIO_PIN_SET);
 80069e4:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <motor_right_down+0x68>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <motor_right_down+0x6c>)
 80069ea:	8811      	ldrh	r1, [r2, #0]
 80069ec:	2201      	movs	r2, #1
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fc f97e 	bl	8002cf0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, speed_r);
 80069f4:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <motor_right_down+0x70>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <motor_right_down+0x2c>
 80069fc:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <motor_right_down+0x74>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8006a06:	e018      	b.n	8006a3a <motor_right_down+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, speed_r);
 8006a08:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <motor_right_down+0x70>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d105      	bne.n	8006a1c <motor_right_down+0x40>
 8006a10:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <motor_right_down+0x74>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6393      	str	r3, [r2, #56]	; 0x38
	}
 8006a1a:	e00e      	b.n	8006a3a <motor_right_down+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, speed_r);
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <motor_right_down+0x70>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d105      	bne.n	8006a30 <motor_right_down+0x54>
 8006a24:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <motor_right_down+0x74>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
 8006a2e:	e004      	b.n	8006a3a <motor_right_down+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, speed_r);
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <motor_right_down+0x74>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6413      	str	r3, [r2, #64]	; 0x40
	}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000480 	.word	0x20000480
 8006a48:	20000488 	.word	0x20000488
 8006a4c:	20000478 	.word	0x20000478
 8006a50:	20000470 	.word	0x20000470

08006a54 <motor_left_move>:
/*dir Motor left*/
	void motor_left_move(int speed_l)
	{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Port_DIR_Left, Pin_DIR_Left, GPIO_PIN_RESET);
 8006a5c:	4b17      	ldr	r3, [pc, #92]	; (8006abc <motor_left_move+0x68>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a17      	ldr	r2, [pc, #92]	; (8006ac0 <motor_left_move+0x6c>)
 8006a62:	8811      	ldrh	r1, [r2, #0]
 8006a64:	2200      	movs	r2, #0
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7fc f942 	bl	8002cf0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, speed_l);
 8006a6c:	4b15      	ldr	r3, [pc, #84]	; (8006ac4 <motor_left_move+0x70>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d105      	bne.n	8006a80 <motor_left_move+0x2c>
 8006a74:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <motor_left_move+0x74>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8006a7e:	e018      	b.n	8006ab2 <motor_left_move+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, speed_l);
 8006a80:	4b10      	ldr	r3, [pc, #64]	; (8006ac4 <motor_left_move+0x70>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d105      	bne.n	8006a94 <motor_left_move+0x40>
 8006a88:	4b0f      	ldr	r3, [pc, #60]	; (8006ac8 <motor_left_move+0x74>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6393      	str	r3, [r2, #56]	; 0x38
	}
 8006a92:	e00e      	b.n	8006ab2 <motor_left_move+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, speed_l);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <motor_left_move+0x70>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d105      	bne.n	8006aa8 <motor_left_move+0x54>
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <motor_left_move+0x74>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
 8006aa6:	e004      	b.n	8006ab2 <motor_left_move+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, speed_l);
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <motor_left_move+0x74>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6413      	str	r3, [r2, #64]	; 0x40
	}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000484 	.word	0x20000484
 8006ac0:	2000048a 	.word	0x2000048a
 8006ac4:	2000047c 	.word	0x2000047c
 8006ac8:	20000474 	.word	0x20000474

08006acc <motor_left_down>:
	void motor_left_down(int speed_l)
	{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(Port_DIR_Left, Pin_DIR_Left, GPIO_PIN_SET);
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <motor_left_down+0x68>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <motor_left_down+0x6c>)
 8006ada:	8811      	ldrh	r1, [r2, #0]
 8006adc:	2201      	movs	r2, #1
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fc f906 	bl	8002cf0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, speed_l);
 8006ae4:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <motor_left_down+0x70>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d105      	bne.n	8006af8 <motor_left_down+0x2c>
 8006aec:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <motor_left_down+0x74>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8006af6:	e018      	b.n	8006b2a <motor_left_down+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, speed_l);
 8006af8:	4b10      	ldr	r3, [pc, #64]	; (8006b3c <motor_left_down+0x70>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d105      	bne.n	8006b0c <motor_left_down+0x40>
 8006b00:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <motor_left_down+0x74>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6393      	str	r3, [r2, #56]	; 0x38
	}
 8006b0a:	e00e      	b.n	8006b2a <motor_left_down+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, speed_l);
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <motor_left_down+0x70>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d105      	bne.n	8006b20 <motor_left_down+0x54>
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <motor_left_down+0x74>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
 8006b1e:	e004      	b.n	8006b2a <motor_left_down+0x5e>
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, speed_l);
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <motor_left_down+0x74>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6413      	str	r3, [r2, #64]	; 0x40
	}
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000484 	.word	0x20000484
 8006b38:	2000048a 	.word	0x2000048a
 8006b3c:	2000047c 	.word	0x2000047c
 8006b40:	20000474 	.word	0x20000474

08006b44 <motor_stop>:
/*dir Motor stop*/
	void motor_stop(uint32_t delay)
	{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_right, Channel_TIM_right, SPEED_STOP);
 8006b4c:	4b26      	ldr	r3, [pc, #152]	; (8006be8 <motor_stop+0xa4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d105      	bne.n	8006b60 <motor_stop+0x1c>
 8006b54:	4b25      	ldr	r3, [pc, #148]	; (8006bec <motor_stop+0xa8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8006b5e:	e018      	b.n	8006b92 <motor_stop+0x4e>
 8006b60:	4b21      	ldr	r3, [pc, #132]	; (8006be8 <motor_stop+0xa4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d105      	bne.n	8006b74 <motor_stop+0x30>
 8006b68:	4b20      	ldr	r3, [pc, #128]	; (8006bec <motor_stop+0xa8>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	6393      	str	r3, [r2, #56]	; 0x38
 8006b72:	e00e      	b.n	8006b92 <motor_stop+0x4e>
 8006b74:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <motor_stop+0xa4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d105      	bne.n	8006b88 <motor_stop+0x44>
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <motor_stop+0xa8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	2300      	movs	r3, #0
 8006b84:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006b86:	e004      	b.n	8006b92 <motor_stop+0x4e>
 8006b88:	4b18      	ldr	r3, [pc, #96]	; (8006bec <motor_stop+0xa8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE (handlerTimerInLib_left, Channel_TIM_left, SPEED_STOP);
 8006b92:	4b17      	ldr	r3, [pc, #92]	; (8006bf0 <motor_stop+0xac>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <motor_stop+0x62>
 8006b9a:	4b16      	ldr	r3, [pc, #88]	; (8006bf4 <motor_stop+0xb0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	635a      	str	r2, [r3, #52]	; 0x34
 8006ba4:	e018      	b.n	8006bd8 <motor_stop+0x94>
 8006ba6:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <motor_stop+0xac>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d105      	bne.n	8006bba <motor_stop+0x76>
 8006bae:	4b11      	ldr	r3, [pc, #68]	; (8006bf4 <motor_stop+0xb0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	6393      	str	r3, [r2, #56]	; 0x38
 8006bb8:	e00e      	b.n	8006bd8 <motor_stop+0x94>
 8006bba:	4b0d      	ldr	r3, [pc, #52]	; (8006bf0 <motor_stop+0xac>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d105      	bne.n	8006bce <motor_stop+0x8a>
 8006bc2:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <motor_stop+0xb0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006bcc:	e004      	b.n	8006bd8 <motor_stop+0x94>
 8006bce:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <motor_stop+0xb0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6413      	str	r3, [r2, #64]	; 0x40
		HAL_Delay(delay);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fb f8c9 	bl	8001d70 <HAL_Delay>
	}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000478 	.word	0x20000478
 8006bec:	20000470 	.word	0x20000470
 8006bf0:	2000047c 	.word	0x2000047c
 8006bf4:	20000474 	.word	0x20000474

08006bf8 <motor_move>:
/*dir Motor Move*/
	void motor_move(int speedr, int speedl)
	{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
		motor_right_move(speedr);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff feae 	bl	8006964 <motor_right_move>
		motor_left_move(speedl);
 8006c08:	6838      	ldr	r0, [r7, #0]
 8006c0a:	f7ff ff23 	bl	8006a54 <motor_left_move>
	}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <bluetooth_init_UART>:
	static const char * confirm_motor_quick_left = "QL:";

	STATE_ROBOT State_Robot 		= 	STOP_ROBOT;
/*Init uart used in lib_uart*/
	void bluetooth_init_UART(UART_HandleTypeDef *huart)
	{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
		Lib_uart = *huart;
 8006c20:	4a05      	ldr	r2, [pc, #20]	; (8006c38 <bluetooth_init_UART+0x20>)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4610      	mov	r0, r2
 8006c26:	4619      	mov	r1, r3
 8006c28:	2348      	movs	r3, #72	; 0x48
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f000 fb84 	bl	8007338 <memcpy>
	}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	2000048c 	.word	0x2000048c

08006c3c <bluetooth_check_string_stop_start_robot>:
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)All_sheet_TX, 26, 1000); 				// 90 * 4 = 320 bytes; 320bytes * 8 = 2560 bits
		}
	}
/*Check string input is stop or start*/
	STATE_ROBOT bluetooth_check_string_stop_start_robot(uint8_t * rxBuffer)
	{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	/*Control robot*/
		if(strstr((char*)rxBuffer, confirmStart) != NULL)
 8006c44:	4b3a      	ldr	r3, [pc, #232]	; (8006d30 <bluetooth_check_string_stop_start_robot+0xf4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 f80a 	bl	8007c64 <strstr>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00b      	beq.n	8006c6e <bluetooth_check_string_stop_start_robot+0x32>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmStart, sizeof(confirmStart), 1000);
 8006c56:	4b36      	ldr	r3, [pc, #216]	; (8006d30 <bluetooth_check_string_stop_start_robot+0xf4>)
 8006c58:	6819      	ldr	r1, [r3, #0]
 8006c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c5e:	2204      	movs	r2, #4
 8006c60:	4834      	ldr	r0, [pc, #208]	; (8006d34 <bluetooth_check_string_stop_start_robot+0xf8>)
 8006c62:	f7fe f8f3 	bl	8004e4c <HAL_UART_Transmit>
			State_Robot = START_ROBOT;
 8006c66:	4b34      	ldr	r3, [pc, #208]	; (8006d38 <bluetooth_check_string_stop_start_robot+0xfc>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	e05a      	b.n	8006d24 <bluetooth_check_string_stop_start_robot+0xe8>
		}
		else if( strstr((char*)rxBuffer, confirmStop) != NULL)
 8006c6e:	4b33      	ldr	r3, [pc, #204]	; (8006d3c <bluetooth_check_string_stop_start_robot+0x100>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fff5 	bl	8007c64 <strstr>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <bluetooth_check_string_stop_start_robot+0x5c>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmStop, sizeof(confirmStop), 1000);
 8006c80:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <bluetooth_check_string_stop_start_robot+0x100>)
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c88:	2204      	movs	r2, #4
 8006c8a:	482a      	ldr	r0, [pc, #168]	; (8006d34 <bluetooth_check_string_stop_start_robot+0xf8>)
 8006c8c:	f7fe f8de 	bl	8004e4c <HAL_UART_Transmit>
			State_Robot = STOP_ROBOT;
 8006c90:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <bluetooth_check_string_stop_start_robot+0xfc>)
 8006c92:	2201      	movs	r2, #1
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	e045      	b.n	8006d24 <bluetooth_check_string_stop_start_robot+0xe8>
		}
		else if(strstr((char*)rxBuffer, confirmThreshold) != NULL)
 8006c98:	4b29      	ldr	r3, [pc, #164]	; (8006d40 <bluetooth_check_string_stop_start_robot+0x104>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 ffe0 	bl	8007c64 <strstr>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <bluetooth_check_string_stop_start_robot+0x86>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmThreshold, sizeof(confirmThreshold), 1000);
 8006caa:	4b25      	ldr	r3, [pc, #148]	; (8006d40 <bluetooth_check_string_stop_start_robot+0x104>)
 8006cac:	6819      	ldr	r1, [r3, #0]
 8006cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	481f      	ldr	r0, [pc, #124]	; (8006d34 <bluetooth_check_string_stop_start_robot+0xf8>)
 8006cb6:	f7fe f8c9 	bl	8004e4c <HAL_UART_Transmit>
			State_Robot = CHECK_THRESHOLD;
 8006cba:	4b1f      	ldr	r3, [pc, #124]	; (8006d38 <bluetooth_check_string_stop_start_robot+0xfc>)
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	e030      	b.n	8006d24 <bluetooth_check_string_stop_start_robot+0xe8>
		}
		else if(strstr((char*)rxBuffer, confirmStartMotor) != NULL)
 8006cc2:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <bluetooth_check_string_stop_start_robot+0x108>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 ffcb 	bl	8007c64 <strstr>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d013      	beq.n	8006cfc <bluetooth_check_string_stop_start_robot+0xc0>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmStartMotor, sizeof(confirmStartMotor), 1000);
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	; (8006d44 <bluetooth_check_string_stop_start_robot+0x108>)
 8006cd6:	6819      	ldr	r1, [r3, #0]
 8006cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cdc:	2204      	movs	r2, #4
 8006cde:	4815      	ldr	r0, [pc, #84]	; (8006d34 <bluetooth_check_string_stop_start_robot+0xf8>)
 8006ce0:	f7fe f8b4 	bl	8004e4c <HAL_UART_Transmit>
			if(state_motor == 0)
 8006ce4:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <bluetooth_check_string_stop_start_robot+0x10c>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <bluetooth_check_string_stop_start_robot+0xb8>
			{
				state_motor = 1;
 8006cec:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <bluetooth_check_string_stop_start_robot+0x10c>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e017      	b.n	8006d24 <bluetooth_check_string_stop_start_robot+0xe8>
			}
			else
			{
				state_motor = 0;
 8006cf4:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <bluetooth_check_string_stop_start_robot+0x10c>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e013      	b.n	8006d24 <bluetooth_check_string_stop_start_robot+0xe8>
			}
		}
		else if(strstr((char*)rxBuffer, confirmPower) != NULL)
 8006cfc:	4b13      	ldr	r3, [pc, #76]	; (8006d4c <bluetooth_check_string_stop_start_robot+0x110>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 ffae 	bl	8007c64 <strstr>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <bluetooth_check_string_stop_start_robot+0xe8>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmPower, sizeof(confirmPower), 1000);
 8006d0e:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <bluetooth_check_string_stop_start_robot+0x110>)
 8006d10:	6819      	ldr	r1, [r3, #0]
 8006d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d16:	2204      	movs	r2, #4
 8006d18:	4806      	ldr	r0, [pc, #24]	; (8006d34 <bluetooth_check_string_stop_start_robot+0xf8>)
 8006d1a:	f7fe f897 	bl	8004e4c <HAL_UART_Transmit>
			State_Robot = POWER;
 8006d1e:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <bluetooth_check_string_stop_start_robot+0xfc>)
 8006d20:	2204      	movs	r2, #4
 8006d22:	701a      	strb	r2, [r3, #0]
		}
		return State_Robot;
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <bluetooth_check_string_stop_start_robot+0xfc>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	2000002c 	.word	0x2000002c
 8006d34:	2000048c 	.word	0x2000048c
 8006d38:	20000068 	.word	0x20000068
 8006d3c:	20000030 	.word	0x20000030
 8006d40:	20000034 	.word	0x20000034
 8006d44:	20000038 	.word	0x20000038
 8006d48:	2000046c 	.word	0x2000046c
 8006d4c:	2000003c 	.word	0x2000003c

08006d50 <bluetooth_rx_change_kx>:
/*Chang Kx with value is recieved by phone*/
	void bluetooth_rx_change_kx(uint8_t *rxBuffer)
	{
 8006d50:	b590      	push	{r4, r7, lr}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
		char * token = NULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
		char string_feedback[13] = {0};
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	f107 0310 	add.w	r3, r7, #16
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	605a      	str	r2, [r3, #4]
 8006d6a:	721a      	strb	r2, [r3, #8]
		/*kp: xx, ki: yy, kd: zz*/
		/*Set Kp*/
			if(strstr((char*)rxBuffer, confirmKp) != NULL)
 8006d6c:	4bbc      	ldr	r3, [pc, #752]	; (8007060 <bluetooth_rx_change_kx+0x310>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 ff76 	bl	8007c64 <strstr>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d03a      	beq.n	8006df4 <bluetooth_rx_change_kx+0xa4>
			{
				token = strtok((char*)rxBuffer, ":");											//kp:
 8006d7e:	49b9      	ldr	r1, [pc, #740]	; (8007064 <bluetooth_rx_change_kx+0x314>)
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 ff85 	bl	8007c90 <strtok>
 8006d86:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8006d88:	49b7      	ldr	r1, [pc, #732]	; (8007068 <bluetooth_rx_change_kx+0x318>)
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	f000 ff80 	bl	8007c90 <strtok>
 8006d90:	61f8      	str	r0, [r7, #28]
				kx[0] = ((Char2Num(token) * 10) + Char2Num(token + 1)) / (float)10000;
 8006d92:	69f8      	ldr	r0, [r7, #28]
 8006d94:	f000 fa46 	bl	8007224 <Char2Num>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	461c      	mov	r4, r3
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	3301      	adds	r3, #1
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fa3a 	bl	8007224 <Char2Num>
 8006db0:	4603      	mov	r3, r0
 8006db2:	4423      	add	r3, r4
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7f9 ff41 	bl	8000c3c <__aeabi_i2f>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	49ab      	ldr	r1, [pc, #684]	; (800706c <bluetooth_rx_change_kx+0x31c>)
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fa f844 	bl	8000e4c <__aeabi_fdiv>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4ba9      	ldr	r3, [pc, #676]	; (8007070 <bluetooth_rx_change_kx+0x320>)
 8006dca:	601a      	str	r2, [r3, #0]
				sprintf(string_feedback,"\nKp=%1.5f\n", kx[0]);
 8006dcc:	4ba8      	ldr	r3, [pc, #672]	; (8007070 <bluetooth_rx_change_kx+0x320>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7f9 fb29 	bl	8000428 <__aeabi_f2d>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	f107 000c 	add.w	r0, r7, #12
 8006dde:	49a5      	ldr	r1, [pc, #660]	; (8007074 <bluetooth_rx_change_kx+0x324>)
 8006de0:	f000 ff20 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback), 1000);
 8006de4:	f107 010c 	add.w	r1, r7, #12
 8006de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dec:	220d      	movs	r2, #13
 8006dee:	48a2      	ldr	r0, [pc, #648]	; (8007078 <bluetooth_rx_change_kx+0x328>)
 8006df0:	f7fe f82c 	bl	8004e4c <HAL_UART_Transmit>
			}
		/*Set Ki*/
			if(strstr((char*)rxBuffer, confirmKi) != NULL)
 8006df4:	4ba1      	ldr	r3, [pc, #644]	; (800707c <bluetooth_rx_change_kx+0x32c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 ff32 	bl	8007c64 <strstr>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d03a      	beq.n	8006e7c <bluetooth_rx_change_kx+0x12c>
			{
				token = strtok((char*)rxBuffer, ":");											//kp: xx, ki:
 8006e06:	4997      	ldr	r1, [pc, #604]	; (8007064 <bluetooth_rx_change_kx+0x314>)
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 ff41 	bl	8007c90 <strtok>
 8006e0e:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8006e10:	4995      	ldr	r1, [pc, #596]	; (8007068 <bluetooth_rx_change_kx+0x318>)
 8006e12:	2000      	movs	r0, #0
 8006e14:	f000 ff3c 	bl	8007c90 <strtok>
 8006e18:	61f8      	str	r0, [r7, #28]
				kx[1] = ((Char2Num(token) * 10) + Char2Num(token + 1)) / (float)10000;
 8006e1a:	69f8      	ldr	r0, [r7, #28]
 8006e1c:	f000 fa02 	bl	8007224 <Char2Num>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	461c      	mov	r4, r3
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	3301      	adds	r3, #1
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f9f6 	bl	8007224 <Char2Num>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	4423      	add	r3, r4
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7f9 fefd 	bl	8000c3c <__aeabi_i2f>
 8006e42:	4603      	mov	r3, r0
 8006e44:	4989      	ldr	r1, [pc, #548]	; (800706c <bluetooth_rx_change_kx+0x31c>)
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fa f800 	bl	8000e4c <__aeabi_fdiv>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	461a      	mov	r2, r3
 8006e50:	4b87      	ldr	r3, [pc, #540]	; (8007070 <bluetooth_rx_change_kx+0x320>)
 8006e52:	605a      	str	r2, [r3, #4]
				sprintf(string_feedback,"\nKi=%1.5f\n", kx[1]);
 8006e54:	4b86      	ldr	r3, [pc, #536]	; (8007070 <bluetooth_rx_change_kx+0x320>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7f9 fae5 	bl	8000428 <__aeabi_f2d>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	f107 000c 	add.w	r0, r7, #12
 8006e66:	4986      	ldr	r1, [pc, #536]	; (8007080 <bluetooth_rx_change_kx+0x330>)
 8006e68:	f000 fedc 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback), 1000);
 8006e6c:	f107 010c 	add.w	r1, r7, #12
 8006e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e74:	220d      	movs	r2, #13
 8006e76:	4880      	ldr	r0, [pc, #512]	; (8007078 <bluetooth_rx_change_kx+0x328>)
 8006e78:	f7fd ffe8 	bl	8004e4c <HAL_UART_Transmit>
			}
		/*Set Kd*/
			if(strstr((char*)rxBuffer, confirmKd) != NULL)
 8006e7c:	4b81      	ldr	r3, [pc, #516]	; (8007084 <bluetooth_rx_change_kx+0x334>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 feee 	bl	8007c64 <strstr>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d03a      	beq.n	8006f04 <bluetooth_rx_change_kx+0x1b4>
			{
				token = strtok((char*)rxBuffer, ":");											//kp: xx, ki: yy, kd: zz
 8006e8e:	4975      	ldr	r1, [pc, #468]	; (8007064 <bluetooth_rx_change_kx+0x314>)
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fefd 	bl	8007c90 <strtok>
 8006e96:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");															//zz
 8006e98:	4973      	ldr	r1, [pc, #460]	; (8007068 <bluetooth_rx_change_kx+0x318>)
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	f000 fef8 	bl	8007c90 <strtok>
 8006ea0:	61f8      	str	r0, [r7, #28]
				kx[2] = ((Char2Num(token) * 10) + Char2Num(token + 1)) / (float)10000;
 8006ea2:	69f8      	ldr	r0, [r7, #28]
 8006ea4:	f000 f9be 	bl	8007224 <Char2Num>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	461c      	mov	r4, r3
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 f9b2 	bl	8007224 <Char2Num>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	4423      	add	r3, r4
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7f9 feb9 	bl	8000c3c <__aeabi_i2f>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	4967      	ldr	r1, [pc, #412]	; (800706c <bluetooth_rx_change_kx+0x31c>)
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7f9 ffbc 	bl	8000e4c <__aeabi_fdiv>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4b65      	ldr	r3, [pc, #404]	; (8007070 <bluetooth_rx_change_kx+0x320>)
 8006eda:	609a      	str	r2, [r3, #8]
//				sprintf(string_feedback,"\nKd=%1.4f\n", kx[3]);
//				kx[2] = ((Char2Num(token) * 10) + Char2Num(token + 1));
				sprintf(string_feedback,"\nKd=%03d\n", kx[3]);
 8006edc:	4b64      	ldr	r3, [pc, #400]	; (8007070 <bluetooth_rx_change_kx+0x320>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7f9 faa1 	bl	8000428 <__aeabi_f2d>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	f107 000c 	add.w	r0, r7, #12
 8006eee:	4966      	ldr	r1, [pc, #408]	; (8007088 <bluetooth_rx_change_kx+0x338>)
 8006ef0:	f000 fe98 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback) - 1, 1000);
 8006ef4:	f107 010c 	add.w	r1, r7, #12
 8006ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006efc:	220c      	movs	r2, #12
 8006efe:	485e      	ldr	r0, [pc, #376]	; (8007078 <bluetooth_rx_change_kx+0x328>)
 8006f00:	f7fd ffa4 	bl	8004e4c <HAL_UART_Transmit>
			}
		/*Set full speed*/
			if(strstr((char*)rxBuffer, confirmMaxSpeedRight) != NULL)
 8006f04:	4b61      	ldr	r3, [pc, #388]	; (800708c <bluetooth_rx_change_kx+0x33c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 feaa 	bl	8007c64 <strstr>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d02d      	beq.n	8006f72 <bluetooth_rx_change_kx+0x222>
			{
				token = strtok((char*)rxBuffer, ":");
 8006f16:	4953      	ldr	r1, [pc, #332]	; (8007064 <bluetooth_rx_change_kx+0x314>)
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 feb9 	bl	8007c90 <strtok>
 8006f1e:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8006f20:	4951      	ldr	r1, [pc, #324]	; (8007068 <bluetooth_rx_change_kx+0x318>)
 8006f22:	2000      	movs	r0, #0
 8006f24:	f000 feb4 	bl	8007c90 <strtok>
 8006f28:	61f8      	str	r0, [r7, #28]
				maxspeedr = (Char2Num(token) * 10) + Char2Num(token + 1);
 8006f2a:	69f8      	ldr	r0, [r7, #28]
 8006f2c:	f000 f97a 	bl	8007224 <Char2Num>
 8006f30:	4603      	mov	r3, r0
 8006f32:	461a      	mov	r2, r3
 8006f34:	0092      	lsls	r2, r2, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	b2dc      	uxtb	r4, r3
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 f96f 	bl	8007224 <Char2Num>
 8006f46:	4603      	mov	r3, r0
 8006f48:	4423      	add	r3, r4
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	4b50      	ldr	r3, [pc, #320]	; (8007090 <bluetooth_rx_change_kx+0x340>)
 8006f4e:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nMSR=%03d\n", maxspeedl);
 8006f50:	4b50      	ldr	r3, [pc, #320]	; (8007094 <bluetooth_rx_change_kx+0x344>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	f107 030c 	add.w	r3, r7, #12
 8006f5a:	494f      	ldr	r1, [pc, #316]	; (8007098 <bluetooth_rx_change_kx+0x348>)
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fe61 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 8006f62:	f107 010c 	add.w	r1, r7, #12
 8006f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f6a:	2209      	movs	r2, #9
 8006f6c:	4842      	ldr	r0, [pc, #264]	; (8007078 <bluetooth_rx_change_kx+0x328>)
 8006f6e:	f7fd ff6d 	bl	8004e4c <HAL_UART_Transmit>
			}
			if(strstr((char*)rxBuffer, confirmMaxSpeedLeft) != NULL)
 8006f72:	4b4a      	ldr	r3, [pc, #296]	; (800709c <bluetooth_rx_change_kx+0x34c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fe73 	bl	8007c64 <strstr>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02d      	beq.n	8006fe0 <bluetooth_rx_change_kx+0x290>
			{
				token = strtok((char*)rxBuffer, ":");
 8006f84:	4937      	ldr	r1, [pc, #220]	; (8007064 <bluetooth_rx_change_kx+0x314>)
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fe82 	bl	8007c90 <strtok>
 8006f8c:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8006f8e:	4936      	ldr	r1, [pc, #216]	; (8007068 <bluetooth_rx_change_kx+0x318>)
 8006f90:	2000      	movs	r0, #0
 8006f92:	f000 fe7d 	bl	8007c90 <strtok>
 8006f96:	61f8      	str	r0, [r7, #28]
				maxspeedl = (Char2Num(token) * 10) + Char2Num(token + 1);
 8006f98:	69f8      	ldr	r0, [r7, #28]
 8006f9a:	f000 f943 	bl	8007224 <Char2Num>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	0092      	lsls	r2, r2, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	b2dc      	uxtb	r4, r3
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 f938 	bl	8007224 <Char2Num>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	4423      	add	r3, r4
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	4b36      	ldr	r3, [pc, #216]	; (8007094 <bluetooth_rx_change_kx+0x344>)
 8006fbc:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nMSL=%03d\n", maxspeedl);
 8006fbe:	4b35      	ldr	r3, [pc, #212]	; (8007094 <bluetooth_rx_change_kx+0x344>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f107 030c 	add.w	r3, r7, #12
 8006fc8:	4935      	ldr	r1, [pc, #212]	; (80070a0 <bluetooth_rx_change_kx+0x350>)
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fe2a 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 8006fd0:	f107 010c 	add.w	r1, r7, #12
 8006fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fd8:	2209      	movs	r2, #9
 8006fda:	4827      	ldr	r0, [pc, #156]	; (8007078 <bluetooth_rx_change_kx+0x328>)
 8006fdc:	f7fd ff36 	bl	8004e4c <HAL_UART_Transmit>
			}
		/*Set base speed*/
			if(strstr((char*)rxBuffer, confirmBaseSpeedR) != NULL)
 8006fe0:	4b30      	ldr	r3, [pc, #192]	; (80070a4 <bluetooth_rx_change_kx+0x354>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fe3c 	bl	8007c64 <strstr>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02d      	beq.n	800704e <bluetooth_rx_change_kx+0x2fe>
			{
				token = strtok((char*)rxBuffer, ":");
 8006ff2:	491c      	ldr	r1, [pc, #112]	; (8007064 <bluetooth_rx_change_kx+0x314>)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fe4b 	bl	8007c90 <strtok>
 8006ffa:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8006ffc:	491a      	ldr	r1, [pc, #104]	; (8007068 <bluetooth_rx_change_kx+0x318>)
 8006ffe:	2000      	movs	r0, #0
 8007000:	f000 fe46 	bl	8007c90 <strtok>
 8007004:	61f8      	str	r0, [r7, #28]
				basespeedr = (Char2Num(token) * 10) + Char2Num(token + 1);
 8007006:	69f8      	ldr	r0, [r7, #28]
 8007008:	f000 f90c 	bl	8007224 <Char2Num>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	0092      	lsls	r2, r2, #2
 8007012:	4413      	add	r3, r2
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	b2dc      	uxtb	r4, r3
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	3301      	adds	r3, #1
 800701c:	4618      	mov	r0, r3
 800701e:	f000 f901 	bl	8007224 <Char2Num>
 8007022:	4603      	mov	r3, r0
 8007024:	4423      	add	r3, r4
 8007026:	b2da      	uxtb	r2, r3
 8007028:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <bluetooth_rx_change_kx+0x358>)
 800702a:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nBSR=%03d", basespeedr);
 800702c:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <bluetooth_rx_change_kx+0x358>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	f107 030c 	add.w	r3, r7, #12
 8007036:	491d      	ldr	r1, [pc, #116]	; (80070ac <bluetooth_rx_change_kx+0x35c>)
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fdf3 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 800703e:	f107 010c 	add.w	r1, r7, #12
 8007042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007046:	2209      	movs	r2, #9
 8007048:	480b      	ldr	r0, [pc, #44]	; (8007078 <bluetooth_rx_change_kx+0x328>)
 800704a:	f7fd feff 	bl	8004e4c <HAL_UART_Transmit>
			}
			if(strstr((char*)rxBuffer, confirmBaseSpeedL) != NULL)
 800704e:	4b18      	ldr	r3, [pc, #96]	; (80070b0 <bluetooth_rx_change_kx+0x360>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fe05 	bl	8007c64 <strstr>
 800705a:	4603      	mov	r3, r0
 800705c:	e02a      	b.n	80070b4 <bluetooth_rx_change_kx+0x364>
 800705e:	bf00      	nop
 8007060:	20000040 	.word	0x20000040
 8007064:	0800a2fc 	.word	0x0800a2fc
 8007068:	0800a300 	.word	0x0800a300
 800706c:	461c4000 	.word	0x461c4000
 8007070:	20000020 	.word	0x20000020
 8007074:	0800a304 	.word	0x0800a304
 8007078:	2000048c 	.word	0x2000048c
 800707c:	20000044 	.word	0x20000044
 8007080:	0800a310 	.word	0x0800a310
 8007084:	20000048 	.word	0x20000048
 8007088:	0800a31c 	.word	0x0800a31c
 800708c:	20000058 	.word	0x20000058
 8007090:	2000001b 	.word	0x2000001b
 8007094:	2000001c 	.word	0x2000001c
 8007098:	0800a328 	.word	0x0800a328
 800709c:	2000005c 	.word	0x2000005c
 80070a0:	0800a334 	.word	0x0800a334
 80070a4:	20000050 	.word	0x20000050
 80070a8:	20000019 	.word	0x20000019
 80070ac:	0800a340 	.word	0x0800a340
 80070b0:	20000054 	.word	0x20000054
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d02d      	beq.n	8007114 <bluetooth_rx_change_kx+0x3c4>
			{
				token = strtok((char*)rxBuffer, ":");
 80070b8:	494f      	ldr	r1, [pc, #316]	; (80071f8 <bluetooth_rx_change_kx+0x4a8>)
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fde8 	bl	8007c90 <strtok>
 80070c0:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 80070c2:	494e      	ldr	r1, [pc, #312]	; (80071fc <bluetooth_rx_change_kx+0x4ac>)
 80070c4:	2000      	movs	r0, #0
 80070c6:	f000 fde3 	bl	8007c90 <strtok>
 80070ca:	61f8      	str	r0, [r7, #28]
				basespeedl = (Char2Num(token) * 10) + Char2Num(token + 1);
 80070cc:	69f8      	ldr	r0, [r7, #28]
 80070ce:	f000 f8a9 	bl	8007224 <Char2Num>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	0092      	lsls	r2, r2, #2
 80070d8:	4413      	add	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	b2dc      	uxtb	r4, r3
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	3301      	adds	r3, #1
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 f89e 	bl	8007224 <Char2Num>
 80070e8:	4603      	mov	r3, r0
 80070ea:	4423      	add	r3, r4
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4b44      	ldr	r3, [pc, #272]	; (8007200 <bluetooth_rx_change_kx+0x4b0>)
 80070f0:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nBSR=%03d", basespeedl);
 80070f2:	4b43      	ldr	r3, [pc, #268]	; (8007200 <bluetooth_rx_change_kx+0x4b0>)
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f107 030c 	add.w	r3, r7, #12
 80070fc:	4941      	ldr	r1, [pc, #260]	; (8007204 <bluetooth_rx_change_kx+0x4b4>)
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fd90 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 8007104:	f107 010c 	add.w	r1, r7, #12
 8007108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800710c:	2209      	movs	r2, #9
 800710e:	483e      	ldr	r0, [pc, #248]	; (8007208 <bluetooth_rx_change_kx+0x4b8>)
 8007110:	f7fd fe9c 	bl	8004e4c <HAL_UART_Transmit>
			}
		/*Set quick speed Line*/
			if(strstr((char*)rxBuffer, confirm_motor_quick_right) != NULL)
 8007114:	4b3d      	ldr	r3, [pc, #244]	; (800720c <bluetooth_rx_change_kx+0x4bc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fda2 	bl	8007c64 <strstr>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d02d      	beq.n	8007182 <bluetooth_rx_change_kx+0x432>
			{
				token = strtok((char*)rxBuffer, ":");
 8007126:	4934      	ldr	r1, [pc, #208]	; (80071f8 <bluetooth_rx_change_kx+0x4a8>)
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fdb1 	bl	8007c90 <strtok>
 800712e:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8007130:	4932      	ldr	r1, [pc, #200]	; (80071fc <bluetooth_rx_change_kx+0x4ac>)
 8007132:	2000      	movs	r0, #0
 8007134:	f000 fdac 	bl	8007c90 <strtok>
 8007138:	61f8      	str	r0, [r7, #28]
				quick_speed_right = (Char2Num(token) * 10) + Char2Num(token + 1);
 800713a:	69f8      	ldr	r0, [r7, #28]
 800713c:	f000 f872 	bl	8007224 <Char2Num>
 8007140:	4603      	mov	r3, r0
 8007142:	461a      	mov	r2, r3
 8007144:	0092      	lsls	r2, r2, #2
 8007146:	4413      	add	r3, r2
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	b2dc      	uxtb	r4, r3
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	3301      	adds	r3, #1
 8007150:	4618      	mov	r0, r3
 8007152:	f000 f867 	bl	8007224 <Char2Num>
 8007156:	4603      	mov	r3, r0
 8007158:	4423      	add	r3, r4
 800715a:	b2da      	uxtb	r2, r3
 800715c:	4b2c      	ldr	r3, [pc, #176]	; (8007210 <bluetooth_rx_change_kx+0x4c0>)
 800715e:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nQSR=%03d", quick_speed_right);
 8007160:	4b2b      	ldr	r3, [pc, #172]	; (8007210 <bluetooth_rx_change_kx+0x4c0>)
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	f107 030c 	add.w	r3, r7, #12
 800716a:	492a      	ldr	r1, [pc, #168]	; (8007214 <bluetooth_rx_change_kx+0x4c4>)
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fd59 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 8007172:	f107 010c 	add.w	r1, r7, #12
 8007176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800717a:	2209      	movs	r2, #9
 800717c:	4822      	ldr	r0, [pc, #136]	; (8007208 <bluetooth_rx_change_kx+0x4b8>)
 800717e:	f7fd fe65 	bl	8004e4c <HAL_UART_Transmit>
			}
			if(strstr((char*)rxBuffer, confirm_motor_quick_left) != NULL)
 8007182:	4b25      	ldr	r3, [pc, #148]	; (8007218 <bluetooth_rx_change_kx+0x4c8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fd6b 	bl	8007c64 <strstr>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02d      	beq.n	80071f0 <bluetooth_rx_change_kx+0x4a0>
			{
				token = strtok((char*)rxBuffer, ":");
 8007194:	4918      	ldr	r1, [pc, #96]	; (80071f8 <bluetooth_rx_change_kx+0x4a8>)
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fd7a 	bl	8007c90 <strtok>
 800719c:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 800719e:	4917      	ldr	r1, [pc, #92]	; (80071fc <bluetooth_rx_change_kx+0x4ac>)
 80071a0:	2000      	movs	r0, #0
 80071a2:	f000 fd75 	bl	8007c90 <strtok>
 80071a6:	61f8      	str	r0, [r7, #28]
				quick_speed_left = (Char2Num(token) * 10) + Char2Num(token + 1);
 80071a8:	69f8      	ldr	r0, [r7, #28]
 80071aa:	f000 f83b 	bl	8007224 <Char2Num>
 80071ae:	4603      	mov	r3, r0
 80071b0:	461a      	mov	r2, r3
 80071b2:	0092      	lsls	r2, r2, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	b2dc      	uxtb	r4, r3
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	3301      	adds	r3, #1
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f830 	bl	8007224 <Char2Num>
 80071c4:	4603      	mov	r3, r0
 80071c6:	4423      	add	r3, r4
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	4b14      	ldr	r3, [pc, #80]	; (800721c <bluetooth_rx_change_kx+0x4cc>)
 80071cc:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nQSL=%03d", quick_speed_left);
 80071ce:	4b13      	ldr	r3, [pc, #76]	; (800721c <bluetooth_rx_change_kx+0x4cc>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	f107 030c 	add.w	r3, r7, #12
 80071d8:	4911      	ldr	r1, [pc, #68]	; (8007220 <bluetooth_rx_change_kx+0x4d0>)
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fd22 	bl	8007c24 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 80071e0:	f107 010c 	add.w	r1, r7, #12
 80071e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071e8:	2209      	movs	r2, #9
 80071ea:	4807      	ldr	r0, [pc, #28]	; (8007208 <bluetooth_rx_change_kx+0x4b8>)
 80071ec:	f7fd fe2e 	bl	8004e4c <HAL_UART_Transmit>
			}
	}
 80071f0:	bf00      	nop
 80071f2:	3724      	adds	r7, #36	; 0x24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd90      	pop	{r4, r7, pc}
 80071f8:	0800a2fc 	.word	0x0800a2fc
 80071fc:	0800a300 	.word	0x0800a300
 8007200:	2000001a 	.word	0x2000001a
 8007204:	0800a340 	.word	0x0800a340
 8007208:	2000048c 	.word	0x2000048c
 800720c:	20000060 	.word	0x20000060
 8007210:	2000001e 	.word	0x2000001e
 8007214:	0800a34c 	.word	0x0800a34c
 8007218:	20000064 	.word	0x20000064
 800721c:	2000001f 	.word	0x2000001f
 8007220:	0800a358 	.word	0x0800a358

08007224 <Char2Num>:
/*func support for "bluetooth_rx_change_kx"*/
	uint8_t Char2Num(char * var_char)
	{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
		uint8_t var_num = *var_char - 48;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	3b30      	subs	r3, #48	; 0x30
 8007232:	73fb      	strb	r3, [r7, #15]
		return var_num;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
	}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <change_line_sensor_read>:
/**/
	void change_line_sensor_read(uint8_t *rxBuffer)
	{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
		char * token = NULL;
 8007248:	2300      	movs	r3, #0
 800724a:	61fb      	str	r3, [r7, #28]
		char string_feedback[15] = {0};
 800724c:	2300      	movs	r3, #0
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	f107 0310 	add.w	r3, r7, #16
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	f8c3 2007 	str.w	r2, [r3, #7]
		if(strstr((char*)rxBuffer, changeLine) != NULL)
 800725e:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <change_line_sensor_read+0x8c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fcfd 	bl	8007c64 <strstr>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d029      	beq.n	80072c4 <change_line_sensor_read+0x84>
		{
			token = strtok((char*)rxBuffer, ":");											//kp: xx, ki: yy, kd: zz
 8007270:	4917      	ldr	r1, [pc, #92]	; (80072d0 <change_line_sensor_read+0x90>)
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fd0c 	bl	8007c90 <strtok>
 8007278:	61f8      	str	r0, [r7, #28]
			token = strtok(NULL, ",");															//zz
 800727a:	4916      	ldr	r1, [pc, #88]	; (80072d4 <change_line_sensor_read+0x94>)
 800727c:	2000      	movs	r0, #0
 800727e:	f000 fd07 	bl	8007c90 <strtok>
 8007282:	61f8      	str	r0, [r7, #28]
			if(*token == 'W')
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b57      	cmp	r3, #87	; 0x57
 800728a:	d103      	bne.n	8007294 <change_line_sensor_read+0x54>
			{
				state_line_check = LINE_WHITE;
 800728c:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <change_line_sensor_read+0x98>)
 800728e:	2200      	movs	r2, #0
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	e006      	b.n	80072a2 <change_line_sensor_read+0x62>
			}
			else if(*token == 'B')
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b42      	cmp	r3, #66	; 0x42
 800729a:	d102      	bne.n	80072a2 <change_line_sensor_read+0x62>
			{
				state_line_check = LINE_BLACK;
 800729c:	4b0e      	ldr	r3, [pc, #56]	; (80072d8 <change_line_sensor_read+0x98>)
 800729e:	2201      	movs	r2, #1
 80072a0:	701a      	strb	r2, [r3, #0]
			}
			sprintf(string_feedback,"\nLINE=%c", state_line_check);
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <change_line_sensor_read+0x98>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	461a      	mov	r2, r3
 80072a8:	f107 030c 	add.w	r3, r7, #12
 80072ac:	490b      	ldr	r1, [pc, #44]	; (80072dc <change_line_sensor_read+0x9c>)
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fcb8 	bl	8007c24 <siprintf>
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, 7, 1000);
 80072b4:	f107 010c 	add.w	r1, r7, #12
 80072b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072bc:	2207      	movs	r2, #7
 80072be:	4808      	ldr	r0, [pc, #32]	; (80072e0 <change_line_sensor_read+0xa0>)
 80072c0:	f7fd fdc4 	bl	8004e4c <HAL_UART_Transmit>
		}
	}
 80072c4:	bf00      	nop
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	2000004c 	.word	0x2000004c
 80072d0:	0800a2fc 	.word	0x0800a2fc
 80072d4:	0800a300 	.word	0x0800a300
 80072d8:	20000458 	.word	0x20000458
 80072dc:	0800a364 	.word	0x0800a364
 80072e0:	2000048c 	.word	0x2000048c

080072e4 <__errno>:
 80072e4:	4b01      	ldr	r3, [pc, #4]	; (80072ec <__errno+0x8>)
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	2000006c 	.word	0x2000006c

080072f0 <__libc_init_array>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	2600      	movs	r6, #0
 80072f4:	4d0c      	ldr	r5, [pc, #48]	; (8007328 <__libc_init_array+0x38>)
 80072f6:	4c0d      	ldr	r4, [pc, #52]	; (800732c <__libc_init_array+0x3c>)
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	42a6      	cmp	r6, r4
 80072fe:	d109      	bne.n	8007314 <__libc_init_array+0x24>
 8007300:	f002 ff6e 	bl	800a1e0 <_init>
 8007304:	2600      	movs	r6, #0
 8007306:	4d0a      	ldr	r5, [pc, #40]	; (8007330 <__libc_init_array+0x40>)
 8007308:	4c0a      	ldr	r4, [pc, #40]	; (8007334 <__libc_init_array+0x44>)
 800730a:	1b64      	subs	r4, r4, r5
 800730c:	10a4      	asrs	r4, r4, #2
 800730e:	42a6      	cmp	r6, r4
 8007310:	d105      	bne.n	800731e <__libc_init_array+0x2e>
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	f855 3b04 	ldr.w	r3, [r5], #4
 8007318:	4798      	blx	r3
 800731a:	3601      	adds	r6, #1
 800731c:	e7ee      	b.n	80072fc <__libc_init_array+0xc>
 800731e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007322:	4798      	blx	r3
 8007324:	3601      	adds	r6, #1
 8007326:	e7f2      	b.n	800730e <__libc_init_array+0x1e>
 8007328:	0800a7ec 	.word	0x0800a7ec
 800732c:	0800a7ec 	.word	0x0800a7ec
 8007330:	0800a7ec 	.word	0x0800a7ec
 8007334:	0800a7f0 	.word	0x0800a7f0

08007338 <memcpy>:
 8007338:	440a      	add	r2, r1
 800733a:	4291      	cmp	r1, r2
 800733c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007340:	d100      	bne.n	8007344 <memcpy+0xc>
 8007342:	4770      	bx	lr
 8007344:	b510      	push	{r4, lr}
 8007346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734a:	4291      	cmp	r1, r2
 800734c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007350:	d1f9      	bne.n	8007346 <memcpy+0xe>
 8007352:	bd10      	pop	{r4, pc}

08007354 <memset>:
 8007354:	4603      	mov	r3, r0
 8007356:	4402      	add	r2, r0
 8007358:	4293      	cmp	r3, r2
 800735a:	d100      	bne.n	800735e <memset+0xa>
 800735c:	4770      	bx	lr
 800735e:	f803 1b01 	strb.w	r1, [r3], #1
 8007362:	e7f9      	b.n	8007358 <memset+0x4>

08007364 <__cvt>:
 8007364:	2b00      	cmp	r3, #0
 8007366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800736a:	461f      	mov	r7, r3
 800736c:	bfbb      	ittet	lt
 800736e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007372:	461f      	movlt	r7, r3
 8007374:	2300      	movge	r3, #0
 8007376:	232d      	movlt	r3, #45	; 0x2d
 8007378:	b088      	sub	sp, #32
 800737a:	4614      	mov	r4, r2
 800737c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800737e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007380:	7013      	strb	r3, [r2, #0]
 8007382:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007384:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007388:	f023 0820 	bic.w	r8, r3, #32
 800738c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007390:	d005      	beq.n	800739e <__cvt+0x3a>
 8007392:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007396:	d100      	bne.n	800739a <__cvt+0x36>
 8007398:	3501      	adds	r5, #1
 800739a:	2302      	movs	r3, #2
 800739c:	e000      	b.n	80073a0 <__cvt+0x3c>
 800739e:	2303      	movs	r3, #3
 80073a0:	aa07      	add	r2, sp, #28
 80073a2:	9204      	str	r2, [sp, #16]
 80073a4:	aa06      	add	r2, sp, #24
 80073a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80073aa:	e9cd 3500 	strd	r3, r5, [sp]
 80073ae:	4622      	mov	r2, r4
 80073b0:	463b      	mov	r3, r7
 80073b2:	f000 fd75 	bl	8007ea0 <_dtoa_r>
 80073b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073ba:	4606      	mov	r6, r0
 80073bc:	d102      	bne.n	80073c4 <__cvt+0x60>
 80073be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073c0:	07db      	lsls	r3, r3, #31
 80073c2:	d522      	bpl.n	800740a <__cvt+0xa6>
 80073c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073c8:	eb06 0905 	add.w	r9, r6, r5
 80073cc:	d110      	bne.n	80073f0 <__cvt+0x8c>
 80073ce:	7833      	ldrb	r3, [r6, #0]
 80073d0:	2b30      	cmp	r3, #48	; 0x30
 80073d2:	d10a      	bne.n	80073ea <__cvt+0x86>
 80073d4:	2200      	movs	r2, #0
 80073d6:	2300      	movs	r3, #0
 80073d8:	4620      	mov	r0, r4
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f9 fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80073e0:	b918      	cbnz	r0, 80073ea <__cvt+0x86>
 80073e2:	f1c5 0501 	rsb	r5, r5, #1
 80073e6:	f8ca 5000 	str.w	r5, [sl]
 80073ea:	f8da 3000 	ldr.w	r3, [sl]
 80073ee:	4499      	add	r9, r3
 80073f0:	2200      	movs	r2, #0
 80073f2:	2300      	movs	r3, #0
 80073f4:	4620      	mov	r0, r4
 80073f6:	4639      	mov	r1, r7
 80073f8:	f7f9 fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80073fc:	b108      	cbz	r0, 8007402 <__cvt+0x9e>
 80073fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8007402:	2230      	movs	r2, #48	; 0x30
 8007404:	9b07      	ldr	r3, [sp, #28]
 8007406:	454b      	cmp	r3, r9
 8007408:	d307      	bcc.n	800741a <__cvt+0xb6>
 800740a:	4630      	mov	r0, r6
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007410:	1b9b      	subs	r3, r3, r6
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	b008      	add	sp, #32
 8007416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741a:	1c59      	adds	r1, r3, #1
 800741c:	9107      	str	r1, [sp, #28]
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e7f0      	b.n	8007404 <__cvt+0xa0>

08007422 <__exponent>:
 8007422:	4603      	mov	r3, r0
 8007424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007426:	2900      	cmp	r1, #0
 8007428:	f803 2b02 	strb.w	r2, [r3], #2
 800742c:	bfb6      	itet	lt
 800742e:	222d      	movlt	r2, #45	; 0x2d
 8007430:	222b      	movge	r2, #43	; 0x2b
 8007432:	4249      	neglt	r1, r1
 8007434:	2909      	cmp	r1, #9
 8007436:	7042      	strb	r2, [r0, #1]
 8007438:	dd2b      	ble.n	8007492 <__exponent+0x70>
 800743a:	f10d 0407 	add.w	r4, sp, #7
 800743e:	46a4      	mov	ip, r4
 8007440:	270a      	movs	r7, #10
 8007442:	fb91 f6f7 	sdiv	r6, r1, r7
 8007446:	460a      	mov	r2, r1
 8007448:	46a6      	mov	lr, r4
 800744a:	fb07 1516 	mls	r5, r7, r6, r1
 800744e:	2a63      	cmp	r2, #99	; 0x63
 8007450:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007454:	4631      	mov	r1, r6
 8007456:	f104 34ff 	add.w	r4, r4, #4294967295
 800745a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800745e:	dcf0      	bgt.n	8007442 <__exponent+0x20>
 8007460:	3130      	adds	r1, #48	; 0x30
 8007462:	f1ae 0502 	sub.w	r5, lr, #2
 8007466:	f804 1c01 	strb.w	r1, [r4, #-1]
 800746a:	4629      	mov	r1, r5
 800746c:	1c44      	adds	r4, r0, #1
 800746e:	4561      	cmp	r1, ip
 8007470:	d30a      	bcc.n	8007488 <__exponent+0x66>
 8007472:	f10d 0209 	add.w	r2, sp, #9
 8007476:	eba2 020e 	sub.w	r2, r2, lr
 800747a:	4565      	cmp	r5, ip
 800747c:	bf88      	it	hi
 800747e:	2200      	movhi	r2, #0
 8007480:	4413      	add	r3, r2
 8007482:	1a18      	subs	r0, r3, r0
 8007484:	b003      	add	sp, #12
 8007486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007488:	f811 2b01 	ldrb.w	r2, [r1], #1
 800748c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007490:	e7ed      	b.n	800746e <__exponent+0x4c>
 8007492:	2330      	movs	r3, #48	; 0x30
 8007494:	3130      	adds	r1, #48	; 0x30
 8007496:	7083      	strb	r3, [r0, #2]
 8007498:	70c1      	strb	r1, [r0, #3]
 800749a:	1d03      	adds	r3, r0, #4
 800749c:	e7f1      	b.n	8007482 <__exponent+0x60>
	...

080074a0 <_printf_float>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	b091      	sub	sp, #68	; 0x44
 80074a6:	460c      	mov	r4, r1
 80074a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80074ac:	4616      	mov	r6, r2
 80074ae:	461f      	mov	r7, r3
 80074b0:	4605      	mov	r5, r0
 80074b2:	f001 faf5 	bl	8008aa0 <_localeconv_r>
 80074b6:	6803      	ldr	r3, [r0, #0]
 80074b8:	4618      	mov	r0, r3
 80074ba:	9309      	str	r3, [sp, #36]	; 0x24
 80074bc:	f7f8 fe48 	bl	8000150 <strlen>
 80074c0:	2300      	movs	r3, #0
 80074c2:	930e      	str	r3, [sp, #56]	; 0x38
 80074c4:	f8d8 3000 	ldr.w	r3, [r8]
 80074c8:	900a      	str	r0, [sp, #40]	; 0x28
 80074ca:	3307      	adds	r3, #7
 80074cc:	f023 0307 	bic.w	r3, r3, #7
 80074d0:	f103 0208 	add.w	r2, r3, #8
 80074d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074d8:	f8d4 b000 	ldr.w	fp, [r4]
 80074dc:	f8c8 2000 	str.w	r2, [r8]
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80074ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80074f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80074f2:	f04f 32ff 	mov.w	r2, #4294967295
 80074f6:	4640      	mov	r0, r8
 80074f8:	4b9c      	ldr	r3, [pc, #624]	; (800776c <_printf_float+0x2cc>)
 80074fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074fc:	f7f9 fa86 	bl	8000a0c <__aeabi_dcmpun>
 8007500:	bb70      	cbnz	r0, 8007560 <_printf_float+0xc0>
 8007502:	f04f 32ff 	mov.w	r2, #4294967295
 8007506:	4640      	mov	r0, r8
 8007508:	4b98      	ldr	r3, [pc, #608]	; (800776c <_printf_float+0x2cc>)
 800750a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800750c:	f7f9 fa60 	bl	80009d0 <__aeabi_dcmple>
 8007510:	bb30      	cbnz	r0, 8007560 <_printf_float+0xc0>
 8007512:	2200      	movs	r2, #0
 8007514:	2300      	movs	r3, #0
 8007516:	4640      	mov	r0, r8
 8007518:	4651      	mov	r1, sl
 800751a:	f7f9 fa4f 	bl	80009bc <__aeabi_dcmplt>
 800751e:	b110      	cbz	r0, 8007526 <_printf_float+0x86>
 8007520:	232d      	movs	r3, #45	; 0x2d
 8007522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007526:	4b92      	ldr	r3, [pc, #584]	; (8007770 <_printf_float+0x2d0>)
 8007528:	4892      	ldr	r0, [pc, #584]	; (8007774 <_printf_float+0x2d4>)
 800752a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800752e:	bf94      	ite	ls
 8007530:	4698      	movls	r8, r3
 8007532:	4680      	movhi	r8, r0
 8007534:	2303      	movs	r3, #3
 8007536:	f04f 0a00 	mov.w	sl, #0
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	f02b 0304 	bic.w	r3, fp, #4
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	4633      	mov	r3, r6
 8007544:	4621      	mov	r1, r4
 8007546:	4628      	mov	r0, r5
 8007548:	9700      	str	r7, [sp, #0]
 800754a:	aa0f      	add	r2, sp, #60	; 0x3c
 800754c:	f000 f9d4 	bl	80078f8 <_printf_common>
 8007550:	3001      	adds	r0, #1
 8007552:	f040 8090 	bne.w	8007676 <_printf_float+0x1d6>
 8007556:	f04f 30ff 	mov.w	r0, #4294967295
 800755a:	b011      	add	sp, #68	; 0x44
 800755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007560:	4642      	mov	r2, r8
 8007562:	4653      	mov	r3, sl
 8007564:	4640      	mov	r0, r8
 8007566:	4651      	mov	r1, sl
 8007568:	f7f9 fa50 	bl	8000a0c <__aeabi_dcmpun>
 800756c:	b148      	cbz	r0, 8007582 <_printf_float+0xe2>
 800756e:	f1ba 0f00 	cmp.w	sl, #0
 8007572:	bfb8      	it	lt
 8007574:	232d      	movlt	r3, #45	; 0x2d
 8007576:	4880      	ldr	r0, [pc, #512]	; (8007778 <_printf_float+0x2d8>)
 8007578:	bfb8      	it	lt
 800757a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800757e:	4b7f      	ldr	r3, [pc, #508]	; (800777c <_printf_float+0x2dc>)
 8007580:	e7d3      	b.n	800752a <_printf_float+0x8a>
 8007582:	6863      	ldr	r3, [r4, #4]
 8007584:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	d142      	bne.n	8007612 <_printf_float+0x172>
 800758c:	2306      	movs	r3, #6
 800758e:	6063      	str	r3, [r4, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	9206      	str	r2, [sp, #24]
 8007594:	aa0e      	add	r2, sp, #56	; 0x38
 8007596:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800759a:	aa0d      	add	r2, sp, #52	; 0x34
 800759c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80075a0:	9203      	str	r2, [sp, #12]
 80075a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80075a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	6863      	ldr	r3, [r4, #4]
 80075ae:	4642      	mov	r2, r8
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	4628      	mov	r0, r5
 80075b4:	4653      	mov	r3, sl
 80075b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80075b8:	f7ff fed4 	bl	8007364 <__cvt>
 80075bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075be:	4680      	mov	r8, r0
 80075c0:	2947      	cmp	r1, #71	; 0x47
 80075c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80075c4:	d108      	bne.n	80075d8 <_printf_float+0x138>
 80075c6:	1cc8      	adds	r0, r1, #3
 80075c8:	db02      	blt.n	80075d0 <_printf_float+0x130>
 80075ca:	6863      	ldr	r3, [r4, #4]
 80075cc:	4299      	cmp	r1, r3
 80075ce:	dd40      	ble.n	8007652 <_printf_float+0x1b2>
 80075d0:	f1a9 0902 	sub.w	r9, r9, #2
 80075d4:	fa5f f989 	uxtb.w	r9, r9
 80075d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075dc:	d81f      	bhi.n	800761e <_printf_float+0x17e>
 80075de:	464a      	mov	r2, r9
 80075e0:	3901      	subs	r1, #1
 80075e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075e6:	910d      	str	r1, [sp, #52]	; 0x34
 80075e8:	f7ff ff1b 	bl	8007422 <__exponent>
 80075ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075ee:	4682      	mov	sl, r0
 80075f0:	1813      	adds	r3, r2, r0
 80075f2:	2a01      	cmp	r2, #1
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	dc02      	bgt.n	80075fe <_printf_float+0x15e>
 80075f8:	6822      	ldr	r2, [r4, #0]
 80075fa:	07d2      	lsls	r2, r2, #31
 80075fc:	d501      	bpl.n	8007602 <_printf_float+0x162>
 80075fe:	3301      	adds	r3, #1
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007606:	2b00      	cmp	r3, #0
 8007608:	d09b      	beq.n	8007542 <_printf_float+0xa2>
 800760a:	232d      	movs	r3, #45	; 0x2d
 800760c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007610:	e797      	b.n	8007542 <_printf_float+0xa2>
 8007612:	2947      	cmp	r1, #71	; 0x47
 8007614:	d1bc      	bne.n	8007590 <_printf_float+0xf0>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1ba      	bne.n	8007590 <_printf_float+0xf0>
 800761a:	2301      	movs	r3, #1
 800761c:	e7b7      	b.n	800758e <_printf_float+0xee>
 800761e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007622:	d118      	bne.n	8007656 <_printf_float+0x1b6>
 8007624:	2900      	cmp	r1, #0
 8007626:	6863      	ldr	r3, [r4, #4]
 8007628:	dd0b      	ble.n	8007642 <_printf_float+0x1a2>
 800762a:	6121      	str	r1, [r4, #16]
 800762c:	b913      	cbnz	r3, 8007634 <_printf_float+0x194>
 800762e:	6822      	ldr	r2, [r4, #0]
 8007630:	07d0      	lsls	r0, r2, #31
 8007632:	d502      	bpl.n	800763a <_printf_float+0x19a>
 8007634:	3301      	adds	r3, #1
 8007636:	440b      	add	r3, r1
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	f04f 0a00 	mov.w	sl, #0
 800763e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007640:	e7df      	b.n	8007602 <_printf_float+0x162>
 8007642:	b913      	cbnz	r3, 800764a <_printf_float+0x1aa>
 8007644:	6822      	ldr	r2, [r4, #0]
 8007646:	07d2      	lsls	r2, r2, #31
 8007648:	d501      	bpl.n	800764e <_printf_float+0x1ae>
 800764a:	3302      	adds	r3, #2
 800764c:	e7f4      	b.n	8007638 <_printf_float+0x198>
 800764e:	2301      	movs	r3, #1
 8007650:	e7f2      	b.n	8007638 <_printf_float+0x198>
 8007652:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007658:	4299      	cmp	r1, r3
 800765a:	db05      	blt.n	8007668 <_printf_float+0x1c8>
 800765c:	6823      	ldr	r3, [r4, #0]
 800765e:	6121      	str	r1, [r4, #16]
 8007660:	07d8      	lsls	r0, r3, #31
 8007662:	d5ea      	bpl.n	800763a <_printf_float+0x19a>
 8007664:	1c4b      	adds	r3, r1, #1
 8007666:	e7e7      	b.n	8007638 <_printf_float+0x198>
 8007668:	2900      	cmp	r1, #0
 800766a:	bfcc      	ite	gt
 800766c:	2201      	movgt	r2, #1
 800766e:	f1c1 0202 	rsble	r2, r1, #2
 8007672:	4413      	add	r3, r2
 8007674:	e7e0      	b.n	8007638 <_printf_float+0x198>
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	055a      	lsls	r2, r3, #21
 800767a:	d407      	bmi.n	800768c <_printf_float+0x1ec>
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	4642      	mov	r2, r8
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	47b8      	blx	r7
 8007686:	3001      	adds	r0, #1
 8007688:	d12b      	bne.n	80076e2 <_printf_float+0x242>
 800768a:	e764      	b.n	8007556 <_printf_float+0xb6>
 800768c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007690:	f240 80dd 	bls.w	800784e <_printf_float+0x3ae>
 8007694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	f7f9 f984 	bl	80009a8 <__aeabi_dcmpeq>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d033      	beq.n	800770c <_printf_float+0x26c>
 80076a4:	2301      	movs	r3, #1
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	4a35      	ldr	r2, [pc, #212]	; (8007780 <_printf_float+0x2e0>)
 80076ac:	47b8      	blx	r7
 80076ae:	3001      	adds	r0, #1
 80076b0:	f43f af51 	beq.w	8007556 <_printf_float+0xb6>
 80076b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076b8:	429a      	cmp	r2, r3
 80076ba:	db02      	blt.n	80076c2 <_printf_float+0x222>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	07d8      	lsls	r0, r3, #31
 80076c0:	d50f      	bpl.n	80076e2 <_printf_float+0x242>
 80076c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076c6:	4631      	mov	r1, r6
 80076c8:	4628      	mov	r0, r5
 80076ca:	47b8      	blx	r7
 80076cc:	3001      	adds	r0, #1
 80076ce:	f43f af42 	beq.w	8007556 <_printf_float+0xb6>
 80076d2:	f04f 0800 	mov.w	r8, #0
 80076d6:	f104 091a 	add.w	r9, r4, #26
 80076da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076dc:	3b01      	subs	r3, #1
 80076de:	4543      	cmp	r3, r8
 80076e0:	dc09      	bgt.n	80076f6 <_printf_float+0x256>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	079b      	lsls	r3, r3, #30
 80076e6:	f100 8102 	bmi.w	80078ee <_printf_float+0x44e>
 80076ea:	68e0      	ldr	r0, [r4, #12]
 80076ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ee:	4298      	cmp	r0, r3
 80076f0:	bfb8      	it	lt
 80076f2:	4618      	movlt	r0, r3
 80076f4:	e731      	b.n	800755a <_printf_float+0xba>
 80076f6:	2301      	movs	r3, #1
 80076f8:	464a      	mov	r2, r9
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	f43f af28 	beq.w	8007556 <_printf_float+0xb6>
 8007706:	f108 0801 	add.w	r8, r8, #1
 800770a:	e7e6      	b.n	80076da <_printf_float+0x23a>
 800770c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800770e:	2b00      	cmp	r3, #0
 8007710:	dc38      	bgt.n	8007784 <_printf_float+0x2e4>
 8007712:	2301      	movs	r3, #1
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	4a19      	ldr	r2, [pc, #100]	; (8007780 <_printf_float+0x2e0>)
 800771a:	47b8      	blx	r7
 800771c:	3001      	adds	r0, #1
 800771e:	f43f af1a 	beq.w	8007556 <_printf_float+0xb6>
 8007722:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007726:	4313      	orrs	r3, r2
 8007728:	d102      	bne.n	8007730 <_printf_float+0x290>
 800772a:	6823      	ldr	r3, [r4, #0]
 800772c:	07d9      	lsls	r1, r3, #31
 800772e:	d5d8      	bpl.n	80076e2 <_printf_float+0x242>
 8007730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007734:	4631      	mov	r1, r6
 8007736:	4628      	mov	r0, r5
 8007738:	47b8      	blx	r7
 800773a:	3001      	adds	r0, #1
 800773c:	f43f af0b 	beq.w	8007556 <_printf_float+0xb6>
 8007740:	f04f 0900 	mov.w	r9, #0
 8007744:	f104 0a1a 	add.w	sl, r4, #26
 8007748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800774a:	425b      	negs	r3, r3
 800774c:	454b      	cmp	r3, r9
 800774e:	dc01      	bgt.n	8007754 <_printf_float+0x2b4>
 8007750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007752:	e794      	b.n	800767e <_printf_float+0x1de>
 8007754:	2301      	movs	r3, #1
 8007756:	4652      	mov	r2, sl
 8007758:	4631      	mov	r1, r6
 800775a:	4628      	mov	r0, r5
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f aef9 	beq.w	8007556 <_printf_float+0xb6>
 8007764:	f109 0901 	add.w	r9, r9, #1
 8007768:	e7ee      	b.n	8007748 <_printf_float+0x2a8>
 800776a:	bf00      	nop
 800776c:	7fefffff 	.word	0x7fefffff
 8007770:	0800a3b4 	.word	0x0800a3b4
 8007774:	0800a3b8 	.word	0x0800a3b8
 8007778:	0800a3c0 	.word	0x0800a3c0
 800777c:	0800a3bc 	.word	0x0800a3bc
 8007780:	0800a3c4 	.word	0x0800a3c4
 8007784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007788:	429a      	cmp	r2, r3
 800778a:	bfa8      	it	ge
 800778c:	461a      	movge	r2, r3
 800778e:	2a00      	cmp	r2, #0
 8007790:	4691      	mov	r9, r2
 8007792:	dc37      	bgt.n	8007804 <_printf_float+0x364>
 8007794:	f04f 0b00 	mov.w	fp, #0
 8007798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800779c:	f104 021a 	add.w	r2, r4, #26
 80077a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80077a4:	ebaa 0309 	sub.w	r3, sl, r9
 80077a8:	455b      	cmp	r3, fp
 80077aa:	dc33      	bgt.n	8007814 <_printf_float+0x374>
 80077ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077b0:	429a      	cmp	r2, r3
 80077b2:	db3b      	blt.n	800782c <_printf_float+0x38c>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	07da      	lsls	r2, r3, #31
 80077b8:	d438      	bmi.n	800782c <_printf_float+0x38c>
 80077ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80077be:	eba3 020a 	sub.w	r2, r3, sl
 80077c2:	eba3 0901 	sub.w	r9, r3, r1
 80077c6:	4591      	cmp	r9, r2
 80077c8:	bfa8      	it	ge
 80077ca:	4691      	movge	r9, r2
 80077cc:	f1b9 0f00 	cmp.w	r9, #0
 80077d0:	dc34      	bgt.n	800783c <_printf_float+0x39c>
 80077d2:	f04f 0800 	mov.w	r8, #0
 80077d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077da:	f104 0a1a 	add.w	sl, r4, #26
 80077de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077e2:	1a9b      	subs	r3, r3, r2
 80077e4:	eba3 0309 	sub.w	r3, r3, r9
 80077e8:	4543      	cmp	r3, r8
 80077ea:	f77f af7a 	ble.w	80076e2 <_printf_float+0x242>
 80077ee:	2301      	movs	r3, #1
 80077f0:	4652      	mov	r2, sl
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	f43f aeac 	beq.w	8007556 <_printf_float+0xb6>
 80077fe:	f108 0801 	add.w	r8, r8, #1
 8007802:	e7ec      	b.n	80077de <_printf_float+0x33e>
 8007804:	4613      	mov	r3, r2
 8007806:	4631      	mov	r1, r6
 8007808:	4642      	mov	r2, r8
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	d1c0      	bne.n	8007794 <_printf_float+0x2f4>
 8007812:	e6a0      	b.n	8007556 <_printf_float+0xb6>
 8007814:	2301      	movs	r3, #1
 8007816:	4631      	mov	r1, r6
 8007818:	4628      	mov	r0, r5
 800781a:	920b      	str	r2, [sp, #44]	; 0x2c
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	f43f ae99 	beq.w	8007556 <_printf_float+0xb6>
 8007824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007826:	f10b 0b01 	add.w	fp, fp, #1
 800782a:	e7b9      	b.n	80077a0 <_printf_float+0x300>
 800782c:	4631      	mov	r1, r6
 800782e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	d1bf      	bne.n	80077ba <_printf_float+0x31a>
 800783a:	e68c      	b.n	8007556 <_printf_float+0xb6>
 800783c:	464b      	mov	r3, r9
 800783e:	4631      	mov	r1, r6
 8007840:	4628      	mov	r0, r5
 8007842:	eb08 020a 	add.w	r2, r8, sl
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	d1c2      	bne.n	80077d2 <_printf_float+0x332>
 800784c:	e683      	b.n	8007556 <_printf_float+0xb6>
 800784e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007850:	2a01      	cmp	r2, #1
 8007852:	dc01      	bgt.n	8007858 <_printf_float+0x3b8>
 8007854:	07db      	lsls	r3, r3, #31
 8007856:	d537      	bpl.n	80078c8 <_printf_float+0x428>
 8007858:	2301      	movs	r3, #1
 800785a:	4642      	mov	r2, r8
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f ae77 	beq.w	8007556 <_printf_float+0xb6>
 8007868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f ae6f 	beq.w	8007556 <_printf_float+0xb6>
 8007878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	f7f9 f892 	bl	80009a8 <__aeabi_dcmpeq>
 8007884:	b9d8      	cbnz	r0, 80078be <_printf_float+0x41e>
 8007886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007888:	f108 0201 	add.w	r2, r8, #1
 800788c:	3b01      	subs	r3, #1
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	d10e      	bne.n	80078b6 <_printf_float+0x416>
 8007898:	e65d      	b.n	8007556 <_printf_float+0xb6>
 800789a:	2301      	movs	r3, #1
 800789c:	464a      	mov	r2, r9
 800789e:	4631      	mov	r1, r6
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b8      	blx	r7
 80078a4:	3001      	adds	r0, #1
 80078a6:	f43f ae56 	beq.w	8007556 <_printf_float+0xb6>
 80078aa:	f108 0801 	add.w	r8, r8, #1
 80078ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078b0:	3b01      	subs	r3, #1
 80078b2:	4543      	cmp	r3, r8
 80078b4:	dcf1      	bgt.n	800789a <_printf_float+0x3fa>
 80078b6:	4653      	mov	r3, sl
 80078b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078bc:	e6e0      	b.n	8007680 <_printf_float+0x1e0>
 80078be:	f04f 0800 	mov.w	r8, #0
 80078c2:	f104 091a 	add.w	r9, r4, #26
 80078c6:	e7f2      	b.n	80078ae <_printf_float+0x40e>
 80078c8:	2301      	movs	r3, #1
 80078ca:	4642      	mov	r2, r8
 80078cc:	e7df      	b.n	800788e <_printf_float+0x3ee>
 80078ce:	2301      	movs	r3, #1
 80078d0:	464a      	mov	r2, r9
 80078d2:	4631      	mov	r1, r6
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f ae3c 	beq.w	8007556 <_printf_float+0xb6>
 80078de:	f108 0801 	add.w	r8, r8, #1
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078e6:	1a5b      	subs	r3, r3, r1
 80078e8:	4543      	cmp	r3, r8
 80078ea:	dcf0      	bgt.n	80078ce <_printf_float+0x42e>
 80078ec:	e6fd      	b.n	80076ea <_printf_float+0x24a>
 80078ee:	f04f 0800 	mov.w	r8, #0
 80078f2:	f104 0919 	add.w	r9, r4, #25
 80078f6:	e7f4      	b.n	80078e2 <_printf_float+0x442>

080078f8 <_printf_common>:
 80078f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	4616      	mov	r6, r2
 80078fe:	4699      	mov	r9, r3
 8007900:	688a      	ldr	r2, [r1, #8]
 8007902:	690b      	ldr	r3, [r1, #16]
 8007904:	4607      	mov	r7, r0
 8007906:	4293      	cmp	r3, r2
 8007908:	bfb8      	it	lt
 800790a:	4613      	movlt	r3, r2
 800790c:	6033      	str	r3, [r6, #0]
 800790e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007912:	460c      	mov	r4, r1
 8007914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007918:	b10a      	cbz	r2, 800791e <_printf_common+0x26>
 800791a:	3301      	adds	r3, #1
 800791c:	6033      	str	r3, [r6, #0]
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	0699      	lsls	r1, r3, #26
 8007922:	bf42      	ittt	mi
 8007924:	6833      	ldrmi	r3, [r6, #0]
 8007926:	3302      	addmi	r3, #2
 8007928:	6033      	strmi	r3, [r6, #0]
 800792a:	6825      	ldr	r5, [r4, #0]
 800792c:	f015 0506 	ands.w	r5, r5, #6
 8007930:	d106      	bne.n	8007940 <_printf_common+0x48>
 8007932:	f104 0a19 	add.w	sl, r4, #25
 8007936:	68e3      	ldr	r3, [r4, #12]
 8007938:	6832      	ldr	r2, [r6, #0]
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	42ab      	cmp	r3, r5
 800793e:	dc28      	bgt.n	8007992 <_printf_common+0x9a>
 8007940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007944:	1e13      	subs	r3, r2, #0
 8007946:	6822      	ldr	r2, [r4, #0]
 8007948:	bf18      	it	ne
 800794a:	2301      	movne	r3, #1
 800794c:	0692      	lsls	r2, r2, #26
 800794e:	d42d      	bmi.n	80079ac <_printf_common+0xb4>
 8007950:	4649      	mov	r1, r9
 8007952:	4638      	mov	r0, r7
 8007954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007958:	47c0      	blx	r8
 800795a:	3001      	adds	r0, #1
 800795c:	d020      	beq.n	80079a0 <_printf_common+0xa8>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	68e5      	ldr	r5, [r4, #12]
 8007962:	f003 0306 	and.w	r3, r3, #6
 8007966:	2b04      	cmp	r3, #4
 8007968:	bf18      	it	ne
 800796a:	2500      	movne	r5, #0
 800796c:	6832      	ldr	r2, [r6, #0]
 800796e:	f04f 0600 	mov.w	r6, #0
 8007972:	68a3      	ldr	r3, [r4, #8]
 8007974:	bf08      	it	eq
 8007976:	1aad      	subeq	r5, r5, r2
 8007978:	6922      	ldr	r2, [r4, #16]
 800797a:	bf08      	it	eq
 800797c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007980:	4293      	cmp	r3, r2
 8007982:	bfc4      	itt	gt
 8007984:	1a9b      	subgt	r3, r3, r2
 8007986:	18ed      	addgt	r5, r5, r3
 8007988:	341a      	adds	r4, #26
 800798a:	42b5      	cmp	r5, r6
 800798c:	d11a      	bne.n	80079c4 <_printf_common+0xcc>
 800798e:	2000      	movs	r0, #0
 8007990:	e008      	b.n	80079a4 <_printf_common+0xac>
 8007992:	2301      	movs	r3, #1
 8007994:	4652      	mov	r2, sl
 8007996:	4649      	mov	r1, r9
 8007998:	4638      	mov	r0, r7
 800799a:	47c0      	blx	r8
 800799c:	3001      	adds	r0, #1
 800799e:	d103      	bne.n	80079a8 <_printf_common+0xb0>
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a8:	3501      	adds	r5, #1
 80079aa:	e7c4      	b.n	8007936 <_printf_common+0x3e>
 80079ac:	2030      	movs	r0, #48	; 0x30
 80079ae:	18e1      	adds	r1, r4, r3
 80079b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079ba:	4422      	add	r2, r4
 80079bc:	3302      	adds	r3, #2
 80079be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079c2:	e7c5      	b.n	8007950 <_printf_common+0x58>
 80079c4:	2301      	movs	r3, #1
 80079c6:	4622      	mov	r2, r4
 80079c8:	4649      	mov	r1, r9
 80079ca:	4638      	mov	r0, r7
 80079cc:	47c0      	blx	r8
 80079ce:	3001      	adds	r0, #1
 80079d0:	d0e6      	beq.n	80079a0 <_printf_common+0xa8>
 80079d2:	3601      	adds	r6, #1
 80079d4:	e7d9      	b.n	800798a <_printf_common+0x92>
	...

080079d8 <_printf_i>:
 80079d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	7e0f      	ldrb	r7, [r1, #24]
 80079de:	4691      	mov	r9, r2
 80079e0:	2f78      	cmp	r7, #120	; 0x78
 80079e2:	4680      	mov	r8, r0
 80079e4:	460c      	mov	r4, r1
 80079e6:	469a      	mov	sl, r3
 80079e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079ee:	d807      	bhi.n	8007a00 <_printf_i+0x28>
 80079f0:	2f62      	cmp	r7, #98	; 0x62
 80079f2:	d80a      	bhi.n	8007a0a <_printf_i+0x32>
 80079f4:	2f00      	cmp	r7, #0
 80079f6:	f000 80d9 	beq.w	8007bac <_printf_i+0x1d4>
 80079fa:	2f58      	cmp	r7, #88	; 0x58
 80079fc:	f000 80a4 	beq.w	8007b48 <_printf_i+0x170>
 8007a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a08:	e03a      	b.n	8007a80 <_printf_i+0xa8>
 8007a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a0e:	2b15      	cmp	r3, #21
 8007a10:	d8f6      	bhi.n	8007a00 <_printf_i+0x28>
 8007a12:	a101      	add	r1, pc, #4	; (adr r1, 8007a18 <_printf_i+0x40>)
 8007a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a18:	08007a71 	.word	0x08007a71
 8007a1c:	08007a85 	.word	0x08007a85
 8007a20:	08007a01 	.word	0x08007a01
 8007a24:	08007a01 	.word	0x08007a01
 8007a28:	08007a01 	.word	0x08007a01
 8007a2c:	08007a01 	.word	0x08007a01
 8007a30:	08007a85 	.word	0x08007a85
 8007a34:	08007a01 	.word	0x08007a01
 8007a38:	08007a01 	.word	0x08007a01
 8007a3c:	08007a01 	.word	0x08007a01
 8007a40:	08007a01 	.word	0x08007a01
 8007a44:	08007b93 	.word	0x08007b93
 8007a48:	08007ab5 	.word	0x08007ab5
 8007a4c:	08007b75 	.word	0x08007b75
 8007a50:	08007a01 	.word	0x08007a01
 8007a54:	08007a01 	.word	0x08007a01
 8007a58:	08007bb5 	.word	0x08007bb5
 8007a5c:	08007a01 	.word	0x08007a01
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007a01 	.word	0x08007a01
 8007a68:	08007a01 	.word	0x08007a01
 8007a6c:	08007b7d 	.word	0x08007b7d
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	1d1a      	adds	r2, r3, #4
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	602a      	str	r2, [r5, #0]
 8007a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0a4      	b.n	8007bce <_printf_i+0x1f6>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	6829      	ldr	r1, [r5, #0]
 8007a88:	0606      	lsls	r6, r0, #24
 8007a8a:	f101 0304 	add.w	r3, r1, #4
 8007a8e:	d50a      	bpl.n	8007aa6 <_printf_i+0xce>
 8007a90:	680e      	ldr	r6, [r1, #0]
 8007a92:	602b      	str	r3, [r5, #0]
 8007a94:	2e00      	cmp	r6, #0
 8007a96:	da03      	bge.n	8007aa0 <_printf_i+0xc8>
 8007a98:	232d      	movs	r3, #45	; 0x2d
 8007a9a:	4276      	negs	r6, r6
 8007a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aa0:	230a      	movs	r3, #10
 8007aa2:	485e      	ldr	r0, [pc, #376]	; (8007c1c <_printf_i+0x244>)
 8007aa4:	e019      	b.n	8007ada <_printf_i+0x102>
 8007aa6:	680e      	ldr	r6, [r1, #0]
 8007aa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007aac:	602b      	str	r3, [r5, #0]
 8007aae:	bf18      	it	ne
 8007ab0:	b236      	sxthne	r6, r6
 8007ab2:	e7ef      	b.n	8007a94 <_printf_i+0xbc>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	6820      	ldr	r0, [r4, #0]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	6029      	str	r1, [r5, #0]
 8007abc:	0601      	lsls	r1, r0, #24
 8007abe:	d501      	bpl.n	8007ac4 <_printf_i+0xec>
 8007ac0:	681e      	ldr	r6, [r3, #0]
 8007ac2:	e002      	b.n	8007aca <_printf_i+0xf2>
 8007ac4:	0646      	lsls	r6, r0, #25
 8007ac6:	d5fb      	bpl.n	8007ac0 <_printf_i+0xe8>
 8007ac8:	881e      	ldrh	r6, [r3, #0]
 8007aca:	2f6f      	cmp	r7, #111	; 0x6f
 8007acc:	bf0c      	ite	eq
 8007ace:	2308      	moveq	r3, #8
 8007ad0:	230a      	movne	r3, #10
 8007ad2:	4852      	ldr	r0, [pc, #328]	; (8007c1c <_printf_i+0x244>)
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ada:	6865      	ldr	r5, [r4, #4]
 8007adc:	2d00      	cmp	r5, #0
 8007ade:	bfa8      	it	ge
 8007ae0:	6821      	ldrge	r1, [r4, #0]
 8007ae2:	60a5      	str	r5, [r4, #8]
 8007ae4:	bfa4      	itt	ge
 8007ae6:	f021 0104 	bicge.w	r1, r1, #4
 8007aea:	6021      	strge	r1, [r4, #0]
 8007aec:	b90e      	cbnz	r6, 8007af2 <_printf_i+0x11a>
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	d04d      	beq.n	8007b8e <_printf_i+0x1b6>
 8007af2:	4615      	mov	r5, r2
 8007af4:	fbb6 f1f3 	udiv	r1, r6, r3
 8007af8:	fb03 6711 	mls	r7, r3, r1, r6
 8007afc:	5dc7      	ldrb	r7, [r0, r7]
 8007afe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b02:	4637      	mov	r7, r6
 8007b04:	42bb      	cmp	r3, r7
 8007b06:	460e      	mov	r6, r1
 8007b08:	d9f4      	bls.n	8007af4 <_printf_i+0x11c>
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d10b      	bne.n	8007b26 <_printf_i+0x14e>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	07de      	lsls	r6, r3, #31
 8007b12:	d508      	bpl.n	8007b26 <_printf_i+0x14e>
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	6861      	ldr	r1, [r4, #4]
 8007b18:	4299      	cmp	r1, r3
 8007b1a:	bfde      	ittt	le
 8007b1c:	2330      	movle	r3, #48	; 0x30
 8007b1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b26:	1b52      	subs	r2, r2, r5
 8007b28:	6122      	str	r2, [r4, #16]
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f8cd a000 	str.w	sl, [sp]
 8007b34:	aa03      	add	r2, sp, #12
 8007b36:	f7ff fedf 	bl	80078f8 <_printf_common>
 8007b3a:	3001      	adds	r0, #1
 8007b3c:	d14c      	bne.n	8007bd8 <_printf_i+0x200>
 8007b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b42:	b004      	add	sp, #16
 8007b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b48:	4834      	ldr	r0, [pc, #208]	; (8007c1c <_printf_i+0x244>)
 8007b4a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b4e:	6829      	ldr	r1, [r5, #0]
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b56:	6029      	str	r1, [r5, #0]
 8007b58:	061d      	lsls	r5, r3, #24
 8007b5a:	d514      	bpl.n	8007b86 <_printf_i+0x1ae>
 8007b5c:	07df      	lsls	r7, r3, #31
 8007b5e:	bf44      	itt	mi
 8007b60:	f043 0320 	orrmi.w	r3, r3, #32
 8007b64:	6023      	strmi	r3, [r4, #0]
 8007b66:	b91e      	cbnz	r6, 8007b70 <_printf_i+0x198>
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	f023 0320 	bic.w	r3, r3, #32
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	2310      	movs	r3, #16
 8007b72:	e7af      	b.n	8007ad4 <_printf_i+0xfc>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	f043 0320 	orr.w	r3, r3, #32
 8007b7a:	6023      	str	r3, [r4, #0]
 8007b7c:	2378      	movs	r3, #120	; 0x78
 8007b7e:	4828      	ldr	r0, [pc, #160]	; (8007c20 <_printf_i+0x248>)
 8007b80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b84:	e7e3      	b.n	8007b4e <_printf_i+0x176>
 8007b86:	0659      	lsls	r1, r3, #25
 8007b88:	bf48      	it	mi
 8007b8a:	b2b6      	uxthmi	r6, r6
 8007b8c:	e7e6      	b.n	8007b5c <_printf_i+0x184>
 8007b8e:	4615      	mov	r5, r2
 8007b90:	e7bb      	b.n	8007b0a <_printf_i+0x132>
 8007b92:	682b      	ldr	r3, [r5, #0]
 8007b94:	6826      	ldr	r6, [r4, #0]
 8007b96:	1d18      	adds	r0, r3, #4
 8007b98:	6961      	ldr	r1, [r4, #20]
 8007b9a:	6028      	str	r0, [r5, #0]
 8007b9c:	0635      	lsls	r5, r6, #24
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	d501      	bpl.n	8007ba6 <_printf_i+0x1ce>
 8007ba2:	6019      	str	r1, [r3, #0]
 8007ba4:	e002      	b.n	8007bac <_printf_i+0x1d4>
 8007ba6:	0670      	lsls	r0, r6, #25
 8007ba8:	d5fb      	bpl.n	8007ba2 <_printf_i+0x1ca>
 8007baa:	8019      	strh	r1, [r3, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	4615      	mov	r5, r2
 8007bb0:	6123      	str	r3, [r4, #16]
 8007bb2:	e7ba      	b.n	8007b2a <_printf_i+0x152>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	1d1a      	adds	r2, r3, #4
 8007bba:	602a      	str	r2, [r5, #0]
 8007bbc:	681d      	ldr	r5, [r3, #0]
 8007bbe:	6862      	ldr	r2, [r4, #4]
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 ff79 	bl	8008ab8 <memchr>
 8007bc6:	b108      	cbz	r0, 8007bcc <_printf_i+0x1f4>
 8007bc8:	1b40      	subs	r0, r0, r5
 8007bca:	6060      	str	r0, [r4, #4]
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bd6:	e7a8      	b.n	8007b2a <_printf_i+0x152>
 8007bd8:	462a      	mov	r2, r5
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4640      	mov	r0, r8
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	47d0      	blx	sl
 8007be2:	3001      	adds	r0, #1
 8007be4:	d0ab      	beq.n	8007b3e <_printf_i+0x166>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	079b      	lsls	r3, r3, #30
 8007bea:	d413      	bmi.n	8007c14 <_printf_i+0x23c>
 8007bec:	68e0      	ldr	r0, [r4, #12]
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	4298      	cmp	r0, r3
 8007bf2:	bfb8      	it	lt
 8007bf4:	4618      	movlt	r0, r3
 8007bf6:	e7a4      	b.n	8007b42 <_printf_i+0x16a>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	4640      	mov	r0, r8
 8007c00:	47d0      	blx	sl
 8007c02:	3001      	adds	r0, #1
 8007c04:	d09b      	beq.n	8007b3e <_printf_i+0x166>
 8007c06:	3501      	adds	r5, #1
 8007c08:	68e3      	ldr	r3, [r4, #12]
 8007c0a:	9903      	ldr	r1, [sp, #12]
 8007c0c:	1a5b      	subs	r3, r3, r1
 8007c0e:	42ab      	cmp	r3, r5
 8007c10:	dcf2      	bgt.n	8007bf8 <_printf_i+0x220>
 8007c12:	e7eb      	b.n	8007bec <_printf_i+0x214>
 8007c14:	2500      	movs	r5, #0
 8007c16:	f104 0619 	add.w	r6, r4, #25
 8007c1a:	e7f5      	b.n	8007c08 <_printf_i+0x230>
 8007c1c:	0800a3c6 	.word	0x0800a3c6
 8007c20:	0800a3d7 	.word	0x0800a3d7

08007c24 <siprintf>:
 8007c24:	b40e      	push	{r1, r2, r3}
 8007c26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c2a:	b500      	push	{lr}
 8007c2c:	b09c      	sub	sp, #112	; 0x70
 8007c2e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c30:	9002      	str	r0, [sp, #8]
 8007c32:	9006      	str	r0, [sp, #24]
 8007c34:	9107      	str	r1, [sp, #28]
 8007c36:	9104      	str	r1, [sp, #16]
 8007c38:	4808      	ldr	r0, [pc, #32]	; (8007c5c <siprintf+0x38>)
 8007c3a:	4909      	ldr	r1, [pc, #36]	; (8007c60 <siprintf+0x3c>)
 8007c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c40:	9105      	str	r1, [sp, #20]
 8007c42:	6800      	ldr	r0, [r0, #0]
 8007c44:	a902      	add	r1, sp, #8
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	f001 fc12 	bl	8009470 <_svfiprintf_r>
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	701a      	strb	r2, [r3, #0]
 8007c52:	b01c      	add	sp, #112	; 0x70
 8007c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c58:	b003      	add	sp, #12
 8007c5a:	4770      	bx	lr
 8007c5c:	2000006c 	.word	0x2000006c
 8007c60:	ffff0208 	.word	0xffff0208

08007c64 <strstr>:
 8007c64:	780a      	ldrb	r2, [r1, #0]
 8007c66:	b570      	push	{r4, r5, r6, lr}
 8007c68:	b96a      	cbnz	r2, 8007c86 <strstr+0x22>
 8007c6a:	bd70      	pop	{r4, r5, r6, pc}
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d109      	bne.n	8007c84 <strstr+0x20>
 8007c70:	460c      	mov	r4, r1
 8007c72:	4605      	mov	r5, r0
 8007c74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f6      	beq.n	8007c6a <strstr+0x6>
 8007c7c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007c80:	429e      	cmp	r6, r3
 8007c82:	d0f7      	beq.n	8007c74 <strstr+0x10>
 8007c84:	3001      	adds	r0, #1
 8007c86:	7803      	ldrb	r3, [r0, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1ef      	bne.n	8007c6c <strstr+0x8>
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	e7ec      	b.n	8007c6a <strstr+0x6>

08007c90 <strtok>:
 8007c90:	4b16      	ldr	r3, [pc, #88]	; (8007cec <strtok+0x5c>)
 8007c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c96:	681f      	ldr	r7, [r3, #0]
 8007c98:	4605      	mov	r5, r0
 8007c9a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007c9c:	460e      	mov	r6, r1
 8007c9e:	b9ec      	cbnz	r4, 8007cdc <strtok+0x4c>
 8007ca0:	2050      	movs	r0, #80	; 0x50
 8007ca2:	f000 ff01 	bl	8008aa8 <malloc>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	65b8      	str	r0, [r7, #88]	; 0x58
 8007caa:	b920      	cbnz	r0, 8007cb6 <strtok+0x26>
 8007cac:	2157      	movs	r1, #87	; 0x57
 8007cae:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <strtok+0x60>)
 8007cb0:	4810      	ldr	r0, [pc, #64]	; (8007cf4 <strtok+0x64>)
 8007cb2:	f000 f849 	bl	8007d48 <__assert_func>
 8007cb6:	e9c0 4400 	strd	r4, r4, [r0]
 8007cba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007cbe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007cc2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007cc6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007cca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007cce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007cd2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007cd6:	6184      	str	r4, [r0, #24]
 8007cd8:	7704      	strb	r4, [r0, #28]
 8007cda:	6244      	str	r4, [r0, #36]	; 0x24
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce8:	f000 b806 	b.w	8007cf8 <__strtok_r>
 8007cec:	2000006c 	.word	0x2000006c
 8007cf0:	0800a3e8 	.word	0x0800a3e8
 8007cf4:	0800a3ff 	.word	0x0800a3ff

08007cf8 <__strtok_r>:
 8007cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfa:	b908      	cbnz	r0, 8007d00 <__strtok_r+0x8>
 8007cfc:	6810      	ldr	r0, [r2, #0]
 8007cfe:	b188      	cbz	r0, 8007d24 <__strtok_r+0x2c>
 8007d00:	4604      	mov	r4, r0
 8007d02:	460f      	mov	r7, r1
 8007d04:	4620      	mov	r0, r4
 8007d06:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007d0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007d0e:	b91e      	cbnz	r6, 8007d18 <__strtok_r+0x20>
 8007d10:	b965      	cbnz	r5, 8007d2c <__strtok_r+0x34>
 8007d12:	4628      	mov	r0, r5
 8007d14:	6015      	str	r5, [r2, #0]
 8007d16:	e005      	b.n	8007d24 <__strtok_r+0x2c>
 8007d18:	42b5      	cmp	r5, r6
 8007d1a:	d1f6      	bne.n	8007d0a <__strtok_r+0x12>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1f0      	bne.n	8007d02 <__strtok_r+0xa>
 8007d20:	6014      	str	r4, [r2, #0]
 8007d22:	7003      	strb	r3, [r0, #0]
 8007d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d26:	461c      	mov	r4, r3
 8007d28:	e00c      	b.n	8007d44 <__strtok_r+0x4c>
 8007d2a:	b915      	cbnz	r5, 8007d32 <__strtok_r+0x3a>
 8007d2c:	460e      	mov	r6, r1
 8007d2e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007d36:	42ab      	cmp	r3, r5
 8007d38:	d1f7      	bne.n	8007d2a <__strtok_r+0x32>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0f3      	beq.n	8007d26 <__strtok_r+0x2e>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007d44:	6014      	str	r4, [r2, #0]
 8007d46:	e7ed      	b.n	8007d24 <__strtok_r+0x2c>

08007d48 <__assert_func>:
 8007d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <__assert_func+0x2c>)
 8007d50:	4605      	mov	r5, r0
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68d8      	ldr	r0, [r3, #12]
 8007d56:	b14c      	cbz	r4, 8007d6c <__assert_func+0x24>
 8007d58:	4b07      	ldr	r3, [pc, #28]	; (8007d78 <__assert_func+0x30>)
 8007d5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d5e:	9100      	str	r1, [sp, #0]
 8007d60:	462b      	mov	r3, r5
 8007d62:	4906      	ldr	r1, [pc, #24]	; (8007d7c <__assert_func+0x34>)
 8007d64:	f000 fe8a 	bl	8008a7c <fiprintf>
 8007d68:	f001 feaa 	bl	8009ac0 <abort>
 8007d6c:	4b04      	ldr	r3, [pc, #16]	; (8007d80 <__assert_func+0x38>)
 8007d6e:	461c      	mov	r4, r3
 8007d70:	e7f3      	b.n	8007d5a <__assert_func+0x12>
 8007d72:	bf00      	nop
 8007d74:	2000006c 	.word	0x2000006c
 8007d78:	0800a45c 	.word	0x0800a45c
 8007d7c:	0800a469 	.word	0x0800a469
 8007d80:	0800a497 	.word	0x0800a497

08007d84 <quorem>:
 8007d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	6903      	ldr	r3, [r0, #16]
 8007d8a:	690c      	ldr	r4, [r1, #16]
 8007d8c:	4607      	mov	r7, r0
 8007d8e:	42a3      	cmp	r3, r4
 8007d90:	f2c0 8082 	blt.w	8007e98 <quorem+0x114>
 8007d94:	3c01      	subs	r4, #1
 8007d96:	f100 0514 	add.w	r5, r0, #20
 8007d9a:	f101 0814 	add.w	r8, r1, #20
 8007d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007da8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dac:	3301      	adds	r3, #1
 8007dae:	429a      	cmp	r2, r3
 8007db0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007db4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dbc:	d331      	bcc.n	8007e22 <quorem+0x9e>
 8007dbe:	f04f 0e00 	mov.w	lr, #0
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	46ac      	mov	ip, r5
 8007dc6:	46f2      	mov	sl, lr
 8007dc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007dcc:	b293      	uxth	r3, r2
 8007dce:	fb06 e303 	mla	r3, r6, r3, lr
 8007dd2:	0c12      	lsrs	r2, r2, #16
 8007dd4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	fb06 e202 	mla	r2, r6, r2, lr
 8007dde:	ebaa 0303 	sub.w	r3, sl, r3
 8007de2:	f8dc a000 	ldr.w	sl, [ip]
 8007de6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dea:	fa1f fa8a 	uxth.w	sl, sl
 8007dee:	4453      	add	r3, sl
 8007df0:	f8dc a000 	ldr.w	sl, [ip]
 8007df4:	b292      	uxth	r2, r2
 8007df6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e04:	4581      	cmp	r9, r0
 8007e06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8007e0e:	d2db      	bcs.n	8007dc8 <quorem+0x44>
 8007e10:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e14:	b92b      	cbnz	r3, 8007e22 <quorem+0x9e>
 8007e16:	9b01      	ldr	r3, [sp, #4]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	429d      	cmp	r5, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	d32f      	bcc.n	8007e80 <quorem+0xfc>
 8007e20:	613c      	str	r4, [r7, #16]
 8007e22:	4638      	mov	r0, r7
 8007e24:	f001 f8d4 	bl	8008fd0 <__mcmp>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	db25      	blt.n	8007e78 <quorem+0xf4>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	f04f 0c00 	mov.w	ip, #0
 8007e32:	3601      	adds	r6, #1
 8007e34:	f858 1b04 	ldr.w	r1, [r8], #4
 8007e38:	f8d0 e000 	ldr.w	lr, [r0]
 8007e3c:	b28b      	uxth	r3, r1
 8007e3e:	ebac 0303 	sub.w	r3, ip, r3
 8007e42:	fa1f f28e 	uxth.w	r2, lr
 8007e46:	4413      	add	r3, r2
 8007e48:	0c0a      	lsrs	r2, r1, #16
 8007e4a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e58:	45c1      	cmp	r9, r8
 8007e5a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e5e:	f840 3b04 	str.w	r3, [r0], #4
 8007e62:	d2e7      	bcs.n	8007e34 <quorem+0xb0>
 8007e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e6c:	b922      	cbnz	r2, 8007e78 <quorem+0xf4>
 8007e6e:	3b04      	subs	r3, #4
 8007e70:	429d      	cmp	r5, r3
 8007e72:	461a      	mov	r2, r3
 8007e74:	d30a      	bcc.n	8007e8c <quorem+0x108>
 8007e76:	613c      	str	r4, [r7, #16]
 8007e78:	4630      	mov	r0, r6
 8007e7a:	b003      	add	sp, #12
 8007e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e80:	6812      	ldr	r2, [r2, #0]
 8007e82:	3b04      	subs	r3, #4
 8007e84:	2a00      	cmp	r2, #0
 8007e86:	d1cb      	bne.n	8007e20 <quorem+0x9c>
 8007e88:	3c01      	subs	r4, #1
 8007e8a:	e7c6      	b.n	8007e1a <quorem+0x96>
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	3b04      	subs	r3, #4
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	d1f0      	bne.n	8007e76 <quorem+0xf2>
 8007e94:	3c01      	subs	r4, #1
 8007e96:	e7eb      	b.n	8007e70 <quorem+0xec>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	e7ee      	b.n	8007e7a <quorem+0xf6>
 8007e9c:	0000      	movs	r0, r0
	...

08007ea0 <_dtoa_r>:
 8007ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	461f      	mov	r7, r3
 8007ea8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007eaa:	b099      	sub	sp, #100	; 0x64
 8007eac:	4605      	mov	r5, r0
 8007eae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007eb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007eb6:	b974      	cbnz	r4, 8007ed6 <_dtoa_r+0x36>
 8007eb8:	2010      	movs	r0, #16
 8007eba:	f000 fdf5 	bl	8008aa8 <malloc>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	6268      	str	r0, [r5, #36]	; 0x24
 8007ec2:	b920      	cbnz	r0, 8007ece <_dtoa_r+0x2e>
 8007ec4:	21ea      	movs	r1, #234	; 0xea
 8007ec6:	4ba8      	ldr	r3, [pc, #672]	; (8008168 <_dtoa_r+0x2c8>)
 8007ec8:	48a8      	ldr	r0, [pc, #672]	; (800816c <_dtoa_r+0x2cc>)
 8007eca:	f7ff ff3d 	bl	8007d48 <__assert_func>
 8007ece:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ed2:	6004      	str	r4, [r0, #0]
 8007ed4:	60c4      	str	r4, [r0, #12]
 8007ed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	b151      	cbz	r1, 8007ef2 <_dtoa_r+0x52>
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4093      	lsls	r3, r2
 8007ee2:	604a      	str	r2, [r1, #4]
 8007ee4:	608b      	str	r3, [r1, #8]
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 fe34 	bl	8008b54 <_Bfree>
 8007eec:	2200      	movs	r2, #0
 8007eee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	1e3b      	subs	r3, r7, #0
 8007ef4:	bfaf      	iteee	ge
 8007ef6:	2300      	movge	r3, #0
 8007ef8:	2201      	movlt	r2, #1
 8007efa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007efe:	9305      	strlt	r3, [sp, #20]
 8007f00:	bfa8      	it	ge
 8007f02:	f8c8 3000 	strge.w	r3, [r8]
 8007f06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007f0a:	4b99      	ldr	r3, [pc, #612]	; (8008170 <_dtoa_r+0x2d0>)
 8007f0c:	bfb8      	it	lt
 8007f0e:	f8c8 2000 	strlt.w	r2, [r8]
 8007f12:	ea33 0309 	bics.w	r3, r3, r9
 8007f16:	d119      	bne.n	8007f4c <_dtoa_r+0xac>
 8007f18:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f1e:	6013      	str	r3, [r2, #0]
 8007f20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f24:	4333      	orrs	r3, r6
 8007f26:	f000 857f 	beq.w	8008a28 <_dtoa_r+0xb88>
 8007f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f2c:	b953      	cbnz	r3, 8007f44 <_dtoa_r+0xa4>
 8007f2e:	4b91      	ldr	r3, [pc, #580]	; (8008174 <_dtoa_r+0x2d4>)
 8007f30:	e022      	b.n	8007f78 <_dtoa_r+0xd8>
 8007f32:	4b91      	ldr	r3, [pc, #580]	; (8008178 <_dtoa_r+0x2d8>)
 8007f34:	9303      	str	r3, [sp, #12]
 8007f36:	3308      	adds	r3, #8
 8007f38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	9803      	ldr	r0, [sp, #12]
 8007f3e:	b019      	add	sp, #100	; 0x64
 8007f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f44:	4b8b      	ldr	r3, [pc, #556]	; (8008174 <_dtoa_r+0x2d4>)
 8007f46:	9303      	str	r3, [sp, #12]
 8007f48:	3303      	adds	r3, #3
 8007f4a:	e7f5      	b.n	8007f38 <_dtoa_r+0x98>
 8007f4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007f54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f58:	2200      	movs	r2, #0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f7f8 fd24 	bl	80009a8 <__aeabi_dcmpeq>
 8007f60:	4680      	mov	r8, r0
 8007f62:	b158      	cbz	r0, 8007f7c <_dtoa_r+0xdc>
 8007f64:	2301      	movs	r3, #1
 8007f66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 8558 	beq.w	8008a22 <_dtoa_r+0xb82>
 8007f72:	4882      	ldr	r0, [pc, #520]	; (800817c <_dtoa_r+0x2dc>)
 8007f74:	6018      	str	r0, [r3, #0]
 8007f76:	1e43      	subs	r3, r0, #1
 8007f78:	9303      	str	r3, [sp, #12]
 8007f7a:	e7df      	b.n	8007f3c <_dtoa_r+0x9c>
 8007f7c:	ab16      	add	r3, sp, #88	; 0x58
 8007f7e:	9301      	str	r3, [sp, #4]
 8007f80:	ab17      	add	r3, sp, #92	; 0x5c
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4628      	mov	r0, r5
 8007f86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f8a:	f001 f8c9 	bl	8009120 <__d2b>
 8007f8e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f92:	4683      	mov	fp, r0
 8007f94:	2c00      	cmp	r4, #0
 8007f96:	d07f      	beq.n	8008098 <_dtoa_r+0x1f8>
 8007f98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f9e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fa6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007faa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007fae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	4b72      	ldr	r3, [pc, #456]	; (8008180 <_dtoa_r+0x2e0>)
 8007fb6:	f7f8 f8d7 	bl	8000168 <__aeabi_dsub>
 8007fba:	a365      	add	r3, pc, #404	; (adr r3, 8008150 <_dtoa_r+0x2b0>)
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f7f8 fa8a 	bl	80004d8 <__aeabi_dmul>
 8007fc4:	a364      	add	r3, pc, #400	; (adr r3, 8008158 <_dtoa_r+0x2b8>)
 8007fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fca:	f7f8 f8cf 	bl	800016c <__adddf3>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	460f      	mov	r7, r1
 8007fd4:	f7f8 fa16 	bl	8000404 <__aeabi_i2d>
 8007fd8:	a361      	add	r3, pc, #388	; (adr r3, 8008160 <_dtoa_r+0x2c0>)
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 fa7b 	bl	80004d8 <__aeabi_dmul>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 f8bf 	bl	800016c <__adddf3>
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460f      	mov	r7, r1
 8007ff2:	f7f8 fd21 	bl	8000a38 <__aeabi_d2iz>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4682      	mov	sl, r0
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	4639      	mov	r1, r7
 8008000:	f7f8 fcdc 	bl	80009bc <__aeabi_dcmplt>
 8008004:	b148      	cbz	r0, 800801a <_dtoa_r+0x17a>
 8008006:	4650      	mov	r0, sl
 8008008:	f7f8 f9fc 	bl	8000404 <__aeabi_i2d>
 800800c:	4632      	mov	r2, r6
 800800e:	463b      	mov	r3, r7
 8008010:	f7f8 fcca 	bl	80009a8 <__aeabi_dcmpeq>
 8008014:	b908      	cbnz	r0, 800801a <_dtoa_r+0x17a>
 8008016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800801a:	f1ba 0f16 	cmp.w	sl, #22
 800801e:	d858      	bhi.n	80080d2 <_dtoa_r+0x232>
 8008020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008024:	4b57      	ldr	r3, [pc, #348]	; (8008184 <_dtoa_r+0x2e4>)
 8008026:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	f7f8 fcc5 	bl	80009bc <__aeabi_dcmplt>
 8008032:	2800      	cmp	r0, #0
 8008034:	d04f      	beq.n	80080d6 <_dtoa_r+0x236>
 8008036:	2300      	movs	r3, #0
 8008038:	f10a 3aff 	add.w	sl, sl, #4294967295
 800803c:	930f      	str	r3, [sp, #60]	; 0x3c
 800803e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008040:	1b1c      	subs	r4, r3, r4
 8008042:	1e63      	subs	r3, r4, #1
 8008044:	9309      	str	r3, [sp, #36]	; 0x24
 8008046:	bf49      	itett	mi
 8008048:	f1c4 0301 	rsbmi	r3, r4, #1
 800804c:	2300      	movpl	r3, #0
 800804e:	9306      	strmi	r3, [sp, #24]
 8008050:	2300      	movmi	r3, #0
 8008052:	bf54      	ite	pl
 8008054:	9306      	strpl	r3, [sp, #24]
 8008056:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008058:	f1ba 0f00 	cmp.w	sl, #0
 800805c:	db3d      	blt.n	80080da <_dtoa_r+0x23a>
 800805e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008060:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008064:	4453      	add	r3, sl
 8008066:	9309      	str	r3, [sp, #36]	; 0x24
 8008068:	2300      	movs	r3, #0
 800806a:	930a      	str	r3, [sp, #40]	; 0x28
 800806c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800806e:	2b09      	cmp	r3, #9
 8008070:	f200 808c 	bhi.w	800818c <_dtoa_r+0x2ec>
 8008074:	2b05      	cmp	r3, #5
 8008076:	bfc4      	itt	gt
 8008078:	3b04      	subgt	r3, #4
 800807a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800807c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800807e:	bfc8      	it	gt
 8008080:	2400      	movgt	r4, #0
 8008082:	f1a3 0302 	sub.w	r3, r3, #2
 8008086:	bfd8      	it	le
 8008088:	2401      	movle	r4, #1
 800808a:	2b03      	cmp	r3, #3
 800808c:	f200 808a 	bhi.w	80081a4 <_dtoa_r+0x304>
 8008090:	e8df f003 	tbb	[pc, r3]
 8008094:	5b4d4f2d 	.word	0x5b4d4f2d
 8008098:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800809c:	441c      	add	r4, r3
 800809e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	bfc3      	ittte	gt
 80080a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080aa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80080ae:	fa09 f303 	lslgt.w	r3, r9, r3
 80080b2:	f1c3 0320 	rsble	r3, r3, #32
 80080b6:	bfc6      	itte	gt
 80080b8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080bc:	4318      	orrgt	r0, r3
 80080be:	fa06 f003 	lslle.w	r0, r6, r3
 80080c2:	f7f8 f98f 	bl	80003e4 <__aeabi_ui2d>
 80080c6:	2301      	movs	r3, #1
 80080c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80080cc:	3c01      	subs	r4, #1
 80080ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80080d0:	e76f      	b.n	8007fb2 <_dtoa_r+0x112>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e7b2      	b.n	800803c <_dtoa_r+0x19c>
 80080d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80080d8:	e7b1      	b.n	800803e <_dtoa_r+0x19e>
 80080da:	9b06      	ldr	r3, [sp, #24]
 80080dc:	eba3 030a 	sub.w	r3, r3, sl
 80080e0:	9306      	str	r3, [sp, #24]
 80080e2:	f1ca 0300 	rsb	r3, sl, #0
 80080e6:	930a      	str	r3, [sp, #40]	; 0x28
 80080e8:	2300      	movs	r3, #0
 80080ea:	930e      	str	r3, [sp, #56]	; 0x38
 80080ec:	e7be      	b.n	800806c <_dtoa_r+0x1cc>
 80080ee:	2300      	movs	r3, #0
 80080f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80080f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	dc58      	bgt.n	80081aa <_dtoa_r+0x30a>
 80080f8:	f04f 0901 	mov.w	r9, #1
 80080fc:	464b      	mov	r3, r9
 80080fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8008102:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008106:	2200      	movs	r2, #0
 8008108:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800810a:	6042      	str	r2, [r0, #4]
 800810c:	2204      	movs	r2, #4
 800810e:	f102 0614 	add.w	r6, r2, #20
 8008112:	429e      	cmp	r6, r3
 8008114:	6841      	ldr	r1, [r0, #4]
 8008116:	d94e      	bls.n	80081b6 <_dtoa_r+0x316>
 8008118:	4628      	mov	r0, r5
 800811a:	f000 fcdb 	bl	8008ad4 <_Balloc>
 800811e:	9003      	str	r0, [sp, #12]
 8008120:	2800      	cmp	r0, #0
 8008122:	d14c      	bne.n	80081be <_dtoa_r+0x31e>
 8008124:	4602      	mov	r2, r0
 8008126:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800812a:	4b17      	ldr	r3, [pc, #92]	; (8008188 <_dtoa_r+0x2e8>)
 800812c:	e6cc      	b.n	8007ec8 <_dtoa_r+0x28>
 800812e:	2301      	movs	r3, #1
 8008130:	e7de      	b.n	80080f0 <_dtoa_r+0x250>
 8008132:	2300      	movs	r3, #0
 8008134:	930b      	str	r3, [sp, #44]	; 0x2c
 8008136:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008138:	eb0a 0903 	add.w	r9, sl, r3
 800813c:	f109 0301 	add.w	r3, r9, #1
 8008140:	2b01      	cmp	r3, #1
 8008142:	9308      	str	r3, [sp, #32]
 8008144:	bfb8      	it	lt
 8008146:	2301      	movlt	r3, #1
 8008148:	e7dd      	b.n	8008106 <_dtoa_r+0x266>
 800814a:	2301      	movs	r3, #1
 800814c:	e7f2      	b.n	8008134 <_dtoa_r+0x294>
 800814e:	bf00      	nop
 8008150:	636f4361 	.word	0x636f4361
 8008154:	3fd287a7 	.word	0x3fd287a7
 8008158:	8b60c8b3 	.word	0x8b60c8b3
 800815c:	3fc68a28 	.word	0x3fc68a28
 8008160:	509f79fb 	.word	0x509f79fb
 8008164:	3fd34413 	.word	0x3fd34413
 8008168:	0800a3e8 	.word	0x0800a3e8
 800816c:	0800a4a5 	.word	0x0800a4a5
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	0800a4a1 	.word	0x0800a4a1
 8008178:	0800a498 	.word	0x0800a498
 800817c:	0800a3c5 	.word	0x0800a3c5
 8008180:	3ff80000 	.word	0x3ff80000
 8008184:	0800a598 	.word	0x0800a598
 8008188:	0800a500 	.word	0x0800a500
 800818c:	2401      	movs	r4, #1
 800818e:	2300      	movs	r3, #0
 8008190:	940b      	str	r4, [sp, #44]	; 0x2c
 8008192:	9322      	str	r3, [sp, #136]	; 0x88
 8008194:	f04f 39ff 	mov.w	r9, #4294967295
 8008198:	2200      	movs	r2, #0
 800819a:	2312      	movs	r3, #18
 800819c:	f8cd 9020 	str.w	r9, [sp, #32]
 80081a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80081a2:	e7b0      	b.n	8008106 <_dtoa_r+0x266>
 80081a4:	2301      	movs	r3, #1
 80081a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80081a8:	e7f4      	b.n	8008194 <_dtoa_r+0x2f4>
 80081aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80081ae:	464b      	mov	r3, r9
 80081b0:	f8cd 9020 	str.w	r9, [sp, #32]
 80081b4:	e7a7      	b.n	8008106 <_dtoa_r+0x266>
 80081b6:	3101      	adds	r1, #1
 80081b8:	6041      	str	r1, [r0, #4]
 80081ba:	0052      	lsls	r2, r2, #1
 80081bc:	e7a7      	b.n	800810e <_dtoa_r+0x26e>
 80081be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081c0:	9a03      	ldr	r2, [sp, #12]
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	9b08      	ldr	r3, [sp, #32]
 80081c6:	2b0e      	cmp	r3, #14
 80081c8:	f200 80a8 	bhi.w	800831c <_dtoa_r+0x47c>
 80081cc:	2c00      	cmp	r4, #0
 80081ce:	f000 80a5 	beq.w	800831c <_dtoa_r+0x47c>
 80081d2:	f1ba 0f00 	cmp.w	sl, #0
 80081d6:	dd34      	ble.n	8008242 <_dtoa_r+0x3a2>
 80081d8:	4a9a      	ldr	r2, [pc, #616]	; (8008444 <_dtoa_r+0x5a4>)
 80081da:	f00a 030f 	and.w	r3, sl, #15
 80081de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081e2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80081e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80081ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80081f2:	d016      	beq.n	8008222 <_dtoa_r+0x382>
 80081f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081f8:	4b93      	ldr	r3, [pc, #588]	; (8008448 <_dtoa_r+0x5a8>)
 80081fa:	2703      	movs	r7, #3
 80081fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008200:	f7f8 fa94 	bl	800072c <__aeabi_ddiv>
 8008204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008208:	f004 040f 	and.w	r4, r4, #15
 800820c:	4e8e      	ldr	r6, [pc, #568]	; (8008448 <_dtoa_r+0x5a8>)
 800820e:	b954      	cbnz	r4, 8008226 <_dtoa_r+0x386>
 8008210:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008218:	f7f8 fa88 	bl	800072c <__aeabi_ddiv>
 800821c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008220:	e029      	b.n	8008276 <_dtoa_r+0x3d6>
 8008222:	2702      	movs	r7, #2
 8008224:	e7f2      	b.n	800820c <_dtoa_r+0x36c>
 8008226:	07e1      	lsls	r1, r4, #31
 8008228:	d508      	bpl.n	800823c <_dtoa_r+0x39c>
 800822a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800822e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008232:	f7f8 f951 	bl	80004d8 <__aeabi_dmul>
 8008236:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800823a:	3701      	adds	r7, #1
 800823c:	1064      	asrs	r4, r4, #1
 800823e:	3608      	adds	r6, #8
 8008240:	e7e5      	b.n	800820e <_dtoa_r+0x36e>
 8008242:	f000 80a5 	beq.w	8008390 <_dtoa_r+0x4f0>
 8008246:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800824a:	f1ca 0400 	rsb	r4, sl, #0
 800824e:	4b7d      	ldr	r3, [pc, #500]	; (8008444 <_dtoa_r+0x5a4>)
 8008250:	f004 020f 	and.w	r2, r4, #15
 8008254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825c:	f7f8 f93c 	bl	80004d8 <__aeabi_dmul>
 8008260:	2702      	movs	r7, #2
 8008262:	2300      	movs	r3, #0
 8008264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008268:	4e77      	ldr	r6, [pc, #476]	; (8008448 <_dtoa_r+0x5a8>)
 800826a:	1124      	asrs	r4, r4, #4
 800826c:	2c00      	cmp	r4, #0
 800826e:	f040 8084 	bne.w	800837a <_dtoa_r+0x4da>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1d2      	bne.n	800821c <_dtoa_r+0x37c>
 8008276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 808b 	beq.w	8008394 <_dtoa_r+0x4f4>
 800827e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008282:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008286:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800828a:	2200      	movs	r2, #0
 800828c:	4b6f      	ldr	r3, [pc, #444]	; (800844c <_dtoa_r+0x5ac>)
 800828e:	f7f8 fb95 	bl	80009bc <__aeabi_dcmplt>
 8008292:	2800      	cmp	r0, #0
 8008294:	d07e      	beq.n	8008394 <_dtoa_r+0x4f4>
 8008296:	9b08      	ldr	r3, [sp, #32]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d07b      	beq.n	8008394 <_dtoa_r+0x4f4>
 800829c:	f1b9 0f00 	cmp.w	r9, #0
 80082a0:	dd38      	ble.n	8008314 <_dtoa_r+0x474>
 80082a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082a6:	2200      	movs	r2, #0
 80082a8:	4b69      	ldr	r3, [pc, #420]	; (8008450 <_dtoa_r+0x5b0>)
 80082aa:	f7f8 f915 	bl	80004d8 <__aeabi_dmul>
 80082ae:	464c      	mov	r4, r9
 80082b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082b4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80082b8:	3701      	adds	r7, #1
 80082ba:	4638      	mov	r0, r7
 80082bc:	f7f8 f8a2 	bl	8000404 <__aeabi_i2d>
 80082c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082c4:	f7f8 f908 	bl	80004d8 <__aeabi_dmul>
 80082c8:	2200      	movs	r2, #0
 80082ca:	4b62      	ldr	r3, [pc, #392]	; (8008454 <_dtoa_r+0x5b4>)
 80082cc:	f7f7 ff4e 	bl	800016c <__adddf3>
 80082d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80082d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082d8:	9611      	str	r6, [sp, #68]	; 0x44
 80082da:	2c00      	cmp	r4, #0
 80082dc:	d15d      	bne.n	800839a <_dtoa_r+0x4fa>
 80082de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e2:	2200      	movs	r2, #0
 80082e4:	4b5c      	ldr	r3, [pc, #368]	; (8008458 <_dtoa_r+0x5b8>)
 80082e6:	f7f7 ff3f 	bl	8000168 <__aeabi_dsub>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082f2:	4633      	mov	r3, r6
 80082f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082f6:	f7f8 fb7f 	bl	80009f8 <__aeabi_dcmpgt>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f040 829c 	bne.w	8008838 <_dtoa_r+0x998>
 8008300:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008306:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800830a:	f7f8 fb57 	bl	80009bc <__aeabi_dcmplt>
 800830e:	2800      	cmp	r0, #0
 8008310:	f040 8290 	bne.w	8008834 <_dtoa_r+0x994>
 8008314:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008318:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800831c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800831e:	2b00      	cmp	r3, #0
 8008320:	f2c0 8152 	blt.w	80085c8 <_dtoa_r+0x728>
 8008324:	f1ba 0f0e 	cmp.w	sl, #14
 8008328:	f300 814e 	bgt.w	80085c8 <_dtoa_r+0x728>
 800832c:	4b45      	ldr	r3, [pc, #276]	; (8008444 <_dtoa_r+0x5a4>)
 800832e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008332:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008336:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800833a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800833c:	2b00      	cmp	r3, #0
 800833e:	f280 80db 	bge.w	80084f8 <_dtoa_r+0x658>
 8008342:	9b08      	ldr	r3, [sp, #32]
 8008344:	2b00      	cmp	r3, #0
 8008346:	f300 80d7 	bgt.w	80084f8 <_dtoa_r+0x658>
 800834a:	f040 8272 	bne.w	8008832 <_dtoa_r+0x992>
 800834e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008352:	2200      	movs	r2, #0
 8008354:	4b40      	ldr	r3, [pc, #256]	; (8008458 <_dtoa_r+0x5b8>)
 8008356:	f7f8 f8bf 	bl	80004d8 <__aeabi_dmul>
 800835a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800835e:	f7f8 fb41 	bl	80009e4 <__aeabi_dcmpge>
 8008362:	9c08      	ldr	r4, [sp, #32]
 8008364:	4626      	mov	r6, r4
 8008366:	2800      	cmp	r0, #0
 8008368:	f040 8248 	bne.w	80087fc <_dtoa_r+0x95c>
 800836c:	2331      	movs	r3, #49	; 0x31
 800836e:	9f03      	ldr	r7, [sp, #12]
 8008370:	f10a 0a01 	add.w	sl, sl, #1
 8008374:	f807 3b01 	strb.w	r3, [r7], #1
 8008378:	e244      	b.n	8008804 <_dtoa_r+0x964>
 800837a:	07e2      	lsls	r2, r4, #31
 800837c:	d505      	bpl.n	800838a <_dtoa_r+0x4ea>
 800837e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008382:	f7f8 f8a9 	bl	80004d8 <__aeabi_dmul>
 8008386:	2301      	movs	r3, #1
 8008388:	3701      	adds	r7, #1
 800838a:	1064      	asrs	r4, r4, #1
 800838c:	3608      	adds	r6, #8
 800838e:	e76d      	b.n	800826c <_dtoa_r+0x3cc>
 8008390:	2702      	movs	r7, #2
 8008392:	e770      	b.n	8008276 <_dtoa_r+0x3d6>
 8008394:	46d0      	mov	r8, sl
 8008396:	9c08      	ldr	r4, [sp, #32]
 8008398:	e78f      	b.n	80082ba <_dtoa_r+0x41a>
 800839a:	9903      	ldr	r1, [sp, #12]
 800839c:	4b29      	ldr	r3, [pc, #164]	; (8008444 <_dtoa_r+0x5a4>)
 800839e:	4421      	add	r1, r4
 80083a0:	9112      	str	r1, [sp, #72]	; 0x48
 80083a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80083ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083b0:	2900      	cmp	r1, #0
 80083b2:	d055      	beq.n	8008460 <_dtoa_r+0x5c0>
 80083b4:	2000      	movs	r0, #0
 80083b6:	4929      	ldr	r1, [pc, #164]	; (800845c <_dtoa_r+0x5bc>)
 80083b8:	f7f8 f9b8 	bl	800072c <__aeabi_ddiv>
 80083bc:	463b      	mov	r3, r7
 80083be:	4632      	mov	r2, r6
 80083c0:	f7f7 fed2 	bl	8000168 <__aeabi_dsub>
 80083c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083c8:	9f03      	ldr	r7, [sp, #12]
 80083ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ce:	f7f8 fb33 	bl	8000a38 <__aeabi_d2iz>
 80083d2:	4604      	mov	r4, r0
 80083d4:	f7f8 f816 	bl	8000404 <__aeabi_i2d>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083e0:	f7f7 fec2 	bl	8000168 <__aeabi_dsub>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	3430      	adds	r4, #48	; 0x30
 80083ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083f2:	f807 4b01 	strb.w	r4, [r7], #1
 80083f6:	f7f8 fae1 	bl	80009bc <__aeabi_dcmplt>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d174      	bne.n	80084e8 <_dtoa_r+0x648>
 80083fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008402:	2000      	movs	r0, #0
 8008404:	4911      	ldr	r1, [pc, #68]	; (800844c <_dtoa_r+0x5ac>)
 8008406:	f7f7 feaf 	bl	8000168 <__aeabi_dsub>
 800840a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800840e:	f7f8 fad5 	bl	80009bc <__aeabi_dcmplt>
 8008412:	2800      	cmp	r0, #0
 8008414:	f040 80b7 	bne.w	8008586 <_dtoa_r+0x6e6>
 8008418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800841a:	429f      	cmp	r7, r3
 800841c:	f43f af7a 	beq.w	8008314 <_dtoa_r+0x474>
 8008420:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008424:	2200      	movs	r2, #0
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <_dtoa_r+0x5b0>)
 8008428:	f7f8 f856 	bl	80004d8 <__aeabi_dmul>
 800842c:	2200      	movs	r2, #0
 800842e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008436:	4b06      	ldr	r3, [pc, #24]	; (8008450 <_dtoa_r+0x5b0>)
 8008438:	f7f8 f84e 	bl	80004d8 <__aeabi_dmul>
 800843c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008440:	e7c3      	b.n	80083ca <_dtoa_r+0x52a>
 8008442:	bf00      	nop
 8008444:	0800a598 	.word	0x0800a598
 8008448:	0800a570 	.word	0x0800a570
 800844c:	3ff00000 	.word	0x3ff00000
 8008450:	40240000 	.word	0x40240000
 8008454:	401c0000 	.word	0x401c0000
 8008458:	40140000 	.word	0x40140000
 800845c:	3fe00000 	.word	0x3fe00000
 8008460:	4630      	mov	r0, r6
 8008462:	4639      	mov	r1, r7
 8008464:	f7f8 f838 	bl	80004d8 <__aeabi_dmul>
 8008468:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800846a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800846e:	9c03      	ldr	r4, [sp, #12]
 8008470:	9314      	str	r3, [sp, #80]	; 0x50
 8008472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008476:	f7f8 fadf 	bl	8000a38 <__aeabi_d2iz>
 800847a:	9015      	str	r0, [sp, #84]	; 0x54
 800847c:	f7f7 ffc2 	bl	8000404 <__aeabi_i2d>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008488:	f7f7 fe6e 	bl	8000168 <__aeabi_dsub>
 800848c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800848e:	4606      	mov	r6, r0
 8008490:	3330      	adds	r3, #48	; 0x30
 8008492:	f804 3b01 	strb.w	r3, [r4], #1
 8008496:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008498:	460f      	mov	r7, r1
 800849a:	429c      	cmp	r4, r3
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	d124      	bne.n	80084ec <_dtoa_r+0x64c>
 80084a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084a6:	4bb0      	ldr	r3, [pc, #704]	; (8008768 <_dtoa_r+0x8c8>)
 80084a8:	f7f7 fe60 	bl	800016c <__adddf3>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4630      	mov	r0, r6
 80084b2:	4639      	mov	r1, r7
 80084b4:	f7f8 faa0 	bl	80009f8 <__aeabi_dcmpgt>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d163      	bne.n	8008584 <_dtoa_r+0x6e4>
 80084bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084c0:	2000      	movs	r0, #0
 80084c2:	49a9      	ldr	r1, [pc, #676]	; (8008768 <_dtoa_r+0x8c8>)
 80084c4:	f7f7 fe50 	bl	8000168 <__aeabi_dsub>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4630      	mov	r0, r6
 80084ce:	4639      	mov	r1, r7
 80084d0:	f7f8 fa74 	bl	80009bc <__aeabi_dcmplt>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	f43f af1d 	beq.w	8008314 <_dtoa_r+0x474>
 80084da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80084dc:	1e7b      	subs	r3, r7, #1
 80084de:	9314      	str	r3, [sp, #80]	; 0x50
 80084e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d0f8      	beq.n	80084da <_dtoa_r+0x63a>
 80084e8:	46c2      	mov	sl, r8
 80084ea:	e03b      	b.n	8008564 <_dtoa_r+0x6c4>
 80084ec:	4b9f      	ldr	r3, [pc, #636]	; (800876c <_dtoa_r+0x8cc>)
 80084ee:	f7f7 fff3 	bl	80004d8 <__aeabi_dmul>
 80084f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084f6:	e7bc      	b.n	8008472 <_dtoa_r+0x5d2>
 80084f8:	9f03      	ldr	r7, [sp, #12]
 80084fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80084fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f8 f911 	bl	800072c <__aeabi_ddiv>
 800850a:	f7f8 fa95 	bl	8000a38 <__aeabi_d2iz>
 800850e:	4604      	mov	r4, r0
 8008510:	f7f7 ff78 	bl	8000404 <__aeabi_i2d>
 8008514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008518:	f7f7 ffde 	bl	80004d8 <__aeabi_dmul>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	4640      	mov	r0, r8
 8008522:	4649      	mov	r1, r9
 8008524:	f7f7 fe20 	bl	8000168 <__aeabi_dsub>
 8008528:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800852c:	f807 6b01 	strb.w	r6, [r7], #1
 8008530:	9e03      	ldr	r6, [sp, #12]
 8008532:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008536:	1bbe      	subs	r6, r7, r6
 8008538:	45b4      	cmp	ip, r6
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	d136      	bne.n	80085ae <_dtoa_r+0x70e>
 8008540:	f7f7 fe14 	bl	800016c <__adddf3>
 8008544:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008548:	4680      	mov	r8, r0
 800854a:	4689      	mov	r9, r1
 800854c:	f7f8 fa54 	bl	80009f8 <__aeabi_dcmpgt>
 8008550:	bb58      	cbnz	r0, 80085aa <_dtoa_r+0x70a>
 8008552:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f8 fa25 	bl	80009a8 <__aeabi_dcmpeq>
 800855e:	b108      	cbz	r0, 8008564 <_dtoa_r+0x6c4>
 8008560:	07e1      	lsls	r1, r4, #31
 8008562:	d422      	bmi.n	80085aa <_dtoa_r+0x70a>
 8008564:	4628      	mov	r0, r5
 8008566:	4659      	mov	r1, fp
 8008568:	f000 faf4 	bl	8008b54 <_Bfree>
 800856c:	2300      	movs	r3, #0
 800856e:	703b      	strb	r3, [r7, #0]
 8008570:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008572:	f10a 0001 	add.w	r0, sl, #1
 8008576:	6018      	str	r0, [r3, #0]
 8008578:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800857a:	2b00      	cmp	r3, #0
 800857c:	f43f acde 	beq.w	8007f3c <_dtoa_r+0x9c>
 8008580:	601f      	str	r7, [r3, #0]
 8008582:	e4db      	b.n	8007f3c <_dtoa_r+0x9c>
 8008584:	4627      	mov	r7, r4
 8008586:	463b      	mov	r3, r7
 8008588:	461f      	mov	r7, r3
 800858a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800858e:	2a39      	cmp	r2, #57	; 0x39
 8008590:	d107      	bne.n	80085a2 <_dtoa_r+0x702>
 8008592:	9a03      	ldr	r2, [sp, #12]
 8008594:	429a      	cmp	r2, r3
 8008596:	d1f7      	bne.n	8008588 <_dtoa_r+0x6e8>
 8008598:	2230      	movs	r2, #48	; 0x30
 800859a:	9903      	ldr	r1, [sp, #12]
 800859c:	f108 0801 	add.w	r8, r8, #1
 80085a0:	700a      	strb	r2, [r1, #0]
 80085a2:	781a      	ldrb	r2, [r3, #0]
 80085a4:	3201      	adds	r2, #1
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e79e      	b.n	80084e8 <_dtoa_r+0x648>
 80085aa:	46d0      	mov	r8, sl
 80085ac:	e7eb      	b.n	8008586 <_dtoa_r+0x6e6>
 80085ae:	2200      	movs	r2, #0
 80085b0:	4b6e      	ldr	r3, [pc, #440]	; (800876c <_dtoa_r+0x8cc>)
 80085b2:	f7f7 ff91 	bl	80004d8 <__aeabi_dmul>
 80085b6:	2200      	movs	r2, #0
 80085b8:	2300      	movs	r3, #0
 80085ba:	4680      	mov	r8, r0
 80085bc:	4689      	mov	r9, r1
 80085be:	f7f8 f9f3 	bl	80009a8 <__aeabi_dcmpeq>
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d09b      	beq.n	80084fe <_dtoa_r+0x65e>
 80085c6:	e7cd      	b.n	8008564 <_dtoa_r+0x6c4>
 80085c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085ca:	2a00      	cmp	r2, #0
 80085cc:	f000 80d0 	beq.w	8008770 <_dtoa_r+0x8d0>
 80085d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80085d2:	2a01      	cmp	r2, #1
 80085d4:	f300 80ae 	bgt.w	8008734 <_dtoa_r+0x894>
 80085d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085da:	2a00      	cmp	r2, #0
 80085dc:	f000 80a6 	beq.w	800872c <_dtoa_r+0x88c>
 80085e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085e6:	9f06      	ldr	r7, [sp, #24]
 80085e8:	9a06      	ldr	r2, [sp, #24]
 80085ea:	2101      	movs	r1, #1
 80085ec:	441a      	add	r2, r3
 80085ee:	9206      	str	r2, [sp, #24]
 80085f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f2:	4628      	mov	r0, r5
 80085f4:	441a      	add	r2, r3
 80085f6:	9209      	str	r2, [sp, #36]	; 0x24
 80085f8:	f000 fb62 	bl	8008cc0 <__i2b>
 80085fc:	4606      	mov	r6, r0
 80085fe:	2f00      	cmp	r7, #0
 8008600:	dd0c      	ble.n	800861c <_dtoa_r+0x77c>
 8008602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008604:	2b00      	cmp	r3, #0
 8008606:	dd09      	ble.n	800861c <_dtoa_r+0x77c>
 8008608:	42bb      	cmp	r3, r7
 800860a:	bfa8      	it	ge
 800860c:	463b      	movge	r3, r7
 800860e:	9a06      	ldr	r2, [sp, #24]
 8008610:	1aff      	subs	r7, r7, r3
 8008612:	1ad2      	subs	r2, r2, r3
 8008614:	9206      	str	r2, [sp, #24]
 8008616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	9309      	str	r3, [sp, #36]	; 0x24
 800861c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861e:	b1f3      	cbz	r3, 800865e <_dtoa_r+0x7be>
 8008620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80a8 	beq.w	8008778 <_dtoa_r+0x8d8>
 8008628:	2c00      	cmp	r4, #0
 800862a:	dd10      	ble.n	800864e <_dtoa_r+0x7ae>
 800862c:	4631      	mov	r1, r6
 800862e:	4622      	mov	r2, r4
 8008630:	4628      	mov	r0, r5
 8008632:	f000 fc03 	bl	8008e3c <__pow5mult>
 8008636:	465a      	mov	r2, fp
 8008638:	4601      	mov	r1, r0
 800863a:	4606      	mov	r6, r0
 800863c:	4628      	mov	r0, r5
 800863e:	f000 fb55 	bl	8008cec <__multiply>
 8008642:	4680      	mov	r8, r0
 8008644:	4659      	mov	r1, fp
 8008646:	4628      	mov	r0, r5
 8008648:	f000 fa84 	bl	8008b54 <_Bfree>
 800864c:	46c3      	mov	fp, r8
 800864e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008650:	1b1a      	subs	r2, r3, r4
 8008652:	d004      	beq.n	800865e <_dtoa_r+0x7be>
 8008654:	4659      	mov	r1, fp
 8008656:	4628      	mov	r0, r5
 8008658:	f000 fbf0 	bl	8008e3c <__pow5mult>
 800865c:	4683      	mov	fp, r0
 800865e:	2101      	movs	r1, #1
 8008660:	4628      	mov	r0, r5
 8008662:	f000 fb2d 	bl	8008cc0 <__i2b>
 8008666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008668:	4604      	mov	r4, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	f340 8086 	ble.w	800877c <_dtoa_r+0x8dc>
 8008670:	461a      	mov	r2, r3
 8008672:	4601      	mov	r1, r0
 8008674:	4628      	mov	r0, r5
 8008676:	f000 fbe1 	bl	8008e3c <__pow5mult>
 800867a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800867c:	4604      	mov	r4, r0
 800867e:	2b01      	cmp	r3, #1
 8008680:	dd7f      	ble.n	8008782 <_dtoa_r+0x8e2>
 8008682:	f04f 0800 	mov.w	r8, #0
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800868c:	6918      	ldr	r0, [r3, #16]
 800868e:	f000 fac9 	bl	8008c24 <__hi0bits>
 8008692:	f1c0 0020 	rsb	r0, r0, #32
 8008696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008698:	4418      	add	r0, r3
 800869a:	f010 001f 	ands.w	r0, r0, #31
 800869e:	f000 8092 	beq.w	80087c6 <_dtoa_r+0x926>
 80086a2:	f1c0 0320 	rsb	r3, r0, #32
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	f340 808a 	ble.w	80087c0 <_dtoa_r+0x920>
 80086ac:	f1c0 001c 	rsb	r0, r0, #28
 80086b0:	9b06      	ldr	r3, [sp, #24]
 80086b2:	4407      	add	r7, r0
 80086b4:	4403      	add	r3, r0
 80086b6:	9306      	str	r3, [sp, #24]
 80086b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ba:	4403      	add	r3, r0
 80086bc:	9309      	str	r3, [sp, #36]	; 0x24
 80086be:	9b06      	ldr	r3, [sp, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	dd05      	ble.n	80086d0 <_dtoa_r+0x830>
 80086c4:	4659      	mov	r1, fp
 80086c6:	461a      	mov	r2, r3
 80086c8:	4628      	mov	r0, r5
 80086ca:	f000 fc11 	bl	8008ef0 <__lshift>
 80086ce:	4683      	mov	fp, r0
 80086d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	dd05      	ble.n	80086e2 <_dtoa_r+0x842>
 80086d6:	4621      	mov	r1, r4
 80086d8:	461a      	mov	r2, r3
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 fc08 	bl	8008ef0 <__lshift>
 80086e0:	4604      	mov	r4, r0
 80086e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d070      	beq.n	80087ca <_dtoa_r+0x92a>
 80086e8:	4621      	mov	r1, r4
 80086ea:	4658      	mov	r0, fp
 80086ec:	f000 fc70 	bl	8008fd0 <__mcmp>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	da6a      	bge.n	80087ca <_dtoa_r+0x92a>
 80086f4:	2300      	movs	r3, #0
 80086f6:	4659      	mov	r1, fp
 80086f8:	220a      	movs	r2, #10
 80086fa:	4628      	mov	r0, r5
 80086fc:	f000 fa4c 	bl	8008b98 <__multadd>
 8008700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008702:	4683      	mov	fp, r0
 8008704:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8194 	beq.w	8008a36 <_dtoa_r+0xb96>
 800870e:	4631      	mov	r1, r6
 8008710:	2300      	movs	r3, #0
 8008712:	220a      	movs	r2, #10
 8008714:	4628      	mov	r0, r5
 8008716:	f000 fa3f 	bl	8008b98 <__multadd>
 800871a:	f1b9 0f00 	cmp.w	r9, #0
 800871e:	4606      	mov	r6, r0
 8008720:	f300 8093 	bgt.w	800884a <_dtoa_r+0x9aa>
 8008724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008726:	2b02      	cmp	r3, #2
 8008728:	dc57      	bgt.n	80087da <_dtoa_r+0x93a>
 800872a:	e08e      	b.n	800884a <_dtoa_r+0x9aa>
 800872c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800872e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008732:	e757      	b.n	80085e4 <_dtoa_r+0x744>
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	1e5c      	subs	r4, r3, #1
 8008738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873a:	42a3      	cmp	r3, r4
 800873c:	bfb7      	itett	lt
 800873e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008740:	1b1c      	subge	r4, r3, r4
 8008742:	1ae2      	sublt	r2, r4, r3
 8008744:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008746:	bfbe      	ittt	lt
 8008748:	940a      	strlt	r4, [sp, #40]	; 0x28
 800874a:	189b      	addlt	r3, r3, r2
 800874c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800874e:	9b08      	ldr	r3, [sp, #32]
 8008750:	bfb8      	it	lt
 8008752:	2400      	movlt	r4, #0
 8008754:	2b00      	cmp	r3, #0
 8008756:	bfbb      	ittet	lt
 8008758:	9b06      	ldrlt	r3, [sp, #24]
 800875a:	9a08      	ldrlt	r2, [sp, #32]
 800875c:	9f06      	ldrge	r7, [sp, #24]
 800875e:	1a9f      	sublt	r7, r3, r2
 8008760:	bfac      	ite	ge
 8008762:	9b08      	ldrge	r3, [sp, #32]
 8008764:	2300      	movlt	r3, #0
 8008766:	e73f      	b.n	80085e8 <_dtoa_r+0x748>
 8008768:	3fe00000 	.word	0x3fe00000
 800876c:	40240000 	.word	0x40240000
 8008770:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008772:	9f06      	ldr	r7, [sp, #24]
 8008774:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008776:	e742      	b.n	80085fe <_dtoa_r+0x75e>
 8008778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800877a:	e76b      	b.n	8008654 <_dtoa_r+0x7b4>
 800877c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800877e:	2b01      	cmp	r3, #1
 8008780:	dc19      	bgt.n	80087b6 <_dtoa_r+0x916>
 8008782:	9b04      	ldr	r3, [sp, #16]
 8008784:	b9bb      	cbnz	r3, 80087b6 <_dtoa_r+0x916>
 8008786:	9b05      	ldr	r3, [sp, #20]
 8008788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800878c:	b99b      	cbnz	r3, 80087b6 <_dtoa_r+0x916>
 800878e:	9b05      	ldr	r3, [sp, #20]
 8008790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008794:	0d1b      	lsrs	r3, r3, #20
 8008796:	051b      	lsls	r3, r3, #20
 8008798:	b183      	cbz	r3, 80087bc <_dtoa_r+0x91c>
 800879a:	f04f 0801 	mov.w	r8, #1
 800879e:	9b06      	ldr	r3, [sp, #24]
 80087a0:	3301      	adds	r3, #1
 80087a2:	9306      	str	r3, [sp, #24]
 80087a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a6:	3301      	adds	r3, #1
 80087a8:	9309      	str	r3, [sp, #36]	; 0x24
 80087aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f47f af6a 	bne.w	8008686 <_dtoa_r+0x7e6>
 80087b2:	2001      	movs	r0, #1
 80087b4:	e76f      	b.n	8008696 <_dtoa_r+0x7f6>
 80087b6:	f04f 0800 	mov.w	r8, #0
 80087ba:	e7f6      	b.n	80087aa <_dtoa_r+0x90a>
 80087bc:	4698      	mov	r8, r3
 80087be:	e7f4      	b.n	80087aa <_dtoa_r+0x90a>
 80087c0:	f43f af7d 	beq.w	80086be <_dtoa_r+0x81e>
 80087c4:	4618      	mov	r0, r3
 80087c6:	301c      	adds	r0, #28
 80087c8:	e772      	b.n	80086b0 <_dtoa_r+0x810>
 80087ca:	9b08      	ldr	r3, [sp, #32]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dc36      	bgt.n	800883e <_dtoa_r+0x99e>
 80087d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	dd33      	ble.n	800883e <_dtoa_r+0x99e>
 80087d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087da:	f1b9 0f00 	cmp.w	r9, #0
 80087de:	d10d      	bne.n	80087fc <_dtoa_r+0x95c>
 80087e0:	4621      	mov	r1, r4
 80087e2:	464b      	mov	r3, r9
 80087e4:	2205      	movs	r2, #5
 80087e6:	4628      	mov	r0, r5
 80087e8:	f000 f9d6 	bl	8008b98 <__multadd>
 80087ec:	4601      	mov	r1, r0
 80087ee:	4604      	mov	r4, r0
 80087f0:	4658      	mov	r0, fp
 80087f2:	f000 fbed 	bl	8008fd0 <__mcmp>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f73f adb8 	bgt.w	800836c <_dtoa_r+0x4cc>
 80087fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087fe:	9f03      	ldr	r7, [sp, #12]
 8008800:	ea6f 0a03 	mvn.w	sl, r3
 8008804:	f04f 0800 	mov.w	r8, #0
 8008808:	4621      	mov	r1, r4
 800880a:	4628      	mov	r0, r5
 800880c:	f000 f9a2 	bl	8008b54 <_Bfree>
 8008810:	2e00      	cmp	r6, #0
 8008812:	f43f aea7 	beq.w	8008564 <_dtoa_r+0x6c4>
 8008816:	f1b8 0f00 	cmp.w	r8, #0
 800881a:	d005      	beq.n	8008828 <_dtoa_r+0x988>
 800881c:	45b0      	cmp	r8, r6
 800881e:	d003      	beq.n	8008828 <_dtoa_r+0x988>
 8008820:	4641      	mov	r1, r8
 8008822:	4628      	mov	r0, r5
 8008824:	f000 f996 	bl	8008b54 <_Bfree>
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	f000 f992 	bl	8008b54 <_Bfree>
 8008830:	e698      	b.n	8008564 <_dtoa_r+0x6c4>
 8008832:	2400      	movs	r4, #0
 8008834:	4626      	mov	r6, r4
 8008836:	e7e1      	b.n	80087fc <_dtoa_r+0x95c>
 8008838:	46c2      	mov	sl, r8
 800883a:	4626      	mov	r6, r4
 800883c:	e596      	b.n	800836c <_dtoa_r+0x4cc>
 800883e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 80fd 	beq.w	8008a44 <_dtoa_r+0xba4>
 800884a:	2f00      	cmp	r7, #0
 800884c:	dd05      	ble.n	800885a <_dtoa_r+0x9ba>
 800884e:	4631      	mov	r1, r6
 8008850:	463a      	mov	r2, r7
 8008852:	4628      	mov	r0, r5
 8008854:	f000 fb4c 	bl	8008ef0 <__lshift>
 8008858:	4606      	mov	r6, r0
 800885a:	f1b8 0f00 	cmp.w	r8, #0
 800885e:	d05c      	beq.n	800891a <_dtoa_r+0xa7a>
 8008860:	4628      	mov	r0, r5
 8008862:	6871      	ldr	r1, [r6, #4]
 8008864:	f000 f936 	bl	8008ad4 <_Balloc>
 8008868:	4607      	mov	r7, r0
 800886a:	b928      	cbnz	r0, 8008878 <_dtoa_r+0x9d8>
 800886c:	4602      	mov	r2, r0
 800886e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008872:	4b7f      	ldr	r3, [pc, #508]	; (8008a70 <_dtoa_r+0xbd0>)
 8008874:	f7ff bb28 	b.w	8007ec8 <_dtoa_r+0x28>
 8008878:	6932      	ldr	r2, [r6, #16]
 800887a:	f106 010c 	add.w	r1, r6, #12
 800887e:	3202      	adds	r2, #2
 8008880:	0092      	lsls	r2, r2, #2
 8008882:	300c      	adds	r0, #12
 8008884:	f7fe fd58 	bl	8007338 <memcpy>
 8008888:	2201      	movs	r2, #1
 800888a:	4639      	mov	r1, r7
 800888c:	4628      	mov	r0, r5
 800888e:	f000 fb2f 	bl	8008ef0 <__lshift>
 8008892:	46b0      	mov	r8, r6
 8008894:	4606      	mov	r6, r0
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	3301      	adds	r3, #1
 800889a:	9308      	str	r3, [sp, #32]
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	444b      	add	r3, r9
 80088a0:	930a      	str	r3, [sp, #40]	; 0x28
 80088a2:	9b04      	ldr	r3, [sp, #16]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	9309      	str	r3, [sp, #36]	; 0x24
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	4621      	mov	r1, r4
 80088ae:	3b01      	subs	r3, #1
 80088b0:	4658      	mov	r0, fp
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	f7ff fa66 	bl	8007d84 <quorem>
 80088b8:	4603      	mov	r3, r0
 80088ba:	4641      	mov	r1, r8
 80088bc:	3330      	adds	r3, #48	; 0x30
 80088be:	9006      	str	r0, [sp, #24]
 80088c0:	4658      	mov	r0, fp
 80088c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088c4:	f000 fb84 	bl	8008fd0 <__mcmp>
 80088c8:	4632      	mov	r2, r6
 80088ca:	4681      	mov	r9, r0
 80088cc:	4621      	mov	r1, r4
 80088ce:	4628      	mov	r0, r5
 80088d0:	f000 fb9a 	bl	8009008 <__mdiff>
 80088d4:	68c2      	ldr	r2, [r0, #12]
 80088d6:	4607      	mov	r7, r0
 80088d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088da:	bb02      	cbnz	r2, 800891e <_dtoa_r+0xa7e>
 80088dc:	4601      	mov	r1, r0
 80088de:	4658      	mov	r0, fp
 80088e0:	f000 fb76 	bl	8008fd0 <__mcmp>
 80088e4:	4602      	mov	r2, r0
 80088e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e8:	4639      	mov	r1, r7
 80088ea:	4628      	mov	r0, r5
 80088ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80088f0:	f000 f930 	bl	8008b54 <_Bfree>
 80088f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088f8:	9f08      	ldr	r7, [sp, #32]
 80088fa:	ea43 0102 	orr.w	r1, r3, r2
 80088fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008900:	430b      	orrs	r3, r1
 8008902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008904:	d10d      	bne.n	8008922 <_dtoa_r+0xa82>
 8008906:	2b39      	cmp	r3, #57	; 0x39
 8008908:	d029      	beq.n	800895e <_dtoa_r+0xabe>
 800890a:	f1b9 0f00 	cmp.w	r9, #0
 800890e:	dd01      	ble.n	8008914 <_dtoa_r+0xa74>
 8008910:	9b06      	ldr	r3, [sp, #24]
 8008912:	3331      	adds	r3, #49	; 0x31
 8008914:	9a04      	ldr	r2, [sp, #16]
 8008916:	7013      	strb	r3, [r2, #0]
 8008918:	e776      	b.n	8008808 <_dtoa_r+0x968>
 800891a:	4630      	mov	r0, r6
 800891c:	e7b9      	b.n	8008892 <_dtoa_r+0x9f2>
 800891e:	2201      	movs	r2, #1
 8008920:	e7e2      	b.n	80088e8 <_dtoa_r+0xa48>
 8008922:	f1b9 0f00 	cmp.w	r9, #0
 8008926:	db06      	blt.n	8008936 <_dtoa_r+0xa96>
 8008928:	9922      	ldr	r1, [sp, #136]	; 0x88
 800892a:	ea41 0909 	orr.w	r9, r1, r9
 800892e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008930:	ea59 0101 	orrs.w	r1, r9, r1
 8008934:	d120      	bne.n	8008978 <_dtoa_r+0xad8>
 8008936:	2a00      	cmp	r2, #0
 8008938:	ddec      	ble.n	8008914 <_dtoa_r+0xa74>
 800893a:	4659      	mov	r1, fp
 800893c:	2201      	movs	r2, #1
 800893e:	4628      	mov	r0, r5
 8008940:	9308      	str	r3, [sp, #32]
 8008942:	f000 fad5 	bl	8008ef0 <__lshift>
 8008946:	4621      	mov	r1, r4
 8008948:	4683      	mov	fp, r0
 800894a:	f000 fb41 	bl	8008fd0 <__mcmp>
 800894e:	2800      	cmp	r0, #0
 8008950:	9b08      	ldr	r3, [sp, #32]
 8008952:	dc02      	bgt.n	800895a <_dtoa_r+0xaba>
 8008954:	d1de      	bne.n	8008914 <_dtoa_r+0xa74>
 8008956:	07da      	lsls	r2, r3, #31
 8008958:	d5dc      	bpl.n	8008914 <_dtoa_r+0xa74>
 800895a:	2b39      	cmp	r3, #57	; 0x39
 800895c:	d1d8      	bne.n	8008910 <_dtoa_r+0xa70>
 800895e:	2339      	movs	r3, #57	; 0x39
 8008960:	9a04      	ldr	r2, [sp, #16]
 8008962:	7013      	strb	r3, [r2, #0]
 8008964:	463b      	mov	r3, r7
 8008966:	461f      	mov	r7, r3
 8008968:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800896c:	3b01      	subs	r3, #1
 800896e:	2a39      	cmp	r2, #57	; 0x39
 8008970:	d050      	beq.n	8008a14 <_dtoa_r+0xb74>
 8008972:	3201      	adds	r2, #1
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e747      	b.n	8008808 <_dtoa_r+0x968>
 8008978:	2a00      	cmp	r2, #0
 800897a:	dd03      	ble.n	8008984 <_dtoa_r+0xae4>
 800897c:	2b39      	cmp	r3, #57	; 0x39
 800897e:	d0ee      	beq.n	800895e <_dtoa_r+0xabe>
 8008980:	3301      	adds	r3, #1
 8008982:	e7c7      	b.n	8008914 <_dtoa_r+0xa74>
 8008984:	9a08      	ldr	r2, [sp, #32]
 8008986:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008988:	f802 3c01 	strb.w	r3, [r2, #-1]
 800898c:	428a      	cmp	r2, r1
 800898e:	d02a      	beq.n	80089e6 <_dtoa_r+0xb46>
 8008990:	4659      	mov	r1, fp
 8008992:	2300      	movs	r3, #0
 8008994:	220a      	movs	r2, #10
 8008996:	4628      	mov	r0, r5
 8008998:	f000 f8fe 	bl	8008b98 <__multadd>
 800899c:	45b0      	cmp	r8, r6
 800899e:	4683      	mov	fp, r0
 80089a0:	f04f 0300 	mov.w	r3, #0
 80089a4:	f04f 020a 	mov.w	r2, #10
 80089a8:	4641      	mov	r1, r8
 80089aa:	4628      	mov	r0, r5
 80089ac:	d107      	bne.n	80089be <_dtoa_r+0xb1e>
 80089ae:	f000 f8f3 	bl	8008b98 <__multadd>
 80089b2:	4680      	mov	r8, r0
 80089b4:	4606      	mov	r6, r0
 80089b6:	9b08      	ldr	r3, [sp, #32]
 80089b8:	3301      	adds	r3, #1
 80089ba:	9308      	str	r3, [sp, #32]
 80089bc:	e775      	b.n	80088aa <_dtoa_r+0xa0a>
 80089be:	f000 f8eb 	bl	8008b98 <__multadd>
 80089c2:	4631      	mov	r1, r6
 80089c4:	4680      	mov	r8, r0
 80089c6:	2300      	movs	r3, #0
 80089c8:	220a      	movs	r2, #10
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 f8e4 	bl	8008b98 <__multadd>
 80089d0:	4606      	mov	r6, r0
 80089d2:	e7f0      	b.n	80089b6 <_dtoa_r+0xb16>
 80089d4:	f1b9 0f00 	cmp.w	r9, #0
 80089d8:	bfcc      	ite	gt
 80089da:	464f      	movgt	r7, r9
 80089dc:	2701      	movle	r7, #1
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	9a03      	ldr	r2, [sp, #12]
 80089e4:	4417      	add	r7, r2
 80089e6:	4659      	mov	r1, fp
 80089e8:	2201      	movs	r2, #1
 80089ea:	4628      	mov	r0, r5
 80089ec:	9308      	str	r3, [sp, #32]
 80089ee:	f000 fa7f 	bl	8008ef0 <__lshift>
 80089f2:	4621      	mov	r1, r4
 80089f4:	4683      	mov	fp, r0
 80089f6:	f000 faeb 	bl	8008fd0 <__mcmp>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	dcb2      	bgt.n	8008964 <_dtoa_r+0xac4>
 80089fe:	d102      	bne.n	8008a06 <_dtoa_r+0xb66>
 8008a00:	9b08      	ldr	r3, [sp, #32]
 8008a02:	07db      	lsls	r3, r3, #31
 8008a04:	d4ae      	bmi.n	8008964 <_dtoa_r+0xac4>
 8008a06:	463b      	mov	r3, r7
 8008a08:	461f      	mov	r7, r3
 8008a0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a0e:	2a30      	cmp	r2, #48	; 0x30
 8008a10:	d0fa      	beq.n	8008a08 <_dtoa_r+0xb68>
 8008a12:	e6f9      	b.n	8008808 <_dtoa_r+0x968>
 8008a14:	9a03      	ldr	r2, [sp, #12]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d1a5      	bne.n	8008966 <_dtoa_r+0xac6>
 8008a1a:	2331      	movs	r3, #49	; 0x31
 8008a1c:	f10a 0a01 	add.w	sl, sl, #1
 8008a20:	e779      	b.n	8008916 <_dtoa_r+0xa76>
 8008a22:	4b14      	ldr	r3, [pc, #80]	; (8008a74 <_dtoa_r+0xbd4>)
 8008a24:	f7ff baa8 	b.w	8007f78 <_dtoa_r+0xd8>
 8008a28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f47f aa81 	bne.w	8007f32 <_dtoa_r+0x92>
 8008a30:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <_dtoa_r+0xbd8>)
 8008a32:	f7ff baa1 	b.w	8007f78 <_dtoa_r+0xd8>
 8008a36:	f1b9 0f00 	cmp.w	r9, #0
 8008a3a:	dc03      	bgt.n	8008a44 <_dtoa_r+0xba4>
 8008a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	f73f aecb 	bgt.w	80087da <_dtoa_r+0x93a>
 8008a44:	9f03      	ldr	r7, [sp, #12]
 8008a46:	4621      	mov	r1, r4
 8008a48:	4658      	mov	r0, fp
 8008a4a:	f7ff f99b 	bl	8007d84 <quorem>
 8008a4e:	9a03      	ldr	r2, [sp, #12]
 8008a50:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a54:	f807 3b01 	strb.w	r3, [r7], #1
 8008a58:	1aba      	subs	r2, r7, r2
 8008a5a:	4591      	cmp	r9, r2
 8008a5c:	ddba      	ble.n	80089d4 <_dtoa_r+0xb34>
 8008a5e:	4659      	mov	r1, fp
 8008a60:	2300      	movs	r3, #0
 8008a62:	220a      	movs	r2, #10
 8008a64:	4628      	mov	r0, r5
 8008a66:	f000 f897 	bl	8008b98 <__multadd>
 8008a6a:	4683      	mov	fp, r0
 8008a6c:	e7eb      	b.n	8008a46 <_dtoa_r+0xba6>
 8008a6e:	bf00      	nop
 8008a70:	0800a500 	.word	0x0800a500
 8008a74:	0800a3c4 	.word	0x0800a3c4
 8008a78:	0800a498 	.word	0x0800a498

08008a7c <fiprintf>:
 8008a7c:	b40e      	push	{r1, r2, r3}
 8008a7e:	b503      	push	{r0, r1, lr}
 8008a80:	4601      	mov	r1, r0
 8008a82:	ab03      	add	r3, sp, #12
 8008a84:	4805      	ldr	r0, [pc, #20]	; (8008a9c <fiprintf+0x20>)
 8008a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	9301      	str	r3, [sp, #4]
 8008a8e:	f000 fe17 	bl	80096c0 <_vfiprintf_r>
 8008a92:	b002      	add	sp, #8
 8008a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a98:	b003      	add	sp, #12
 8008a9a:	4770      	bx	lr
 8008a9c:	2000006c 	.word	0x2000006c

08008aa0 <_localeconv_r>:
 8008aa0:	4800      	ldr	r0, [pc, #0]	; (8008aa4 <_localeconv_r+0x4>)
 8008aa2:	4770      	bx	lr
 8008aa4:	200001c0 	.word	0x200001c0

08008aa8 <malloc>:
 8008aa8:	4b02      	ldr	r3, [pc, #8]	; (8008ab4 <malloc+0xc>)
 8008aaa:	4601      	mov	r1, r0
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	f000 bc0f 	b.w	80092d0 <_malloc_r>
 8008ab2:	bf00      	nop
 8008ab4:	2000006c 	.word	0x2000006c

08008ab8 <memchr>:
 8008ab8:	4603      	mov	r3, r0
 8008aba:	b510      	push	{r4, lr}
 8008abc:	b2c9      	uxtb	r1, r1
 8008abe:	4402      	add	r2, r0
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	d101      	bne.n	8008aca <memchr+0x12>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e003      	b.n	8008ad2 <memchr+0x1a>
 8008aca:	7804      	ldrb	r4, [r0, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	428c      	cmp	r4, r1
 8008ad0:	d1f6      	bne.n	8008ac0 <memchr+0x8>
 8008ad2:	bd10      	pop	{r4, pc}

08008ad4 <_Balloc>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ad8:	4604      	mov	r4, r0
 8008ada:	460d      	mov	r5, r1
 8008adc:	b976      	cbnz	r6, 8008afc <_Balloc+0x28>
 8008ade:	2010      	movs	r0, #16
 8008ae0:	f7ff ffe2 	bl	8008aa8 <malloc>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	6260      	str	r0, [r4, #36]	; 0x24
 8008ae8:	b920      	cbnz	r0, 8008af4 <_Balloc+0x20>
 8008aea:	2166      	movs	r1, #102	; 0x66
 8008aec:	4b17      	ldr	r3, [pc, #92]	; (8008b4c <_Balloc+0x78>)
 8008aee:	4818      	ldr	r0, [pc, #96]	; (8008b50 <_Balloc+0x7c>)
 8008af0:	f7ff f92a 	bl	8007d48 <__assert_func>
 8008af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008af8:	6006      	str	r6, [r0, #0]
 8008afa:	60c6      	str	r6, [r0, #12]
 8008afc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008afe:	68f3      	ldr	r3, [r6, #12]
 8008b00:	b183      	cbz	r3, 8008b24 <_Balloc+0x50>
 8008b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b0a:	b9b8      	cbnz	r0, 8008b3c <_Balloc+0x68>
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b12:	1d72      	adds	r2, r6, #5
 8008b14:	4620      	mov	r0, r4
 8008b16:	0092      	lsls	r2, r2, #2
 8008b18:	f000 fb5e 	bl	80091d8 <_calloc_r>
 8008b1c:	b160      	cbz	r0, 8008b38 <_Balloc+0x64>
 8008b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b22:	e00e      	b.n	8008b42 <_Balloc+0x6e>
 8008b24:	2221      	movs	r2, #33	; 0x21
 8008b26:	2104      	movs	r1, #4
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fb55 	bl	80091d8 <_calloc_r>
 8008b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b30:	60f0      	str	r0, [r6, #12]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e4      	bne.n	8008b02 <_Balloc+0x2e>
 8008b38:	2000      	movs	r0, #0
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	6802      	ldr	r2, [r0, #0]
 8008b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b42:	2300      	movs	r3, #0
 8008b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b48:	e7f7      	b.n	8008b3a <_Balloc+0x66>
 8008b4a:	bf00      	nop
 8008b4c:	0800a3e8 	.word	0x0800a3e8
 8008b50:	0800a511 	.word	0x0800a511

08008b54 <_Bfree>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b58:	4605      	mov	r5, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	b976      	cbnz	r6, 8008b7c <_Bfree+0x28>
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f7ff ffa2 	bl	8008aa8 <malloc>
 8008b64:	4602      	mov	r2, r0
 8008b66:	6268      	str	r0, [r5, #36]	; 0x24
 8008b68:	b920      	cbnz	r0, 8008b74 <_Bfree+0x20>
 8008b6a:	218a      	movs	r1, #138	; 0x8a
 8008b6c:	4b08      	ldr	r3, [pc, #32]	; (8008b90 <_Bfree+0x3c>)
 8008b6e:	4809      	ldr	r0, [pc, #36]	; (8008b94 <_Bfree+0x40>)
 8008b70:	f7ff f8ea 	bl	8007d48 <__assert_func>
 8008b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b78:	6006      	str	r6, [r0, #0]
 8008b7a:	60c6      	str	r6, [r0, #12]
 8008b7c:	b13c      	cbz	r4, 8008b8e <_Bfree+0x3a>
 8008b7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b80:	6862      	ldr	r2, [r4, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b88:	6021      	str	r1, [r4, #0]
 8008b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0800a3e8 	.word	0x0800a3e8
 8008b94:	0800a511 	.word	0x0800a511

08008b98 <__multadd>:
 8008b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	461e      	mov	r6, r3
 8008ba2:	2000      	movs	r0, #0
 8008ba4:	690d      	ldr	r5, [r1, #16]
 8008ba6:	f101 0c14 	add.w	ip, r1, #20
 8008baa:	f8dc 3000 	ldr.w	r3, [ip]
 8008bae:	3001      	adds	r0, #1
 8008bb0:	b299      	uxth	r1, r3
 8008bb2:	fb02 6101 	mla	r1, r2, r1, r6
 8008bb6:	0c1e      	lsrs	r6, r3, #16
 8008bb8:	0c0b      	lsrs	r3, r1, #16
 8008bba:	fb02 3306 	mla	r3, r2, r6, r3
 8008bbe:	b289      	uxth	r1, r1
 8008bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bc4:	4285      	cmp	r5, r0
 8008bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bca:	f84c 1b04 	str.w	r1, [ip], #4
 8008bce:	dcec      	bgt.n	8008baa <__multadd+0x12>
 8008bd0:	b30e      	cbz	r6, 8008c16 <__multadd+0x7e>
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	42ab      	cmp	r3, r5
 8008bd6:	dc19      	bgt.n	8008c0c <__multadd+0x74>
 8008bd8:	6861      	ldr	r1, [r4, #4]
 8008bda:	4638      	mov	r0, r7
 8008bdc:	3101      	adds	r1, #1
 8008bde:	f7ff ff79 	bl	8008ad4 <_Balloc>
 8008be2:	4680      	mov	r8, r0
 8008be4:	b928      	cbnz	r0, 8008bf2 <__multadd+0x5a>
 8008be6:	4602      	mov	r2, r0
 8008be8:	21b5      	movs	r1, #181	; 0xb5
 8008bea:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <__multadd+0x84>)
 8008bec:	480c      	ldr	r0, [pc, #48]	; (8008c20 <__multadd+0x88>)
 8008bee:	f7ff f8ab 	bl	8007d48 <__assert_func>
 8008bf2:	6922      	ldr	r2, [r4, #16]
 8008bf4:	f104 010c 	add.w	r1, r4, #12
 8008bf8:	3202      	adds	r2, #2
 8008bfa:	0092      	lsls	r2, r2, #2
 8008bfc:	300c      	adds	r0, #12
 8008bfe:	f7fe fb9b 	bl	8007338 <memcpy>
 8008c02:	4621      	mov	r1, r4
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff ffa5 	bl	8008b54 <_Bfree>
 8008c0a:	4644      	mov	r4, r8
 8008c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c10:	3501      	adds	r5, #1
 8008c12:	615e      	str	r6, [r3, #20]
 8008c14:	6125      	str	r5, [r4, #16]
 8008c16:	4620      	mov	r0, r4
 8008c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c1c:	0800a500 	.word	0x0800a500
 8008c20:	0800a511 	.word	0x0800a511

08008c24 <__hi0bits>:
 8008c24:	0c02      	lsrs	r2, r0, #16
 8008c26:	0412      	lsls	r2, r2, #16
 8008c28:	4603      	mov	r3, r0
 8008c2a:	b9ca      	cbnz	r2, 8008c60 <__hi0bits+0x3c>
 8008c2c:	0403      	lsls	r3, r0, #16
 8008c2e:	2010      	movs	r0, #16
 8008c30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c34:	bf04      	itt	eq
 8008c36:	021b      	lsleq	r3, r3, #8
 8008c38:	3008      	addeq	r0, #8
 8008c3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c3e:	bf04      	itt	eq
 8008c40:	011b      	lsleq	r3, r3, #4
 8008c42:	3004      	addeq	r0, #4
 8008c44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c48:	bf04      	itt	eq
 8008c4a:	009b      	lsleq	r3, r3, #2
 8008c4c:	3002      	addeq	r0, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	db05      	blt.n	8008c5e <__hi0bits+0x3a>
 8008c52:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c56:	f100 0001 	add.w	r0, r0, #1
 8008c5a:	bf08      	it	eq
 8008c5c:	2020      	moveq	r0, #32
 8008c5e:	4770      	bx	lr
 8008c60:	2000      	movs	r0, #0
 8008c62:	e7e5      	b.n	8008c30 <__hi0bits+0xc>

08008c64 <__lo0bits>:
 8008c64:	6803      	ldr	r3, [r0, #0]
 8008c66:	4602      	mov	r2, r0
 8008c68:	f013 0007 	ands.w	r0, r3, #7
 8008c6c:	d00b      	beq.n	8008c86 <__lo0bits+0x22>
 8008c6e:	07d9      	lsls	r1, r3, #31
 8008c70:	d421      	bmi.n	8008cb6 <__lo0bits+0x52>
 8008c72:	0798      	lsls	r0, r3, #30
 8008c74:	bf49      	itett	mi
 8008c76:	085b      	lsrmi	r3, r3, #1
 8008c78:	089b      	lsrpl	r3, r3, #2
 8008c7a:	2001      	movmi	r0, #1
 8008c7c:	6013      	strmi	r3, [r2, #0]
 8008c7e:	bf5c      	itt	pl
 8008c80:	2002      	movpl	r0, #2
 8008c82:	6013      	strpl	r3, [r2, #0]
 8008c84:	4770      	bx	lr
 8008c86:	b299      	uxth	r1, r3
 8008c88:	b909      	cbnz	r1, 8008c8e <__lo0bits+0x2a>
 8008c8a:	2010      	movs	r0, #16
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	b2d9      	uxtb	r1, r3
 8008c90:	b909      	cbnz	r1, 8008c96 <__lo0bits+0x32>
 8008c92:	3008      	adds	r0, #8
 8008c94:	0a1b      	lsrs	r3, r3, #8
 8008c96:	0719      	lsls	r1, r3, #28
 8008c98:	bf04      	itt	eq
 8008c9a:	091b      	lsreq	r3, r3, #4
 8008c9c:	3004      	addeq	r0, #4
 8008c9e:	0799      	lsls	r1, r3, #30
 8008ca0:	bf04      	itt	eq
 8008ca2:	089b      	lsreq	r3, r3, #2
 8008ca4:	3002      	addeq	r0, #2
 8008ca6:	07d9      	lsls	r1, r3, #31
 8008ca8:	d403      	bmi.n	8008cb2 <__lo0bits+0x4e>
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	f100 0001 	add.w	r0, r0, #1
 8008cb0:	d003      	beq.n	8008cba <__lo0bits+0x56>
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	4770      	bx	lr
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	4770      	bx	lr
 8008cba:	2020      	movs	r0, #32
 8008cbc:	4770      	bx	lr
	...

08008cc0 <__i2b>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	f7ff ff05 	bl	8008ad4 <_Balloc>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	b928      	cbnz	r0, 8008cda <__i2b+0x1a>
 8008cce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008cd2:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <__i2b+0x24>)
 8008cd4:	4804      	ldr	r0, [pc, #16]	; (8008ce8 <__i2b+0x28>)
 8008cd6:	f7ff f837 	bl	8007d48 <__assert_func>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	6144      	str	r4, [r0, #20]
 8008cde:	6103      	str	r3, [r0, #16]
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0800a500 	.word	0x0800a500
 8008ce8:	0800a511 	.word	0x0800a511

08008cec <__multiply>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	4691      	mov	r9, r2
 8008cf2:	690a      	ldr	r2, [r1, #16]
 8008cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	bfbe      	ittt	lt
 8008cfe:	460b      	movlt	r3, r1
 8008d00:	464c      	movlt	r4, r9
 8008d02:	4699      	movlt	r9, r3
 8008d04:	6927      	ldr	r7, [r4, #16]
 8008d06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	eb07 060a 	add.w	r6, r7, sl
 8008d12:	42b3      	cmp	r3, r6
 8008d14:	b085      	sub	sp, #20
 8008d16:	bfb8      	it	lt
 8008d18:	3101      	addlt	r1, #1
 8008d1a:	f7ff fedb 	bl	8008ad4 <_Balloc>
 8008d1e:	b930      	cbnz	r0, 8008d2e <__multiply+0x42>
 8008d20:	4602      	mov	r2, r0
 8008d22:	f240 115d 	movw	r1, #349	; 0x15d
 8008d26:	4b43      	ldr	r3, [pc, #268]	; (8008e34 <__multiply+0x148>)
 8008d28:	4843      	ldr	r0, [pc, #268]	; (8008e38 <__multiply+0x14c>)
 8008d2a:	f7ff f80d 	bl	8007d48 <__assert_func>
 8008d2e:	f100 0514 	add.w	r5, r0, #20
 8008d32:	462b      	mov	r3, r5
 8008d34:	2200      	movs	r2, #0
 8008d36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d3a:	4543      	cmp	r3, r8
 8008d3c:	d321      	bcc.n	8008d82 <__multiply+0x96>
 8008d3e:	f104 0314 	add.w	r3, r4, #20
 8008d42:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d46:	f109 0314 	add.w	r3, r9, #20
 8008d4a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d4e:	9202      	str	r2, [sp, #8]
 8008d50:	1b3a      	subs	r2, r7, r4
 8008d52:	3a15      	subs	r2, #21
 8008d54:	f022 0203 	bic.w	r2, r2, #3
 8008d58:	3204      	adds	r2, #4
 8008d5a:	f104 0115 	add.w	r1, r4, #21
 8008d5e:	428f      	cmp	r7, r1
 8008d60:	bf38      	it	cc
 8008d62:	2204      	movcc	r2, #4
 8008d64:	9201      	str	r2, [sp, #4]
 8008d66:	9a02      	ldr	r2, [sp, #8]
 8008d68:	9303      	str	r3, [sp, #12]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d80c      	bhi.n	8008d88 <__multiply+0x9c>
 8008d6e:	2e00      	cmp	r6, #0
 8008d70:	dd03      	ble.n	8008d7a <__multiply+0x8e>
 8008d72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d059      	beq.n	8008e2e <__multiply+0x142>
 8008d7a:	6106      	str	r6, [r0, #16]
 8008d7c:	b005      	add	sp, #20
 8008d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d82:	f843 2b04 	str.w	r2, [r3], #4
 8008d86:	e7d8      	b.n	8008d3a <__multiply+0x4e>
 8008d88:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d8c:	f1ba 0f00 	cmp.w	sl, #0
 8008d90:	d023      	beq.n	8008dda <__multiply+0xee>
 8008d92:	46a9      	mov	r9, r5
 8008d94:	f04f 0c00 	mov.w	ip, #0
 8008d98:	f104 0e14 	add.w	lr, r4, #20
 8008d9c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008da0:	f8d9 1000 	ldr.w	r1, [r9]
 8008da4:	fa1f fb82 	uxth.w	fp, r2
 8008da8:	b289      	uxth	r1, r1
 8008daa:	fb0a 110b 	mla	r1, sl, fp, r1
 8008dae:	4461      	add	r1, ip
 8008db0:	f8d9 c000 	ldr.w	ip, [r9]
 8008db4:	0c12      	lsrs	r2, r2, #16
 8008db6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008dba:	fb0a c202 	mla	r2, sl, r2, ip
 8008dbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008dc2:	b289      	uxth	r1, r1
 8008dc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dc8:	4577      	cmp	r7, lr
 8008dca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dce:	f849 1b04 	str.w	r1, [r9], #4
 8008dd2:	d8e3      	bhi.n	8008d9c <__multiply+0xb0>
 8008dd4:	9a01      	ldr	r2, [sp, #4]
 8008dd6:	f845 c002 	str.w	ip, [r5, r2]
 8008dda:	9a03      	ldr	r2, [sp, #12]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	d020      	beq.n	8008e2a <__multiply+0x13e>
 8008de8:	46ae      	mov	lr, r5
 8008dea:	f04f 0a00 	mov.w	sl, #0
 8008dee:	6829      	ldr	r1, [r5, #0]
 8008df0:	f104 0c14 	add.w	ip, r4, #20
 8008df4:	f8bc b000 	ldrh.w	fp, [ip]
 8008df8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008dfc:	b289      	uxth	r1, r1
 8008dfe:	fb09 220b 	mla	r2, r9, fp, r2
 8008e02:	4492      	add	sl, r2
 8008e04:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008e08:	f84e 1b04 	str.w	r1, [lr], #4
 8008e0c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e10:	f8be 1000 	ldrh.w	r1, [lr]
 8008e14:	0c12      	lsrs	r2, r2, #16
 8008e16:	fb09 1102 	mla	r1, r9, r2, r1
 8008e1a:	4567      	cmp	r7, ip
 8008e1c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008e20:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e24:	d8e6      	bhi.n	8008df4 <__multiply+0x108>
 8008e26:	9a01      	ldr	r2, [sp, #4]
 8008e28:	50a9      	str	r1, [r5, r2]
 8008e2a:	3504      	adds	r5, #4
 8008e2c:	e79b      	b.n	8008d66 <__multiply+0x7a>
 8008e2e:	3e01      	subs	r6, #1
 8008e30:	e79d      	b.n	8008d6e <__multiply+0x82>
 8008e32:	bf00      	nop
 8008e34:	0800a500 	.word	0x0800a500
 8008e38:	0800a511 	.word	0x0800a511

08008e3c <__pow5mult>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	4615      	mov	r5, r2
 8008e42:	f012 0203 	ands.w	r2, r2, #3
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	d007      	beq.n	8008e5c <__pow5mult+0x20>
 8008e4c:	4c25      	ldr	r4, [pc, #148]	; (8008ee4 <__pow5mult+0xa8>)
 8008e4e:	3a01      	subs	r2, #1
 8008e50:	2300      	movs	r3, #0
 8008e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e56:	f7ff fe9f 	bl	8008b98 <__multadd>
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	10ad      	asrs	r5, r5, #2
 8008e5e:	d03d      	beq.n	8008edc <__pow5mult+0xa0>
 8008e60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e62:	b97c      	cbnz	r4, 8008e84 <__pow5mult+0x48>
 8008e64:	2010      	movs	r0, #16
 8008e66:	f7ff fe1f 	bl	8008aa8 <malloc>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	6270      	str	r0, [r6, #36]	; 0x24
 8008e6e:	b928      	cbnz	r0, 8008e7c <__pow5mult+0x40>
 8008e70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e74:	4b1c      	ldr	r3, [pc, #112]	; (8008ee8 <__pow5mult+0xac>)
 8008e76:	481d      	ldr	r0, [pc, #116]	; (8008eec <__pow5mult+0xb0>)
 8008e78:	f7fe ff66 	bl	8007d48 <__assert_func>
 8008e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e80:	6004      	str	r4, [r0, #0]
 8008e82:	60c4      	str	r4, [r0, #12]
 8008e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e8c:	b94c      	cbnz	r4, 8008ea2 <__pow5mult+0x66>
 8008e8e:	f240 2171 	movw	r1, #625	; 0x271
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7ff ff14 	bl	8008cc0 <__i2b>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ea0:	6003      	str	r3, [r0, #0]
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	07eb      	lsls	r3, r5, #31
 8008ea8:	d50a      	bpl.n	8008ec0 <__pow5mult+0x84>
 8008eaa:	4639      	mov	r1, r7
 8008eac:	4622      	mov	r2, r4
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ff1c 	bl	8008cec <__multiply>
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4639      	mov	r1, r7
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff fe4b 	bl	8008b54 <_Bfree>
 8008ebe:	4647      	mov	r7, r8
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	d00b      	beq.n	8008edc <__pow5mult+0xa0>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	b938      	cbnz	r0, 8008ed8 <__pow5mult+0x9c>
 8008ec8:	4622      	mov	r2, r4
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff ff0d 	bl	8008cec <__multiply>
 8008ed2:	6020      	str	r0, [r4, #0]
 8008ed4:	f8c0 9000 	str.w	r9, [r0]
 8008ed8:	4604      	mov	r4, r0
 8008eda:	e7e4      	b.n	8008ea6 <__pow5mult+0x6a>
 8008edc:	4638      	mov	r0, r7
 8008ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0800a660 	.word	0x0800a660
 8008ee8:	0800a3e8 	.word	0x0800a3e8
 8008eec:	0800a511 	.word	0x0800a511

08008ef0 <__lshift>:
 8008ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	4691      	mov	r9, r2
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	6849      	ldr	r1, [r1, #4]
 8008efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f08:	f108 0601 	add.w	r6, r8, #1
 8008f0c:	42b3      	cmp	r3, r6
 8008f0e:	db0b      	blt.n	8008f28 <__lshift+0x38>
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff fddf 	bl	8008ad4 <_Balloc>
 8008f16:	4605      	mov	r5, r0
 8008f18:	b948      	cbnz	r0, 8008f2e <__lshift+0x3e>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008f20:	4b29      	ldr	r3, [pc, #164]	; (8008fc8 <__lshift+0xd8>)
 8008f22:	482a      	ldr	r0, [pc, #168]	; (8008fcc <__lshift+0xdc>)
 8008f24:	f7fe ff10 	bl	8007d48 <__assert_func>
 8008f28:	3101      	adds	r1, #1
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	e7ee      	b.n	8008f0c <__lshift+0x1c>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f100 0114 	add.w	r1, r0, #20
 8008f34:	f100 0210 	add.w	r2, r0, #16
 8008f38:	4618      	mov	r0, r3
 8008f3a:	4553      	cmp	r3, sl
 8008f3c:	db37      	blt.n	8008fae <__lshift+0xbe>
 8008f3e:	6920      	ldr	r0, [r4, #16]
 8008f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f44:	f104 0314 	add.w	r3, r4, #20
 8008f48:	f019 091f 	ands.w	r9, r9, #31
 8008f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f54:	d02f      	beq.n	8008fb6 <__lshift+0xc6>
 8008f56:	468a      	mov	sl, r1
 8008f58:	f04f 0c00 	mov.w	ip, #0
 8008f5c:	f1c9 0e20 	rsb	lr, r9, #32
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	fa02 f209 	lsl.w	r2, r2, r9
 8008f66:	ea42 020c 	orr.w	r2, r2, ip
 8008f6a:	f84a 2b04 	str.w	r2, [sl], #4
 8008f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f72:	4298      	cmp	r0, r3
 8008f74:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f78:	d8f2      	bhi.n	8008f60 <__lshift+0x70>
 8008f7a:	1b03      	subs	r3, r0, r4
 8008f7c:	3b15      	subs	r3, #21
 8008f7e:	f023 0303 	bic.w	r3, r3, #3
 8008f82:	3304      	adds	r3, #4
 8008f84:	f104 0215 	add.w	r2, r4, #21
 8008f88:	4290      	cmp	r0, r2
 8008f8a:	bf38      	it	cc
 8008f8c:	2304      	movcc	r3, #4
 8008f8e:	f841 c003 	str.w	ip, [r1, r3]
 8008f92:	f1bc 0f00 	cmp.w	ip, #0
 8008f96:	d001      	beq.n	8008f9c <__lshift+0xac>
 8008f98:	f108 0602 	add.w	r6, r8, #2
 8008f9c:	3e01      	subs	r6, #1
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	612e      	str	r6, [r5, #16]
 8008fa4:	f7ff fdd6 	bl	8008b54 <_Bfree>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fae:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	e7c1      	b.n	8008f3a <__lshift+0x4a>
 8008fb6:	3904      	subs	r1, #4
 8008fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fbc:	4298      	cmp	r0, r3
 8008fbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fc2:	d8f9      	bhi.n	8008fb8 <__lshift+0xc8>
 8008fc4:	e7ea      	b.n	8008f9c <__lshift+0xac>
 8008fc6:	bf00      	nop
 8008fc8:	0800a500 	.word	0x0800a500
 8008fcc:	0800a511 	.word	0x0800a511

08008fd0 <__mcmp>:
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	690a      	ldr	r2, [r1, #16]
 8008fd4:	6900      	ldr	r0, [r0, #16]
 8008fd6:	b530      	push	{r4, r5, lr}
 8008fd8:	1a80      	subs	r0, r0, r2
 8008fda:	d10d      	bne.n	8008ff8 <__mcmp+0x28>
 8008fdc:	3314      	adds	r3, #20
 8008fde:	3114      	adds	r1, #20
 8008fe0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fe4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ff0:	4295      	cmp	r5, r2
 8008ff2:	d002      	beq.n	8008ffa <__mcmp+0x2a>
 8008ff4:	d304      	bcc.n	8009000 <__mcmp+0x30>
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	bd30      	pop	{r4, r5, pc}
 8008ffa:	42a3      	cmp	r3, r4
 8008ffc:	d3f4      	bcc.n	8008fe8 <__mcmp+0x18>
 8008ffe:	e7fb      	b.n	8008ff8 <__mcmp+0x28>
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e7f8      	b.n	8008ff8 <__mcmp+0x28>
	...

08009008 <__mdiff>:
 8009008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	460d      	mov	r5, r1
 800900e:	4607      	mov	r7, r0
 8009010:	4611      	mov	r1, r2
 8009012:	4628      	mov	r0, r5
 8009014:	4614      	mov	r4, r2
 8009016:	f7ff ffdb 	bl	8008fd0 <__mcmp>
 800901a:	1e06      	subs	r6, r0, #0
 800901c:	d111      	bne.n	8009042 <__mdiff+0x3a>
 800901e:	4631      	mov	r1, r6
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff fd57 	bl	8008ad4 <_Balloc>
 8009026:	4602      	mov	r2, r0
 8009028:	b928      	cbnz	r0, 8009036 <__mdiff+0x2e>
 800902a:	f240 2132 	movw	r1, #562	; 0x232
 800902e:	4b3a      	ldr	r3, [pc, #232]	; (8009118 <__mdiff+0x110>)
 8009030:	483a      	ldr	r0, [pc, #232]	; (800911c <__mdiff+0x114>)
 8009032:	f7fe fe89 	bl	8007d48 <__assert_func>
 8009036:	2301      	movs	r3, #1
 8009038:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800903c:	4610      	mov	r0, r2
 800903e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009042:	bfa4      	itt	ge
 8009044:	4623      	movge	r3, r4
 8009046:	462c      	movge	r4, r5
 8009048:	4638      	mov	r0, r7
 800904a:	6861      	ldr	r1, [r4, #4]
 800904c:	bfa6      	itte	ge
 800904e:	461d      	movge	r5, r3
 8009050:	2600      	movge	r6, #0
 8009052:	2601      	movlt	r6, #1
 8009054:	f7ff fd3e 	bl	8008ad4 <_Balloc>
 8009058:	4602      	mov	r2, r0
 800905a:	b918      	cbnz	r0, 8009064 <__mdiff+0x5c>
 800905c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009060:	4b2d      	ldr	r3, [pc, #180]	; (8009118 <__mdiff+0x110>)
 8009062:	e7e5      	b.n	8009030 <__mdiff+0x28>
 8009064:	f102 0814 	add.w	r8, r2, #20
 8009068:	46c2      	mov	sl, r8
 800906a:	f04f 0c00 	mov.w	ip, #0
 800906e:	6927      	ldr	r7, [r4, #16]
 8009070:	60c6      	str	r6, [r0, #12]
 8009072:	692e      	ldr	r6, [r5, #16]
 8009074:	f104 0014 	add.w	r0, r4, #20
 8009078:	f105 0914 	add.w	r9, r5, #20
 800907c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009084:	3410      	adds	r4, #16
 8009086:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800908a:	f859 3b04 	ldr.w	r3, [r9], #4
 800908e:	fa1f f18b 	uxth.w	r1, fp
 8009092:	448c      	add	ip, r1
 8009094:	b299      	uxth	r1, r3
 8009096:	0c1b      	lsrs	r3, r3, #16
 8009098:	ebac 0101 	sub.w	r1, ip, r1
 800909c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80090a0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80090a4:	b289      	uxth	r1, r1
 80090a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80090aa:	454e      	cmp	r6, r9
 80090ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80090b0:	f84a 3b04 	str.w	r3, [sl], #4
 80090b4:	d8e7      	bhi.n	8009086 <__mdiff+0x7e>
 80090b6:	1b73      	subs	r3, r6, r5
 80090b8:	3b15      	subs	r3, #21
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	3515      	adds	r5, #21
 80090c0:	3304      	adds	r3, #4
 80090c2:	42ae      	cmp	r6, r5
 80090c4:	bf38      	it	cc
 80090c6:	2304      	movcc	r3, #4
 80090c8:	4418      	add	r0, r3
 80090ca:	4443      	add	r3, r8
 80090cc:	461e      	mov	r6, r3
 80090ce:	4605      	mov	r5, r0
 80090d0:	4575      	cmp	r5, lr
 80090d2:	d30e      	bcc.n	80090f2 <__mdiff+0xea>
 80090d4:	f10e 0103 	add.w	r1, lr, #3
 80090d8:	1a09      	subs	r1, r1, r0
 80090da:	f021 0103 	bic.w	r1, r1, #3
 80090de:	3803      	subs	r0, #3
 80090e0:	4586      	cmp	lr, r0
 80090e2:	bf38      	it	cc
 80090e4:	2100      	movcc	r1, #0
 80090e6:	4419      	add	r1, r3
 80090e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80090ec:	b18b      	cbz	r3, 8009112 <__mdiff+0x10a>
 80090ee:	6117      	str	r7, [r2, #16]
 80090f0:	e7a4      	b.n	800903c <__mdiff+0x34>
 80090f2:	f855 8b04 	ldr.w	r8, [r5], #4
 80090f6:	fa1f f188 	uxth.w	r1, r8
 80090fa:	4461      	add	r1, ip
 80090fc:	140c      	asrs	r4, r1, #16
 80090fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009102:	b289      	uxth	r1, r1
 8009104:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009108:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800910c:	f846 1b04 	str.w	r1, [r6], #4
 8009110:	e7de      	b.n	80090d0 <__mdiff+0xc8>
 8009112:	3f01      	subs	r7, #1
 8009114:	e7e8      	b.n	80090e8 <__mdiff+0xe0>
 8009116:	bf00      	nop
 8009118:	0800a500 	.word	0x0800a500
 800911c:	0800a511 	.word	0x0800a511

08009120 <__d2b>:
 8009120:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009124:	2101      	movs	r1, #1
 8009126:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800912a:	4690      	mov	r8, r2
 800912c:	461d      	mov	r5, r3
 800912e:	f7ff fcd1 	bl	8008ad4 <_Balloc>
 8009132:	4604      	mov	r4, r0
 8009134:	b930      	cbnz	r0, 8009144 <__d2b+0x24>
 8009136:	4602      	mov	r2, r0
 8009138:	f240 310a 	movw	r1, #778	; 0x30a
 800913c:	4b24      	ldr	r3, [pc, #144]	; (80091d0 <__d2b+0xb0>)
 800913e:	4825      	ldr	r0, [pc, #148]	; (80091d4 <__d2b+0xb4>)
 8009140:	f7fe fe02 	bl	8007d48 <__assert_func>
 8009144:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009148:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800914c:	bb2d      	cbnz	r5, 800919a <__d2b+0x7a>
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	f1b8 0300 	subs.w	r3, r8, #0
 8009154:	d026      	beq.n	80091a4 <__d2b+0x84>
 8009156:	4668      	mov	r0, sp
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	f7ff fd83 	bl	8008c64 <__lo0bits>
 800915e:	9900      	ldr	r1, [sp, #0]
 8009160:	b1f0      	cbz	r0, 80091a0 <__d2b+0x80>
 8009162:	9a01      	ldr	r2, [sp, #4]
 8009164:	f1c0 0320 	rsb	r3, r0, #32
 8009168:	fa02 f303 	lsl.w	r3, r2, r3
 800916c:	430b      	orrs	r3, r1
 800916e:	40c2      	lsrs	r2, r0
 8009170:	6163      	str	r3, [r4, #20]
 8009172:	9201      	str	r2, [sp, #4]
 8009174:	9b01      	ldr	r3, [sp, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	bf14      	ite	ne
 800917a:	2102      	movne	r1, #2
 800917c:	2101      	moveq	r1, #1
 800917e:	61a3      	str	r3, [r4, #24]
 8009180:	6121      	str	r1, [r4, #16]
 8009182:	b1c5      	cbz	r5, 80091b6 <__d2b+0x96>
 8009184:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009188:	4405      	add	r5, r0
 800918a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800918e:	603d      	str	r5, [r7, #0]
 8009190:	6030      	str	r0, [r6, #0]
 8009192:	4620      	mov	r0, r4
 8009194:	b002      	add	sp, #8
 8009196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800919a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800919e:	e7d6      	b.n	800914e <__d2b+0x2e>
 80091a0:	6161      	str	r1, [r4, #20]
 80091a2:	e7e7      	b.n	8009174 <__d2b+0x54>
 80091a4:	a801      	add	r0, sp, #4
 80091a6:	f7ff fd5d 	bl	8008c64 <__lo0bits>
 80091aa:	2101      	movs	r1, #1
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	6121      	str	r1, [r4, #16]
 80091b0:	6163      	str	r3, [r4, #20]
 80091b2:	3020      	adds	r0, #32
 80091b4:	e7e5      	b.n	8009182 <__d2b+0x62>
 80091b6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80091ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091be:	6038      	str	r0, [r7, #0]
 80091c0:	6918      	ldr	r0, [r3, #16]
 80091c2:	f7ff fd2f 	bl	8008c24 <__hi0bits>
 80091c6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80091ca:	6031      	str	r1, [r6, #0]
 80091cc:	e7e1      	b.n	8009192 <__d2b+0x72>
 80091ce:	bf00      	nop
 80091d0:	0800a500 	.word	0x0800a500
 80091d4:	0800a511 	.word	0x0800a511

080091d8 <_calloc_r>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	fba1 5402 	umull	r5, r4, r1, r2
 80091de:	b934      	cbnz	r4, 80091ee <_calloc_r+0x16>
 80091e0:	4629      	mov	r1, r5
 80091e2:	f000 f875 	bl	80092d0 <_malloc_r>
 80091e6:	4606      	mov	r6, r0
 80091e8:	b928      	cbnz	r0, 80091f6 <_calloc_r+0x1e>
 80091ea:	4630      	mov	r0, r6
 80091ec:	bd70      	pop	{r4, r5, r6, pc}
 80091ee:	220c      	movs	r2, #12
 80091f0:	2600      	movs	r6, #0
 80091f2:	6002      	str	r2, [r0, #0]
 80091f4:	e7f9      	b.n	80091ea <_calloc_r+0x12>
 80091f6:	462a      	mov	r2, r5
 80091f8:	4621      	mov	r1, r4
 80091fa:	f7fe f8ab 	bl	8007354 <memset>
 80091fe:	e7f4      	b.n	80091ea <_calloc_r+0x12>

08009200 <_free_r>:
 8009200:	b538      	push	{r3, r4, r5, lr}
 8009202:	4605      	mov	r5, r0
 8009204:	2900      	cmp	r1, #0
 8009206:	d040      	beq.n	800928a <_free_r+0x8a>
 8009208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800920c:	1f0c      	subs	r4, r1, #4
 800920e:	2b00      	cmp	r3, #0
 8009210:	bfb8      	it	lt
 8009212:	18e4      	addlt	r4, r4, r3
 8009214:	f000 fea4 	bl	8009f60 <__malloc_lock>
 8009218:	4a1c      	ldr	r2, [pc, #112]	; (800928c <_free_r+0x8c>)
 800921a:	6813      	ldr	r3, [r2, #0]
 800921c:	b933      	cbnz	r3, 800922c <_free_r+0x2c>
 800921e:	6063      	str	r3, [r4, #4]
 8009220:	6014      	str	r4, [r2, #0]
 8009222:	4628      	mov	r0, r5
 8009224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009228:	f000 bea0 	b.w	8009f6c <__malloc_unlock>
 800922c:	42a3      	cmp	r3, r4
 800922e:	d908      	bls.n	8009242 <_free_r+0x42>
 8009230:	6820      	ldr	r0, [r4, #0]
 8009232:	1821      	adds	r1, r4, r0
 8009234:	428b      	cmp	r3, r1
 8009236:	bf01      	itttt	eq
 8009238:	6819      	ldreq	r1, [r3, #0]
 800923a:	685b      	ldreq	r3, [r3, #4]
 800923c:	1809      	addeq	r1, r1, r0
 800923e:	6021      	streq	r1, [r4, #0]
 8009240:	e7ed      	b.n	800921e <_free_r+0x1e>
 8009242:	461a      	mov	r2, r3
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	b10b      	cbz	r3, 800924c <_free_r+0x4c>
 8009248:	42a3      	cmp	r3, r4
 800924a:	d9fa      	bls.n	8009242 <_free_r+0x42>
 800924c:	6811      	ldr	r1, [r2, #0]
 800924e:	1850      	adds	r0, r2, r1
 8009250:	42a0      	cmp	r0, r4
 8009252:	d10b      	bne.n	800926c <_free_r+0x6c>
 8009254:	6820      	ldr	r0, [r4, #0]
 8009256:	4401      	add	r1, r0
 8009258:	1850      	adds	r0, r2, r1
 800925a:	4283      	cmp	r3, r0
 800925c:	6011      	str	r1, [r2, #0]
 800925e:	d1e0      	bne.n	8009222 <_free_r+0x22>
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	4401      	add	r1, r0
 8009266:	6011      	str	r1, [r2, #0]
 8009268:	6053      	str	r3, [r2, #4]
 800926a:	e7da      	b.n	8009222 <_free_r+0x22>
 800926c:	d902      	bls.n	8009274 <_free_r+0x74>
 800926e:	230c      	movs	r3, #12
 8009270:	602b      	str	r3, [r5, #0]
 8009272:	e7d6      	b.n	8009222 <_free_r+0x22>
 8009274:	6820      	ldr	r0, [r4, #0]
 8009276:	1821      	adds	r1, r4, r0
 8009278:	428b      	cmp	r3, r1
 800927a:	bf01      	itttt	eq
 800927c:	6819      	ldreq	r1, [r3, #0]
 800927e:	685b      	ldreq	r3, [r3, #4]
 8009280:	1809      	addeq	r1, r1, r0
 8009282:	6021      	streq	r1, [r4, #0]
 8009284:	6063      	str	r3, [r4, #4]
 8009286:	6054      	str	r4, [r2, #4]
 8009288:	e7cb      	b.n	8009222 <_free_r+0x22>
 800928a:	bd38      	pop	{r3, r4, r5, pc}
 800928c:	200004d4 	.word	0x200004d4

08009290 <sbrk_aligned>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	4e0e      	ldr	r6, [pc, #56]	; (80092cc <sbrk_aligned+0x3c>)
 8009294:	460c      	mov	r4, r1
 8009296:	6831      	ldr	r1, [r6, #0]
 8009298:	4605      	mov	r5, r0
 800929a:	b911      	cbnz	r1, 80092a2 <sbrk_aligned+0x12>
 800929c:	f000 fb40 	bl	8009920 <_sbrk_r>
 80092a0:	6030      	str	r0, [r6, #0]
 80092a2:	4621      	mov	r1, r4
 80092a4:	4628      	mov	r0, r5
 80092a6:	f000 fb3b 	bl	8009920 <_sbrk_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d00a      	beq.n	80092c4 <sbrk_aligned+0x34>
 80092ae:	1cc4      	adds	r4, r0, #3
 80092b0:	f024 0403 	bic.w	r4, r4, #3
 80092b4:	42a0      	cmp	r0, r4
 80092b6:	d007      	beq.n	80092c8 <sbrk_aligned+0x38>
 80092b8:	1a21      	subs	r1, r4, r0
 80092ba:	4628      	mov	r0, r5
 80092bc:	f000 fb30 	bl	8009920 <_sbrk_r>
 80092c0:	3001      	adds	r0, #1
 80092c2:	d101      	bne.n	80092c8 <sbrk_aligned+0x38>
 80092c4:	f04f 34ff 	mov.w	r4, #4294967295
 80092c8:	4620      	mov	r0, r4
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	200004d8 	.word	0x200004d8

080092d0 <_malloc_r>:
 80092d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092d4:	1ccd      	adds	r5, r1, #3
 80092d6:	f025 0503 	bic.w	r5, r5, #3
 80092da:	3508      	adds	r5, #8
 80092dc:	2d0c      	cmp	r5, #12
 80092de:	bf38      	it	cc
 80092e0:	250c      	movcc	r5, #12
 80092e2:	2d00      	cmp	r5, #0
 80092e4:	4607      	mov	r7, r0
 80092e6:	db01      	blt.n	80092ec <_malloc_r+0x1c>
 80092e8:	42a9      	cmp	r1, r5
 80092ea:	d905      	bls.n	80092f8 <_malloc_r+0x28>
 80092ec:	230c      	movs	r3, #12
 80092ee:	2600      	movs	r6, #0
 80092f0:	603b      	str	r3, [r7, #0]
 80092f2:	4630      	mov	r0, r6
 80092f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092f8:	4e2e      	ldr	r6, [pc, #184]	; (80093b4 <_malloc_r+0xe4>)
 80092fa:	f000 fe31 	bl	8009f60 <__malloc_lock>
 80092fe:	6833      	ldr	r3, [r6, #0]
 8009300:	461c      	mov	r4, r3
 8009302:	bb34      	cbnz	r4, 8009352 <_malloc_r+0x82>
 8009304:	4629      	mov	r1, r5
 8009306:	4638      	mov	r0, r7
 8009308:	f7ff ffc2 	bl	8009290 <sbrk_aligned>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	4604      	mov	r4, r0
 8009310:	d14d      	bne.n	80093ae <_malloc_r+0xde>
 8009312:	6834      	ldr	r4, [r6, #0]
 8009314:	4626      	mov	r6, r4
 8009316:	2e00      	cmp	r6, #0
 8009318:	d140      	bne.n	800939c <_malloc_r+0xcc>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	4631      	mov	r1, r6
 800931e:	4638      	mov	r0, r7
 8009320:	eb04 0803 	add.w	r8, r4, r3
 8009324:	f000 fafc 	bl	8009920 <_sbrk_r>
 8009328:	4580      	cmp	r8, r0
 800932a:	d13a      	bne.n	80093a2 <_malloc_r+0xd2>
 800932c:	6821      	ldr	r1, [r4, #0]
 800932e:	3503      	adds	r5, #3
 8009330:	1a6d      	subs	r5, r5, r1
 8009332:	f025 0503 	bic.w	r5, r5, #3
 8009336:	3508      	adds	r5, #8
 8009338:	2d0c      	cmp	r5, #12
 800933a:	bf38      	it	cc
 800933c:	250c      	movcc	r5, #12
 800933e:	4638      	mov	r0, r7
 8009340:	4629      	mov	r1, r5
 8009342:	f7ff ffa5 	bl	8009290 <sbrk_aligned>
 8009346:	3001      	adds	r0, #1
 8009348:	d02b      	beq.n	80093a2 <_malloc_r+0xd2>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	442b      	add	r3, r5
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	e00e      	b.n	8009370 <_malloc_r+0xa0>
 8009352:	6822      	ldr	r2, [r4, #0]
 8009354:	1b52      	subs	r2, r2, r5
 8009356:	d41e      	bmi.n	8009396 <_malloc_r+0xc6>
 8009358:	2a0b      	cmp	r2, #11
 800935a:	d916      	bls.n	800938a <_malloc_r+0xba>
 800935c:	1961      	adds	r1, r4, r5
 800935e:	42a3      	cmp	r3, r4
 8009360:	6025      	str	r5, [r4, #0]
 8009362:	bf18      	it	ne
 8009364:	6059      	strne	r1, [r3, #4]
 8009366:	6863      	ldr	r3, [r4, #4]
 8009368:	bf08      	it	eq
 800936a:	6031      	streq	r1, [r6, #0]
 800936c:	5162      	str	r2, [r4, r5]
 800936e:	604b      	str	r3, [r1, #4]
 8009370:	4638      	mov	r0, r7
 8009372:	f104 060b 	add.w	r6, r4, #11
 8009376:	f000 fdf9 	bl	8009f6c <__malloc_unlock>
 800937a:	f026 0607 	bic.w	r6, r6, #7
 800937e:	1d23      	adds	r3, r4, #4
 8009380:	1af2      	subs	r2, r6, r3
 8009382:	d0b6      	beq.n	80092f2 <_malloc_r+0x22>
 8009384:	1b9b      	subs	r3, r3, r6
 8009386:	50a3      	str	r3, [r4, r2]
 8009388:	e7b3      	b.n	80092f2 <_malloc_r+0x22>
 800938a:	6862      	ldr	r2, [r4, #4]
 800938c:	42a3      	cmp	r3, r4
 800938e:	bf0c      	ite	eq
 8009390:	6032      	streq	r2, [r6, #0]
 8009392:	605a      	strne	r2, [r3, #4]
 8009394:	e7ec      	b.n	8009370 <_malloc_r+0xa0>
 8009396:	4623      	mov	r3, r4
 8009398:	6864      	ldr	r4, [r4, #4]
 800939a:	e7b2      	b.n	8009302 <_malloc_r+0x32>
 800939c:	4634      	mov	r4, r6
 800939e:	6876      	ldr	r6, [r6, #4]
 80093a0:	e7b9      	b.n	8009316 <_malloc_r+0x46>
 80093a2:	230c      	movs	r3, #12
 80093a4:	4638      	mov	r0, r7
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	f000 fde0 	bl	8009f6c <__malloc_unlock>
 80093ac:	e7a1      	b.n	80092f2 <_malloc_r+0x22>
 80093ae:	6025      	str	r5, [r4, #0]
 80093b0:	e7de      	b.n	8009370 <_malloc_r+0xa0>
 80093b2:	bf00      	nop
 80093b4:	200004d4 	.word	0x200004d4

080093b8 <__ssputs_r>:
 80093b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093bc:	688e      	ldr	r6, [r1, #8]
 80093be:	4682      	mov	sl, r0
 80093c0:	429e      	cmp	r6, r3
 80093c2:	460c      	mov	r4, r1
 80093c4:	4690      	mov	r8, r2
 80093c6:	461f      	mov	r7, r3
 80093c8:	d838      	bhi.n	800943c <__ssputs_r+0x84>
 80093ca:	898a      	ldrh	r2, [r1, #12]
 80093cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093d0:	d032      	beq.n	8009438 <__ssputs_r+0x80>
 80093d2:	6825      	ldr	r5, [r4, #0]
 80093d4:	6909      	ldr	r1, [r1, #16]
 80093d6:	3301      	adds	r3, #1
 80093d8:	eba5 0901 	sub.w	r9, r5, r1
 80093dc:	6965      	ldr	r5, [r4, #20]
 80093de:	444b      	add	r3, r9
 80093e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093e8:	106d      	asrs	r5, r5, #1
 80093ea:	429d      	cmp	r5, r3
 80093ec:	bf38      	it	cc
 80093ee:	461d      	movcc	r5, r3
 80093f0:	0553      	lsls	r3, r2, #21
 80093f2:	d531      	bpl.n	8009458 <__ssputs_r+0xa0>
 80093f4:	4629      	mov	r1, r5
 80093f6:	f7ff ff6b 	bl	80092d0 <_malloc_r>
 80093fa:	4606      	mov	r6, r0
 80093fc:	b950      	cbnz	r0, 8009414 <__ssputs_r+0x5c>
 80093fe:	230c      	movs	r3, #12
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	f8ca 3000 	str.w	r3, [sl]
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009414:	464a      	mov	r2, r9
 8009416:	6921      	ldr	r1, [r4, #16]
 8009418:	f7fd ff8e 	bl	8007338 <memcpy>
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009426:	81a3      	strh	r3, [r4, #12]
 8009428:	6126      	str	r6, [r4, #16]
 800942a:	444e      	add	r6, r9
 800942c:	6026      	str	r6, [r4, #0]
 800942e:	463e      	mov	r6, r7
 8009430:	6165      	str	r5, [r4, #20]
 8009432:	eba5 0509 	sub.w	r5, r5, r9
 8009436:	60a5      	str	r5, [r4, #8]
 8009438:	42be      	cmp	r6, r7
 800943a:	d900      	bls.n	800943e <__ssputs_r+0x86>
 800943c:	463e      	mov	r6, r7
 800943e:	4632      	mov	r2, r6
 8009440:	4641      	mov	r1, r8
 8009442:	6820      	ldr	r0, [r4, #0]
 8009444:	f000 fd72 	bl	8009f2c <memmove>
 8009448:	68a3      	ldr	r3, [r4, #8]
 800944a:	2000      	movs	r0, #0
 800944c:	1b9b      	subs	r3, r3, r6
 800944e:	60a3      	str	r3, [r4, #8]
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	4433      	add	r3, r6
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	e7db      	b.n	8009410 <__ssputs_r+0x58>
 8009458:	462a      	mov	r2, r5
 800945a:	f000 fd8d 	bl	8009f78 <_realloc_r>
 800945e:	4606      	mov	r6, r0
 8009460:	2800      	cmp	r0, #0
 8009462:	d1e1      	bne.n	8009428 <__ssputs_r+0x70>
 8009464:	4650      	mov	r0, sl
 8009466:	6921      	ldr	r1, [r4, #16]
 8009468:	f7ff feca 	bl	8009200 <_free_r>
 800946c:	e7c7      	b.n	80093fe <__ssputs_r+0x46>
	...

08009470 <_svfiprintf_r>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	4698      	mov	r8, r3
 8009476:	898b      	ldrh	r3, [r1, #12]
 8009478:	4607      	mov	r7, r0
 800947a:	061b      	lsls	r3, r3, #24
 800947c:	460d      	mov	r5, r1
 800947e:	4614      	mov	r4, r2
 8009480:	b09d      	sub	sp, #116	; 0x74
 8009482:	d50e      	bpl.n	80094a2 <_svfiprintf_r+0x32>
 8009484:	690b      	ldr	r3, [r1, #16]
 8009486:	b963      	cbnz	r3, 80094a2 <_svfiprintf_r+0x32>
 8009488:	2140      	movs	r1, #64	; 0x40
 800948a:	f7ff ff21 	bl	80092d0 <_malloc_r>
 800948e:	6028      	str	r0, [r5, #0]
 8009490:	6128      	str	r0, [r5, #16]
 8009492:	b920      	cbnz	r0, 800949e <_svfiprintf_r+0x2e>
 8009494:	230c      	movs	r3, #12
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	f04f 30ff 	mov.w	r0, #4294967295
 800949c:	e0d1      	b.n	8009642 <_svfiprintf_r+0x1d2>
 800949e:	2340      	movs	r3, #64	; 0x40
 80094a0:	616b      	str	r3, [r5, #20]
 80094a2:	2300      	movs	r3, #0
 80094a4:	9309      	str	r3, [sp, #36]	; 0x24
 80094a6:	2320      	movs	r3, #32
 80094a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094ac:	2330      	movs	r3, #48	; 0x30
 80094ae:	f04f 0901 	mov.w	r9, #1
 80094b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80094b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800965c <_svfiprintf_r+0x1ec>
 80094ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094be:	4623      	mov	r3, r4
 80094c0:	469a      	mov	sl, r3
 80094c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094c6:	b10a      	cbz	r2, 80094cc <_svfiprintf_r+0x5c>
 80094c8:	2a25      	cmp	r2, #37	; 0x25
 80094ca:	d1f9      	bne.n	80094c0 <_svfiprintf_r+0x50>
 80094cc:	ebba 0b04 	subs.w	fp, sl, r4
 80094d0:	d00b      	beq.n	80094ea <_svfiprintf_r+0x7a>
 80094d2:	465b      	mov	r3, fp
 80094d4:	4622      	mov	r2, r4
 80094d6:	4629      	mov	r1, r5
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff ff6d 	bl	80093b8 <__ssputs_r>
 80094de:	3001      	adds	r0, #1
 80094e0:	f000 80aa 	beq.w	8009638 <_svfiprintf_r+0x1c8>
 80094e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e6:	445a      	add	r2, fp
 80094e8:	9209      	str	r2, [sp, #36]	; 0x24
 80094ea:	f89a 3000 	ldrb.w	r3, [sl]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 80a2 	beq.w	8009638 <_svfiprintf_r+0x1c8>
 80094f4:	2300      	movs	r3, #0
 80094f6:	f04f 32ff 	mov.w	r2, #4294967295
 80094fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094fe:	f10a 0a01 	add.w	sl, sl, #1
 8009502:	9304      	str	r3, [sp, #16]
 8009504:	9307      	str	r3, [sp, #28]
 8009506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800950a:	931a      	str	r3, [sp, #104]	; 0x68
 800950c:	4654      	mov	r4, sl
 800950e:	2205      	movs	r2, #5
 8009510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009514:	4851      	ldr	r0, [pc, #324]	; (800965c <_svfiprintf_r+0x1ec>)
 8009516:	f7ff facf 	bl	8008ab8 <memchr>
 800951a:	9a04      	ldr	r2, [sp, #16]
 800951c:	b9d8      	cbnz	r0, 8009556 <_svfiprintf_r+0xe6>
 800951e:	06d0      	lsls	r0, r2, #27
 8009520:	bf44      	itt	mi
 8009522:	2320      	movmi	r3, #32
 8009524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009528:	0711      	lsls	r1, r2, #28
 800952a:	bf44      	itt	mi
 800952c:	232b      	movmi	r3, #43	; 0x2b
 800952e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009532:	f89a 3000 	ldrb.w	r3, [sl]
 8009536:	2b2a      	cmp	r3, #42	; 0x2a
 8009538:	d015      	beq.n	8009566 <_svfiprintf_r+0xf6>
 800953a:	4654      	mov	r4, sl
 800953c:	2000      	movs	r0, #0
 800953e:	f04f 0c0a 	mov.w	ip, #10
 8009542:	9a07      	ldr	r2, [sp, #28]
 8009544:	4621      	mov	r1, r4
 8009546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800954a:	3b30      	subs	r3, #48	; 0x30
 800954c:	2b09      	cmp	r3, #9
 800954e:	d94e      	bls.n	80095ee <_svfiprintf_r+0x17e>
 8009550:	b1b0      	cbz	r0, 8009580 <_svfiprintf_r+0x110>
 8009552:	9207      	str	r2, [sp, #28]
 8009554:	e014      	b.n	8009580 <_svfiprintf_r+0x110>
 8009556:	eba0 0308 	sub.w	r3, r0, r8
 800955a:	fa09 f303 	lsl.w	r3, r9, r3
 800955e:	4313      	orrs	r3, r2
 8009560:	46a2      	mov	sl, r4
 8009562:	9304      	str	r3, [sp, #16]
 8009564:	e7d2      	b.n	800950c <_svfiprintf_r+0x9c>
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	1d19      	adds	r1, r3, #4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	9103      	str	r1, [sp, #12]
 800956e:	2b00      	cmp	r3, #0
 8009570:	bfbb      	ittet	lt
 8009572:	425b      	neglt	r3, r3
 8009574:	f042 0202 	orrlt.w	r2, r2, #2
 8009578:	9307      	strge	r3, [sp, #28]
 800957a:	9307      	strlt	r3, [sp, #28]
 800957c:	bfb8      	it	lt
 800957e:	9204      	strlt	r2, [sp, #16]
 8009580:	7823      	ldrb	r3, [r4, #0]
 8009582:	2b2e      	cmp	r3, #46	; 0x2e
 8009584:	d10c      	bne.n	80095a0 <_svfiprintf_r+0x130>
 8009586:	7863      	ldrb	r3, [r4, #1]
 8009588:	2b2a      	cmp	r3, #42	; 0x2a
 800958a:	d135      	bne.n	80095f8 <_svfiprintf_r+0x188>
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	3402      	adds	r4, #2
 8009590:	1d1a      	adds	r2, r3, #4
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	9203      	str	r2, [sp, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	bfb8      	it	lt
 800959a:	f04f 33ff 	movlt.w	r3, #4294967295
 800959e:	9305      	str	r3, [sp, #20]
 80095a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009660 <_svfiprintf_r+0x1f0>
 80095a4:	2203      	movs	r2, #3
 80095a6:	4650      	mov	r0, sl
 80095a8:	7821      	ldrb	r1, [r4, #0]
 80095aa:	f7ff fa85 	bl	8008ab8 <memchr>
 80095ae:	b140      	cbz	r0, 80095c2 <_svfiprintf_r+0x152>
 80095b0:	2340      	movs	r3, #64	; 0x40
 80095b2:	eba0 000a 	sub.w	r0, r0, sl
 80095b6:	fa03 f000 	lsl.w	r0, r3, r0
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	3401      	adds	r4, #1
 80095be:	4303      	orrs	r3, r0
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c6:	2206      	movs	r2, #6
 80095c8:	4826      	ldr	r0, [pc, #152]	; (8009664 <_svfiprintf_r+0x1f4>)
 80095ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095ce:	f7ff fa73 	bl	8008ab8 <memchr>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d038      	beq.n	8009648 <_svfiprintf_r+0x1d8>
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <_svfiprintf_r+0x1f8>)
 80095d8:	bb1b      	cbnz	r3, 8009622 <_svfiprintf_r+0x1b2>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	3307      	adds	r3, #7
 80095de:	f023 0307 	bic.w	r3, r3, #7
 80095e2:	3308      	adds	r3, #8
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e8:	4433      	add	r3, r6
 80095ea:	9309      	str	r3, [sp, #36]	; 0x24
 80095ec:	e767      	b.n	80094be <_svfiprintf_r+0x4e>
 80095ee:	460c      	mov	r4, r1
 80095f0:	2001      	movs	r0, #1
 80095f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80095f6:	e7a5      	b.n	8009544 <_svfiprintf_r+0xd4>
 80095f8:	2300      	movs	r3, #0
 80095fa:	f04f 0c0a 	mov.w	ip, #10
 80095fe:	4619      	mov	r1, r3
 8009600:	3401      	adds	r4, #1
 8009602:	9305      	str	r3, [sp, #20]
 8009604:	4620      	mov	r0, r4
 8009606:	f810 2b01 	ldrb.w	r2, [r0], #1
 800960a:	3a30      	subs	r2, #48	; 0x30
 800960c:	2a09      	cmp	r2, #9
 800960e:	d903      	bls.n	8009618 <_svfiprintf_r+0x1a8>
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0c5      	beq.n	80095a0 <_svfiprintf_r+0x130>
 8009614:	9105      	str	r1, [sp, #20]
 8009616:	e7c3      	b.n	80095a0 <_svfiprintf_r+0x130>
 8009618:	4604      	mov	r4, r0
 800961a:	2301      	movs	r3, #1
 800961c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009620:	e7f0      	b.n	8009604 <_svfiprintf_r+0x194>
 8009622:	ab03      	add	r3, sp, #12
 8009624:	9300      	str	r3, [sp, #0]
 8009626:	462a      	mov	r2, r5
 8009628:	4638      	mov	r0, r7
 800962a:	4b10      	ldr	r3, [pc, #64]	; (800966c <_svfiprintf_r+0x1fc>)
 800962c:	a904      	add	r1, sp, #16
 800962e:	f7fd ff37 	bl	80074a0 <_printf_float>
 8009632:	1c42      	adds	r2, r0, #1
 8009634:	4606      	mov	r6, r0
 8009636:	d1d6      	bne.n	80095e6 <_svfiprintf_r+0x176>
 8009638:	89ab      	ldrh	r3, [r5, #12]
 800963a:	065b      	lsls	r3, r3, #25
 800963c:	f53f af2c 	bmi.w	8009498 <_svfiprintf_r+0x28>
 8009640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009642:	b01d      	add	sp, #116	; 0x74
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	ab03      	add	r3, sp, #12
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	462a      	mov	r2, r5
 800964e:	4638      	mov	r0, r7
 8009650:	4b06      	ldr	r3, [pc, #24]	; (800966c <_svfiprintf_r+0x1fc>)
 8009652:	a904      	add	r1, sp, #16
 8009654:	f7fe f9c0 	bl	80079d8 <_printf_i>
 8009658:	e7eb      	b.n	8009632 <_svfiprintf_r+0x1c2>
 800965a:	bf00      	nop
 800965c:	0800a66c 	.word	0x0800a66c
 8009660:	0800a672 	.word	0x0800a672
 8009664:	0800a676 	.word	0x0800a676
 8009668:	080074a1 	.word	0x080074a1
 800966c:	080093b9 	.word	0x080093b9

08009670 <__sfputc_r>:
 8009670:	6893      	ldr	r3, [r2, #8]
 8009672:	b410      	push	{r4}
 8009674:	3b01      	subs	r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	6093      	str	r3, [r2, #8]
 800967a:	da07      	bge.n	800968c <__sfputc_r+0x1c>
 800967c:	6994      	ldr	r4, [r2, #24]
 800967e:	42a3      	cmp	r3, r4
 8009680:	db01      	blt.n	8009686 <__sfputc_r+0x16>
 8009682:	290a      	cmp	r1, #10
 8009684:	d102      	bne.n	800968c <__sfputc_r+0x1c>
 8009686:	bc10      	pop	{r4}
 8009688:	f000 b95a 	b.w	8009940 <__swbuf_r>
 800968c:	6813      	ldr	r3, [r2, #0]
 800968e:	1c58      	adds	r0, r3, #1
 8009690:	6010      	str	r0, [r2, #0]
 8009692:	7019      	strb	r1, [r3, #0]
 8009694:	4608      	mov	r0, r1
 8009696:	bc10      	pop	{r4}
 8009698:	4770      	bx	lr

0800969a <__sfputs_r>:
 800969a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969c:	4606      	mov	r6, r0
 800969e:	460f      	mov	r7, r1
 80096a0:	4614      	mov	r4, r2
 80096a2:	18d5      	adds	r5, r2, r3
 80096a4:	42ac      	cmp	r4, r5
 80096a6:	d101      	bne.n	80096ac <__sfputs_r+0x12>
 80096a8:	2000      	movs	r0, #0
 80096aa:	e007      	b.n	80096bc <__sfputs_r+0x22>
 80096ac:	463a      	mov	r2, r7
 80096ae:	4630      	mov	r0, r6
 80096b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b4:	f7ff ffdc 	bl	8009670 <__sfputc_r>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d1f3      	bne.n	80096a4 <__sfputs_r+0xa>
 80096bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096c0 <_vfiprintf_r>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	460d      	mov	r5, r1
 80096c6:	4614      	mov	r4, r2
 80096c8:	4698      	mov	r8, r3
 80096ca:	4606      	mov	r6, r0
 80096cc:	b09d      	sub	sp, #116	; 0x74
 80096ce:	b118      	cbz	r0, 80096d8 <_vfiprintf_r+0x18>
 80096d0:	6983      	ldr	r3, [r0, #24]
 80096d2:	b90b      	cbnz	r3, 80096d8 <_vfiprintf_r+0x18>
 80096d4:	f000 fb12 	bl	8009cfc <__sinit>
 80096d8:	4b89      	ldr	r3, [pc, #548]	; (8009900 <_vfiprintf_r+0x240>)
 80096da:	429d      	cmp	r5, r3
 80096dc:	d11b      	bne.n	8009716 <_vfiprintf_r+0x56>
 80096de:	6875      	ldr	r5, [r6, #4]
 80096e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e2:	07d9      	lsls	r1, r3, #31
 80096e4:	d405      	bmi.n	80096f2 <_vfiprintf_r+0x32>
 80096e6:	89ab      	ldrh	r3, [r5, #12]
 80096e8:	059a      	lsls	r2, r3, #22
 80096ea:	d402      	bmi.n	80096f2 <_vfiprintf_r+0x32>
 80096ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ee:	f000 fba3 	bl	8009e38 <__retarget_lock_acquire_recursive>
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	071b      	lsls	r3, r3, #28
 80096f6:	d501      	bpl.n	80096fc <_vfiprintf_r+0x3c>
 80096f8:	692b      	ldr	r3, [r5, #16]
 80096fa:	b9eb      	cbnz	r3, 8009738 <_vfiprintf_r+0x78>
 80096fc:	4629      	mov	r1, r5
 80096fe:	4630      	mov	r0, r6
 8009700:	f000 f970 	bl	80099e4 <__swsetup_r>
 8009704:	b1c0      	cbz	r0, 8009738 <_vfiprintf_r+0x78>
 8009706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009708:	07dc      	lsls	r4, r3, #31
 800970a:	d50e      	bpl.n	800972a <_vfiprintf_r+0x6a>
 800970c:	f04f 30ff 	mov.w	r0, #4294967295
 8009710:	b01d      	add	sp, #116	; 0x74
 8009712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009716:	4b7b      	ldr	r3, [pc, #492]	; (8009904 <_vfiprintf_r+0x244>)
 8009718:	429d      	cmp	r5, r3
 800971a:	d101      	bne.n	8009720 <_vfiprintf_r+0x60>
 800971c:	68b5      	ldr	r5, [r6, #8]
 800971e:	e7df      	b.n	80096e0 <_vfiprintf_r+0x20>
 8009720:	4b79      	ldr	r3, [pc, #484]	; (8009908 <_vfiprintf_r+0x248>)
 8009722:	429d      	cmp	r5, r3
 8009724:	bf08      	it	eq
 8009726:	68f5      	ldreq	r5, [r6, #12]
 8009728:	e7da      	b.n	80096e0 <_vfiprintf_r+0x20>
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	0598      	lsls	r0, r3, #22
 800972e:	d4ed      	bmi.n	800970c <_vfiprintf_r+0x4c>
 8009730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009732:	f000 fb82 	bl	8009e3a <__retarget_lock_release_recursive>
 8009736:	e7e9      	b.n	800970c <_vfiprintf_r+0x4c>
 8009738:	2300      	movs	r3, #0
 800973a:	9309      	str	r3, [sp, #36]	; 0x24
 800973c:	2320      	movs	r3, #32
 800973e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009742:	2330      	movs	r3, #48	; 0x30
 8009744:	f04f 0901 	mov.w	r9, #1
 8009748:	f8cd 800c 	str.w	r8, [sp, #12]
 800974c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800990c <_vfiprintf_r+0x24c>
 8009750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009754:	4623      	mov	r3, r4
 8009756:	469a      	mov	sl, r3
 8009758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800975c:	b10a      	cbz	r2, 8009762 <_vfiprintf_r+0xa2>
 800975e:	2a25      	cmp	r2, #37	; 0x25
 8009760:	d1f9      	bne.n	8009756 <_vfiprintf_r+0x96>
 8009762:	ebba 0b04 	subs.w	fp, sl, r4
 8009766:	d00b      	beq.n	8009780 <_vfiprintf_r+0xc0>
 8009768:	465b      	mov	r3, fp
 800976a:	4622      	mov	r2, r4
 800976c:	4629      	mov	r1, r5
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff ff93 	bl	800969a <__sfputs_r>
 8009774:	3001      	adds	r0, #1
 8009776:	f000 80aa 	beq.w	80098ce <_vfiprintf_r+0x20e>
 800977a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800977c:	445a      	add	r2, fp
 800977e:	9209      	str	r2, [sp, #36]	; 0x24
 8009780:	f89a 3000 	ldrb.w	r3, [sl]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 80a2 	beq.w	80098ce <_vfiprintf_r+0x20e>
 800978a:	2300      	movs	r3, #0
 800978c:	f04f 32ff 	mov.w	r2, #4294967295
 8009790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009794:	f10a 0a01 	add.w	sl, sl, #1
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	9307      	str	r3, [sp, #28]
 800979c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097a0:	931a      	str	r3, [sp, #104]	; 0x68
 80097a2:	4654      	mov	r4, sl
 80097a4:	2205      	movs	r2, #5
 80097a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097aa:	4858      	ldr	r0, [pc, #352]	; (800990c <_vfiprintf_r+0x24c>)
 80097ac:	f7ff f984 	bl	8008ab8 <memchr>
 80097b0:	9a04      	ldr	r2, [sp, #16]
 80097b2:	b9d8      	cbnz	r0, 80097ec <_vfiprintf_r+0x12c>
 80097b4:	06d1      	lsls	r1, r2, #27
 80097b6:	bf44      	itt	mi
 80097b8:	2320      	movmi	r3, #32
 80097ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097be:	0713      	lsls	r3, r2, #28
 80097c0:	bf44      	itt	mi
 80097c2:	232b      	movmi	r3, #43	; 0x2b
 80097c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097c8:	f89a 3000 	ldrb.w	r3, [sl]
 80097cc:	2b2a      	cmp	r3, #42	; 0x2a
 80097ce:	d015      	beq.n	80097fc <_vfiprintf_r+0x13c>
 80097d0:	4654      	mov	r4, sl
 80097d2:	2000      	movs	r0, #0
 80097d4:	f04f 0c0a 	mov.w	ip, #10
 80097d8:	9a07      	ldr	r2, [sp, #28]
 80097da:	4621      	mov	r1, r4
 80097dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e0:	3b30      	subs	r3, #48	; 0x30
 80097e2:	2b09      	cmp	r3, #9
 80097e4:	d94e      	bls.n	8009884 <_vfiprintf_r+0x1c4>
 80097e6:	b1b0      	cbz	r0, 8009816 <_vfiprintf_r+0x156>
 80097e8:	9207      	str	r2, [sp, #28]
 80097ea:	e014      	b.n	8009816 <_vfiprintf_r+0x156>
 80097ec:	eba0 0308 	sub.w	r3, r0, r8
 80097f0:	fa09 f303 	lsl.w	r3, r9, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	46a2      	mov	sl, r4
 80097f8:	9304      	str	r3, [sp, #16]
 80097fa:	e7d2      	b.n	80097a2 <_vfiprintf_r+0xe2>
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	1d19      	adds	r1, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	9103      	str	r1, [sp, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfbb      	ittet	lt
 8009808:	425b      	neglt	r3, r3
 800980a:	f042 0202 	orrlt.w	r2, r2, #2
 800980e:	9307      	strge	r3, [sp, #28]
 8009810:	9307      	strlt	r3, [sp, #28]
 8009812:	bfb8      	it	lt
 8009814:	9204      	strlt	r2, [sp, #16]
 8009816:	7823      	ldrb	r3, [r4, #0]
 8009818:	2b2e      	cmp	r3, #46	; 0x2e
 800981a:	d10c      	bne.n	8009836 <_vfiprintf_r+0x176>
 800981c:	7863      	ldrb	r3, [r4, #1]
 800981e:	2b2a      	cmp	r3, #42	; 0x2a
 8009820:	d135      	bne.n	800988e <_vfiprintf_r+0x1ce>
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	3402      	adds	r4, #2
 8009826:	1d1a      	adds	r2, r3, #4
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	9203      	str	r2, [sp, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	bfb8      	it	lt
 8009830:	f04f 33ff 	movlt.w	r3, #4294967295
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009910 <_vfiprintf_r+0x250>
 800983a:	2203      	movs	r2, #3
 800983c:	4650      	mov	r0, sl
 800983e:	7821      	ldrb	r1, [r4, #0]
 8009840:	f7ff f93a 	bl	8008ab8 <memchr>
 8009844:	b140      	cbz	r0, 8009858 <_vfiprintf_r+0x198>
 8009846:	2340      	movs	r3, #64	; 0x40
 8009848:	eba0 000a 	sub.w	r0, r0, sl
 800984c:	fa03 f000 	lsl.w	r0, r3, r0
 8009850:	9b04      	ldr	r3, [sp, #16]
 8009852:	3401      	adds	r4, #1
 8009854:	4303      	orrs	r3, r0
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800985c:	2206      	movs	r2, #6
 800985e:	482d      	ldr	r0, [pc, #180]	; (8009914 <_vfiprintf_r+0x254>)
 8009860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009864:	f7ff f928 	bl	8008ab8 <memchr>
 8009868:	2800      	cmp	r0, #0
 800986a:	d03f      	beq.n	80098ec <_vfiprintf_r+0x22c>
 800986c:	4b2a      	ldr	r3, [pc, #168]	; (8009918 <_vfiprintf_r+0x258>)
 800986e:	bb1b      	cbnz	r3, 80098b8 <_vfiprintf_r+0x1f8>
 8009870:	9b03      	ldr	r3, [sp, #12]
 8009872:	3307      	adds	r3, #7
 8009874:	f023 0307 	bic.w	r3, r3, #7
 8009878:	3308      	adds	r3, #8
 800987a:	9303      	str	r3, [sp, #12]
 800987c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800987e:	443b      	add	r3, r7
 8009880:	9309      	str	r3, [sp, #36]	; 0x24
 8009882:	e767      	b.n	8009754 <_vfiprintf_r+0x94>
 8009884:	460c      	mov	r4, r1
 8009886:	2001      	movs	r0, #1
 8009888:	fb0c 3202 	mla	r2, ip, r2, r3
 800988c:	e7a5      	b.n	80097da <_vfiprintf_r+0x11a>
 800988e:	2300      	movs	r3, #0
 8009890:	f04f 0c0a 	mov.w	ip, #10
 8009894:	4619      	mov	r1, r3
 8009896:	3401      	adds	r4, #1
 8009898:	9305      	str	r3, [sp, #20]
 800989a:	4620      	mov	r0, r4
 800989c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098a0:	3a30      	subs	r2, #48	; 0x30
 80098a2:	2a09      	cmp	r2, #9
 80098a4:	d903      	bls.n	80098ae <_vfiprintf_r+0x1ee>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0c5      	beq.n	8009836 <_vfiprintf_r+0x176>
 80098aa:	9105      	str	r1, [sp, #20]
 80098ac:	e7c3      	b.n	8009836 <_vfiprintf_r+0x176>
 80098ae:	4604      	mov	r4, r0
 80098b0:	2301      	movs	r3, #1
 80098b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80098b6:	e7f0      	b.n	800989a <_vfiprintf_r+0x1da>
 80098b8:	ab03      	add	r3, sp, #12
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	462a      	mov	r2, r5
 80098be:	4630      	mov	r0, r6
 80098c0:	4b16      	ldr	r3, [pc, #88]	; (800991c <_vfiprintf_r+0x25c>)
 80098c2:	a904      	add	r1, sp, #16
 80098c4:	f7fd fdec 	bl	80074a0 <_printf_float>
 80098c8:	4607      	mov	r7, r0
 80098ca:	1c78      	adds	r0, r7, #1
 80098cc:	d1d6      	bne.n	800987c <_vfiprintf_r+0x1bc>
 80098ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d0:	07d9      	lsls	r1, r3, #31
 80098d2:	d405      	bmi.n	80098e0 <_vfiprintf_r+0x220>
 80098d4:	89ab      	ldrh	r3, [r5, #12]
 80098d6:	059a      	lsls	r2, r3, #22
 80098d8:	d402      	bmi.n	80098e0 <_vfiprintf_r+0x220>
 80098da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098dc:	f000 faad 	bl	8009e3a <__retarget_lock_release_recursive>
 80098e0:	89ab      	ldrh	r3, [r5, #12]
 80098e2:	065b      	lsls	r3, r3, #25
 80098e4:	f53f af12 	bmi.w	800970c <_vfiprintf_r+0x4c>
 80098e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ea:	e711      	b.n	8009710 <_vfiprintf_r+0x50>
 80098ec:	ab03      	add	r3, sp, #12
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	462a      	mov	r2, r5
 80098f2:	4630      	mov	r0, r6
 80098f4:	4b09      	ldr	r3, [pc, #36]	; (800991c <_vfiprintf_r+0x25c>)
 80098f6:	a904      	add	r1, sp, #16
 80098f8:	f7fe f86e 	bl	80079d8 <_printf_i>
 80098fc:	e7e4      	b.n	80098c8 <_vfiprintf_r+0x208>
 80098fe:	bf00      	nop
 8009900:	0800a6a0 	.word	0x0800a6a0
 8009904:	0800a6c0 	.word	0x0800a6c0
 8009908:	0800a680 	.word	0x0800a680
 800990c:	0800a66c 	.word	0x0800a66c
 8009910:	0800a672 	.word	0x0800a672
 8009914:	0800a676 	.word	0x0800a676
 8009918:	080074a1 	.word	0x080074a1
 800991c:	0800969b 	.word	0x0800969b

08009920 <_sbrk_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	2300      	movs	r3, #0
 8009924:	4d05      	ldr	r5, [pc, #20]	; (800993c <_sbrk_r+0x1c>)
 8009926:	4604      	mov	r4, r0
 8009928:	4608      	mov	r0, r1
 800992a:	602b      	str	r3, [r5, #0]
 800992c:	f7f8 f95c 	bl	8001be8 <_sbrk>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_sbrk_r+0x1a>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_sbrk_r+0x1a>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	200004e0 	.word	0x200004e0

08009940 <__swbuf_r>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	460e      	mov	r6, r1
 8009944:	4614      	mov	r4, r2
 8009946:	4605      	mov	r5, r0
 8009948:	b118      	cbz	r0, 8009952 <__swbuf_r+0x12>
 800994a:	6983      	ldr	r3, [r0, #24]
 800994c:	b90b      	cbnz	r3, 8009952 <__swbuf_r+0x12>
 800994e:	f000 f9d5 	bl	8009cfc <__sinit>
 8009952:	4b21      	ldr	r3, [pc, #132]	; (80099d8 <__swbuf_r+0x98>)
 8009954:	429c      	cmp	r4, r3
 8009956:	d12b      	bne.n	80099b0 <__swbuf_r+0x70>
 8009958:	686c      	ldr	r4, [r5, #4]
 800995a:	69a3      	ldr	r3, [r4, #24]
 800995c:	60a3      	str	r3, [r4, #8]
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	071a      	lsls	r2, r3, #28
 8009962:	d52f      	bpl.n	80099c4 <__swbuf_r+0x84>
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	b36b      	cbz	r3, 80099c4 <__swbuf_r+0x84>
 8009968:	6923      	ldr	r3, [r4, #16]
 800996a:	6820      	ldr	r0, [r4, #0]
 800996c:	b2f6      	uxtb	r6, r6
 800996e:	1ac0      	subs	r0, r0, r3
 8009970:	6963      	ldr	r3, [r4, #20]
 8009972:	4637      	mov	r7, r6
 8009974:	4283      	cmp	r3, r0
 8009976:	dc04      	bgt.n	8009982 <__swbuf_r+0x42>
 8009978:	4621      	mov	r1, r4
 800997a:	4628      	mov	r0, r5
 800997c:	f000 f92a 	bl	8009bd4 <_fflush_r>
 8009980:	bb30      	cbnz	r0, 80099d0 <__swbuf_r+0x90>
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	3001      	adds	r0, #1
 8009986:	3b01      	subs	r3, #1
 8009988:	60a3      	str	r3, [r4, #8]
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	6022      	str	r2, [r4, #0]
 8009990:	701e      	strb	r6, [r3, #0]
 8009992:	6963      	ldr	r3, [r4, #20]
 8009994:	4283      	cmp	r3, r0
 8009996:	d004      	beq.n	80099a2 <__swbuf_r+0x62>
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	07db      	lsls	r3, r3, #31
 800999c:	d506      	bpl.n	80099ac <__swbuf_r+0x6c>
 800999e:	2e0a      	cmp	r6, #10
 80099a0:	d104      	bne.n	80099ac <__swbuf_r+0x6c>
 80099a2:	4621      	mov	r1, r4
 80099a4:	4628      	mov	r0, r5
 80099a6:	f000 f915 	bl	8009bd4 <_fflush_r>
 80099aa:	b988      	cbnz	r0, 80099d0 <__swbuf_r+0x90>
 80099ac:	4638      	mov	r0, r7
 80099ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b0:	4b0a      	ldr	r3, [pc, #40]	; (80099dc <__swbuf_r+0x9c>)
 80099b2:	429c      	cmp	r4, r3
 80099b4:	d101      	bne.n	80099ba <__swbuf_r+0x7a>
 80099b6:	68ac      	ldr	r4, [r5, #8]
 80099b8:	e7cf      	b.n	800995a <__swbuf_r+0x1a>
 80099ba:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <__swbuf_r+0xa0>)
 80099bc:	429c      	cmp	r4, r3
 80099be:	bf08      	it	eq
 80099c0:	68ec      	ldreq	r4, [r5, #12]
 80099c2:	e7ca      	b.n	800995a <__swbuf_r+0x1a>
 80099c4:	4621      	mov	r1, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f80c 	bl	80099e4 <__swsetup_r>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d0cb      	beq.n	8009968 <__swbuf_r+0x28>
 80099d0:	f04f 37ff 	mov.w	r7, #4294967295
 80099d4:	e7ea      	b.n	80099ac <__swbuf_r+0x6c>
 80099d6:	bf00      	nop
 80099d8:	0800a6a0 	.word	0x0800a6a0
 80099dc:	0800a6c0 	.word	0x0800a6c0
 80099e0:	0800a680 	.word	0x0800a680

080099e4 <__swsetup_r>:
 80099e4:	4b32      	ldr	r3, [pc, #200]	; (8009ab0 <__swsetup_r+0xcc>)
 80099e6:	b570      	push	{r4, r5, r6, lr}
 80099e8:	681d      	ldr	r5, [r3, #0]
 80099ea:	4606      	mov	r6, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	b125      	cbz	r5, 80099fa <__swsetup_r+0x16>
 80099f0:	69ab      	ldr	r3, [r5, #24]
 80099f2:	b913      	cbnz	r3, 80099fa <__swsetup_r+0x16>
 80099f4:	4628      	mov	r0, r5
 80099f6:	f000 f981 	bl	8009cfc <__sinit>
 80099fa:	4b2e      	ldr	r3, [pc, #184]	; (8009ab4 <__swsetup_r+0xd0>)
 80099fc:	429c      	cmp	r4, r3
 80099fe:	d10f      	bne.n	8009a20 <__swsetup_r+0x3c>
 8009a00:	686c      	ldr	r4, [r5, #4]
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a08:	0719      	lsls	r1, r3, #28
 8009a0a:	d42c      	bmi.n	8009a66 <__swsetup_r+0x82>
 8009a0c:	06dd      	lsls	r5, r3, #27
 8009a0e:	d411      	bmi.n	8009a34 <__swsetup_r+0x50>
 8009a10:	2309      	movs	r3, #9
 8009a12:	6033      	str	r3, [r6, #0]
 8009a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	e03e      	b.n	8009a9e <__swsetup_r+0xba>
 8009a20:	4b25      	ldr	r3, [pc, #148]	; (8009ab8 <__swsetup_r+0xd4>)
 8009a22:	429c      	cmp	r4, r3
 8009a24:	d101      	bne.n	8009a2a <__swsetup_r+0x46>
 8009a26:	68ac      	ldr	r4, [r5, #8]
 8009a28:	e7eb      	b.n	8009a02 <__swsetup_r+0x1e>
 8009a2a:	4b24      	ldr	r3, [pc, #144]	; (8009abc <__swsetup_r+0xd8>)
 8009a2c:	429c      	cmp	r4, r3
 8009a2e:	bf08      	it	eq
 8009a30:	68ec      	ldreq	r4, [r5, #12]
 8009a32:	e7e6      	b.n	8009a02 <__swsetup_r+0x1e>
 8009a34:	0758      	lsls	r0, r3, #29
 8009a36:	d512      	bpl.n	8009a5e <__swsetup_r+0x7a>
 8009a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a3a:	b141      	cbz	r1, 8009a4e <__swsetup_r+0x6a>
 8009a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a40:	4299      	cmp	r1, r3
 8009a42:	d002      	beq.n	8009a4a <__swsetup_r+0x66>
 8009a44:	4630      	mov	r0, r6
 8009a46:	f7ff fbdb 	bl	8009200 <_free_r>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a54:	81a3      	strh	r3, [r4, #12]
 8009a56:	2300      	movs	r3, #0
 8009a58:	6063      	str	r3, [r4, #4]
 8009a5a:	6923      	ldr	r3, [r4, #16]
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	f043 0308 	orr.w	r3, r3, #8
 8009a64:	81a3      	strh	r3, [r4, #12]
 8009a66:	6923      	ldr	r3, [r4, #16]
 8009a68:	b94b      	cbnz	r3, 8009a7e <__swsetup_r+0x9a>
 8009a6a:	89a3      	ldrh	r3, [r4, #12]
 8009a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a74:	d003      	beq.n	8009a7e <__swsetup_r+0x9a>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 fa05 	bl	8009e88 <__smakebuf_r>
 8009a7e:	89a0      	ldrh	r0, [r4, #12]
 8009a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a84:	f010 0301 	ands.w	r3, r0, #1
 8009a88:	d00a      	beq.n	8009aa0 <__swsetup_r+0xbc>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60a3      	str	r3, [r4, #8]
 8009a8e:	6963      	ldr	r3, [r4, #20]
 8009a90:	425b      	negs	r3, r3
 8009a92:	61a3      	str	r3, [r4, #24]
 8009a94:	6923      	ldr	r3, [r4, #16]
 8009a96:	b943      	cbnz	r3, 8009aaa <__swsetup_r+0xc6>
 8009a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a9c:	d1ba      	bne.n	8009a14 <__swsetup_r+0x30>
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	0781      	lsls	r1, r0, #30
 8009aa2:	bf58      	it	pl
 8009aa4:	6963      	ldrpl	r3, [r4, #20]
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	e7f4      	b.n	8009a94 <__swsetup_r+0xb0>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	e7f7      	b.n	8009a9e <__swsetup_r+0xba>
 8009aae:	bf00      	nop
 8009ab0:	2000006c 	.word	0x2000006c
 8009ab4:	0800a6a0 	.word	0x0800a6a0
 8009ab8:	0800a6c0 	.word	0x0800a6c0
 8009abc:	0800a680 	.word	0x0800a680

08009ac0 <abort>:
 8009ac0:	2006      	movs	r0, #6
 8009ac2:	b508      	push	{r3, lr}
 8009ac4:	f000 fab0 	bl	800a028 <raise>
 8009ac8:	2001      	movs	r0, #1
 8009aca:	f7f8 f81a 	bl	8001b02 <_exit>
	...

08009ad0 <__sflush_r>:
 8009ad0:	898a      	ldrh	r2, [r1, #12]
 8009ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	0710      	lsls	r0, r2, #28
 8009ad8:	460c      	mov	r4, r1
 8009ada:	d457      	bmi.n	8009b8c <__sflush_r+0xbc>
 8009adc:	684b      	ldr	r3, [r1, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dc04      	bgt.n	8009aec <__sflush_r+0x1c>
 8009ae2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dc01      	bgt.n	8009aec <__sflush_r+0x1c>
 8009ae8:	2000      	movs	r0, #0
 8009aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	d0fa      	beq.n	8009ae8 <__sflush_r+0x18>
 8009af2:	2300      	movs	r3, #0
 8009af4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009af8:	682f      	ldr	r7, [r5, #0]
 8009afa:	602b      	str	r3, [r5, #0]
 8009afc:	d032      	beq.n	8009b64 <__sflush_r+0x94>
 8009afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	075a      	lsls	r2, r3, #29
 8009b04:	d505      	bpl.n	8009b12 <__sflush_r+0x42>
 8009b06:	6863      	ldr	r3, [r4, #4]
 8009b08:	1ac0      	subs	r0, r0, r3
 8009b0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b0c:	b10b      	cbz	r3, 8009b12 <__sflush_r+0x42>
 8009b0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b10:	1ac0      	subs	r0, r0, r3
 8009b12:	2300      	movs	r3, #0
 8009b14:	4602      	mov	r2, r0
 8009b16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b18:	4628      	mov	r0, r5
 8009b1a:	6a21      	ldr	r1, [r4, #32]
 8009b1c:	47b0      	blx	r6
 8009b1e:	1c43      	adds	r3, r0, #1
 8009b20:	89a3      	ldrh	r3, [r4, #12]
 8009b22:	d106      	bne.n	8009b32 <__sflush_r+0x62>
 8009b24:	6829      	ldr	r1, [r5, #0]
 8009b26:	291d      	cmp	r1, #29
 8009b28:	d82c      	bhi.n	8009b84 <__sflush_r+0xb4>
 8009b2a:	4a29      	ldr	r2, [pc, #164]	; (8009bd0 <__sflush_r+0x100>)
 8009b2c:	40ca      	lsrs	r2, r1
 8009b2e:	07d6      	lsls	r6, r2, #31
 8009b30:	d528      	bpl.n	8009b84 <__sflush_r+0xb4>
 8009b32:	2200      	movs	r2, #0
 8009b34:	6062      	str	r2, [r4, #4]
 8009b36:	6922      	ldr	r2, [r4, #16]
 8009b38:	04d9      	lsls	r1, r3, #19
 8009b3a:	6022      	str	r2, [r4, #0]
 8009b3c:	d504      	bpl.n	8009b48 <__sflush_r+0x78>
 8009b3e:	1c42      	adds	r2, r0, #1
 8009b40:	d101      	bne.n	8009b46 <__sflush_r+0x76>
 8009b42:	682b      	ldr	r3, [r5, #0]
 8009b44:	b903      	cbnz	r3, 8009b48 <__sflush_r+0x78>
 8009b46:	6560      	str	r0, [r4, #84]	; 0x54
 8009b48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b4a:	602f      	str	r7, [r5, #0]
 8009b4c:	2900      	cmp	r1, #0
 8009b4e:	d0cb      	beq.n	8009ae8 <__sflush_r+0x18>
 8009b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b54:	4299      	cmp	r1, r3
 8009b56:	d002      	beq.n	8009b5e <__sflush_r+0x8e>
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f7ff fb51 	bl	8009200 <_free_r>
 8009b5e:	2000      	movs	r0, #0
 8009b60:	6360      	str	r0, [r4, #52]	; 0x34
 8009b62:	e7c2      	b.n	8009aea <__sflush_r+0x1a>
 8009b64:	6a21      	ldr	r1, [r4, #32]
 8009b66:	2301      	movs	r3, #1
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b0      	blx	r6
 8009b6c:	1c41      	adds	r1, r0, #1
 8009b6e:	d1c7      	bne.n	8009b00 <__sflush_r+0x30>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0c4      	beq.n	8009b00 <__sflush_r+0x30>
 8009b76:	2b1d      	cmp	r3, #29
 8009b78:	d001      	beq.n	8009b7e <__sflush_r+0xae>
 8009b7a:	2b16      	cmp	r3, #22
 8009b7c:	d101      	bne.n	8009b82 <__sflush_r+0xb2>
 8009b7e:	602f      	str	r7, [r5, #0]
 8009b80:	e7b2      	b.n	8009ae8 <__sflush_r+0x18>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	e7ae      	b.n	8009aea <__sflush_r+0x1a>
 8009b8c:	690f      	ldr	r7, [r1, #16]
 8009b8e:	2f00      	cmp	r7, #0
 8009b90:	d0aa      	beq.n	8009ae8 <__sflush_r+0x18>
 8009b92:	0793      	lsls	r3, r2, #30
 8009b94:	bf18      	it	ne
 8009b96:	2300      	movne	r3, #0
 8009b98:	680e      	ldr	r6, [r1, #0]
 8009b9a:	bf08      	it	eq
 8009b9c:	694b      	ldreq	r3, [r1, #20]
 8009b9e:	1bf6      	subs	r6, r6, r7
 8009ba0:	600f      	str	r7, [r1, #0]
 8009ba2:	608b      	str	r3, [r1, #8]
 8009ba4:	2e00      	cmp	r6, #0
 8009ba6:	dd9f      	ble.n	8009ae8 <__sflush_r+0x18>
 8009ba8:	4633      	mov	r3, r6
 8009baa:	463a      	mov	r2, r7
 8009bac:	4628      	mov	r0, r5
 8009bae:	6a21      	ldr	r1, [r4, #32]
 8009bb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009bb4:	47e0      	blx	ip
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	dc06      	bgt.n	8009bc8 <__sflush_r+0xf8>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc4:	81a3      	strh	r3, [r4, #12]
 8009bc6:	e790      	b.n	8009aea <__sflush_r+0x1a>
 8009bc8:	4407      	add	r7, r0
 8009bca:	1a36      	subs	r6, r6, r0
 8009bcc:	e7ea      	b.n	8009ba4 <__sflush_r+0xd4>
 8009bce:	bf00      	nop
 8009bd0:	20400001 	.word	0x20400001

08009bd4 <_fflush_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	690b      	ldr	r3, [r1, #16]
 8009bd8:	4605      	mov	r5, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	b913      	cbnz	r3, 8009be4 <_fflush_r+0x10>
 8009bde:	2500      	movs	r5, #0
 8009be0:	4628      	mov	r0, r5
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	b118      	cbz	r0, 8009bee <_fflush_r+0x1a>
 8009be6:	6983      	ldr	r3, [r0, #24]
 8009be8:	b90b      	cbnz	r3, 8009bee <_fflush_r+0x1a>
 8009bea:	f000 f887 	bl	8009cfc <__sinit>
 8009bee:	4b14      	ldr	r3, [pc, #80]	; (8009c40 <_fflush_r+0x6c>)
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	d11b      	bne.n	8009c2c <_fflush_r+0x58>
 8009bf4:	686c      	ldr	r4, [r5, #4]
 8009bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0ef      	beq.n	8009bde <_fflush_r+0xa>
 8009bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c00:	07d0      	lsls	r0, r2, #31
 8009c02:	d404      	bmi.n	8009c0e <_fflush_r+0x3a>
 8009c04:	0599      	lsls	r1, r3, #22
 8009c06:	d402      	bmi.n	8009c0e <_fflush_r+0x3a>
 8009c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c0a:	f000 f915 	bl	8009e38 <__retarget_lock_acquire_recursive>
 8009c0e:	4628      	mov	r0, r5
 8009c10:	4621      	mov	r1, r4
 8009c12:	f7ff ff5d 	bl	8009ad0 <__sflush_r>
 8009c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c18:	4605      	mov	r5, r0
 8009c1a:	07da      	lsls	r2, r3, #31
 8009c1c:	d4e0      	bmi.n	8009be0 <_fflush_r+0xc>
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	059b      	lsls	r3, r3, #22
 8009c22:	d4dd      	bmi.n	8009be0 <_fflush_r+0xc>
 8009c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c26:	f000 f908 	bl	8009e3a <__retarget_lock_release_recursive>
 8009c2a:	e7d9      	b.n	8009be0 <_fflush_r+0xc>
 8009c2c:	4b05      	ldr	r3, [pc, #20]	; (8009c44 <_fflush_r+0x70>)
 8009c2e:	429c      	cmp	r4, r3
 8009c30:	d101      	bne.n	8009c36 <_fflush_r+0x62>
 8009c32:	68ac      	ldr	r4, [r5, #8]
 8009c34:	e7df      	b.n	8009bf6 <_fflush_r+0x22>
 8009c36:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <_fflush_r+0x74>)
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	bf08      	it	eq
 8009c3c:	68ec      	ldreq	r4, [r5, #12]
 8009c3e:	e7da      	b.n	8009bf6 <_fflush_r+0x22>
 8009c40:	0800a6a0 	.word	0x0800a6a0
 8009c44:	0800a6c0 	.word	0x0800a6c0
 8009c48:	0800a680 	.word	0x0800a680

08009c4c <std>:
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	b510      	push	{r4, lr}
 8009c50:	4604      	mov	r4, r0
 8009c52:	e9c0 3300 	strd	r3, r3, [r0]
 8009c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c5a:	6083      	str	r3, [r0, #8]
 8009c5c:	8181      	strh	r1, [r0, #12]
 8009c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8009c60:	81c2      	strh	r2, [r0, #14]
 8009c62:	6183      	str	r3, [r0, #24]
 8009c64:	4619      	mov	r1, r3
 8009c66:	2208      	movs	r2, #8
 8009c68:	305c      	adds	r0, #92	; 0x5c
 8009c6a:	f7fd fb73 	bl	8007354 <memset>
 8009c6e:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <std+0x38>)
 8009c70:	6224      	str	r4, [r4, #32]
 8009c72:	6263      	str	r3, [r4, #36]	; 0x24
 8009c74:	4b04      	ldr	r3, [pc, #16]	; (8009c88 <std+0x3c>)
 8009c76:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c78:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <std+0x40>)
 8009c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c7c:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <std+0x44>)
 8009c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8009c80:	bd10      	pop	{r4, pc}
 8009c82:	bf00      	nop
 8009c84:	0800a061 	.word	0x0800a061
 8009c88:	0800a083 	.word	0x0800a083
 8009c8c:	0800a0bb 	.word	0x0800a0bb
 8009c90:	0800a0df 	.word	0x0800a0df

08009c94 <_cleanup_r>:
 8009c94:	4901      	ldr	r1, [pc, #4]	; (8009c9c <_cleanup_r+0x8>)
 8009c96:	f000 b8af 	b.w	8009df8 <_fwalk_reent>
 8009c9a:	bf00      	nop
 8009c9c:	08009bd5 	.word	0x08009bd5

08009ca0 <__sfmoreglue>:
 8009ca0:	2268      	movs	r2, #104	; 0x68
 8009ca2:	b570      	push	{r4, r5, r6, lr}
 8009ca4:	1e4d      	subs	r5, r1, #1
 8009ca6:	4355      	muls	r5, r2
 8009ca8:	460e      	mov	r6, r1
 8009caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009cae:	f7ff fb0f 	bl	80092d0 <_malloc_r>
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	b140      	cbz	r0, 8009cc8 <__sfmoreglue+0x28>
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8009cbc:	300c      	adds	r0, #12
 8009cbe:	60a0      	str	r0, [r4, #8]
 8009cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009cc4:	f7fd fb46 	bl	8007354 <memset>
 8009cc8:	4620      	mov	r0, r4
 8009cca:	bd70      	pop	{r4, r5, r6, pc}

08009ccc <__sfp_lock_acquire>:
 8009ccc:	4801      	ldr	r0, [pc, #4]	; (8009cd4 <__sfp_lock_acquire+0x8>)
 8009cce:	f000 b8b3 	b.w	8009e38 <__retarget_lock_acquire_recursive>
 8009cd2:	bf00      	nop
 8009cd4:	200004dd 	.word	0x200004dd

08009cd8 <__sfp_lock_release>:
 8009cd8:	4801      	ldr	r0, [pc, #4]	; (8009ce0 <__sfp_lock_release+0x8>)
 8009cda:	f000 b8ae 	b.w	8009e3a <__retarget_lock_release_recursive>
 8009cde:	bf00      	nop
 8009ce0:	200004dd 	.word	0x200004dd

08009ce4 <__sinit_lock_acquire>:
 8009ce4:	4801      	ldr	r0, [pc, #4]	; (8009cec <__sinit_lock_acquire+0x8>)
 8009ce6:	f000 b8a7 	b.w	8009e38 <__retarget_lock_acquire_recursive>
 8009cea:	bf00      	nop
 8009cec:	200004de 	.word	0x200004de

08009cf0 <__sinit_lock_release>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__sinit_lock_release+0x8>)
 8009cf2:	f000 b8a2 	b.w	8009e3a <__retarget_lock_release_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	200004de 	.word	0x200004de

08009cfc <__sinit>:
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	4604      	mov	r4, r0
 8009d00:	f7ff fff0 	bl	8009ce4 <__sinit_lock_acquire>
 8009d04:	69a3      	ldr	r3, [r4, #24]
 8009d06:	b11b      	cbz	r3, 8009d10 <__sinit+0x14>
 8009d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d0c:	f7ff bff0 	b.w	8009cf0 <__sinit_lock_release>
 8009d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d14:	6523      	str	r3, [r4, #80]	; 0x50
 8009d16:	4b13      	ldr	r3, [pc, #76]	; (8009d64 <__sinit+0x68>)
 8009d18:	4a13      	ldr	r2, [pc, #76]	; (8009d68 <__sinit+0x6c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d1e:	42a3      	cmp	r3, r4
 8009d20:	bf08      	it	eq
 8009d22:	2301      	moveq	r3, #1
 8009d24:	4620      	mov	r0, r4
 8009d26:	bf08      	it	eq
 8009d28:	61a3      	streq	r3, [r4, #24]
 8009d2a:	f000 f81f 	bl	8009d6c <__sfp>
 8009d2e:	6060      	str	r0, [r4, #4]
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 f81b 	bl	8009d6c <__sfp>
 8009d36:	60a0      	str	r0, [r4, #8]
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f000 f817 	bl	8009d6c <__sfp>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2104      	movs	r1, #4
 8009d42:	60e0      	str	r0, [r4, #12]
 8009d44:	6860      	ldr	r0, [r4, #4]
 8009d46:	f7ff ff81 	bl	8009c4c <std>
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	2109      	movs	r1, #9
 8009d4e:	68a0      	ldr	r0, [r4, #8]
 8009d50:	f7ff ff7c 	bl	8009c4c <std>
 8009d54:	2202      	movs	r2, #2
 8009d56:	2112      	movs	r1, #18
 8009d58:	68e0      	ldr	r0, [r4, #12]
 8009d5a:	f7ff ff77 	bl	8009c4c <std>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	61a3      	str	r3, [r4, #24]
 8009d62:	e7d1      	b.n	8009d08 <__sinit+0xc>
 8009d64:	0800a3b0 	.word	0x0800a3b0
 8009d68:	08009c95 	.word	0x08009c95

08009d6c <__sfp>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	4607      	mov	r7, r0
 8009d70:	f7ff ffac 	bl	8009ccc <__sfp_lock_acquire>
 8009d74:	4b1e      	ldr	r3, [pc, #120]	; (8009df0 <__sfp+0x84>)
 8009d76:	681e      	ldr	r6, [r3, #0]
 8009d78:	69b3      	ldr	r3, [r6, #24]
 8009d7a:	b913      	cbnz	r3, 8009d82 <__sfp+0x16>
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f7ff ffbd 	bl	8009cfc <__sinit>
 8009d82:	3648      	adds	r6, #72	; 0x48
 8009d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	d503      	bpl.n	8009d94 <__sfp+0x28>
 8009d8c:	6833      	ldr	r3, [r6, #0]
 8009d8e:	b30b      	cbz	r3, 8009dd4 <__sfp+0x68>
 8009d90:	6836      	ldr	r6, [r6, #0]
 8009d92:	e7f7      	b.n	8009d84 <__sfp+0x18>
 8009d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d98:	b9d5      	cbnz	r5, 8009dd0 <__sfp+0x64>
 8009d9a:	4b16      	ldr	r3, [pc, #88]	; (8009df4 <__sfp+0x88>)
 8009d9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009da0:	60e3      	str	r3, [r4, #12]
 8009da2:	6665      	str	r5, [r4, #100]	; 0x64
 8009da4:	f000 f847 	bl	8009e36 <__retarget_lock_init_recursive>
 8009da8:	f7ff ff96 	bl	8009cd8 <__sfp_lock_release>
 8009dac:	2208      	movs	r2, #8
 8009dae:	4629      	mov	r1, r5
 8009db0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009db4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009db8:	6025      	str	r5, [r4, #0]
 8009dba:	61a5      	str	r5, [r4, #24]
 8009dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009dc0:	f7fd fac8 	bl	8007354 <memset>
 8009dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dcc:	4620      	mov	r0, r4
 8009dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd0:	3468      	adds	r4, #104	; 0x68
 8009dd2:	e7d9      	b.n	8009d88 <__sfp+0x1c>
 8009dd4:	2104      	movs	r1, #4
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f7ff ff62 	bl	8009ca0 <__sfmoreglue>
 8009ddc:	4604      	mov	r4, r0
 8009dde:	6030      	str	r0, [r6, #0]
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d1d5      	bne.n	8009d90 <__sfp+0x24>
 8009de4:	f7ff ff78 	bl	8009cd8 <__sfp_lock_release>
 8009de8:	230c      	movs	r3, #12
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	e7ee      	b.n	8009dcc <__sfp+0x60>
 8009dee:	bf00      	nop
 8009df0:	0800a3b0 	.word	0x0800a3b0
 8009df4:	ffff0001 	.word	0xffff0001

08009df8 <_fwalk_reent>:
 8009df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	4688      	mov	r8, r1
 8009e00:	2700      	movs	r7, #0
 8009e02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8009e0e:	d505      	bpl.n	8009e1c <_fwalk_reent+0x24>
 8009e10:	6824      	ldr	r4, [r4, #0]
 8009e12:	2c00      	cmp	r4, #0
 8009e14:	d1f7      	bne.n	8009e06 <_fwalk_reent+0xe>
 8009e16:	4638      	mov	r0, r7
 8009e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e1c:	89ab      	ldrh	r3, [r5, #12]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d907      	bls.n	8009e32 <_fwalk_reent+0x3a>
 8009e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e26:	3301      	adds	r3, #1
 8009e28:	d003      	beq.n	8009e32 <_fwalk_reent+0x3a>
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	47c0      	blx	r8
 8009e30:	4307      	orrs	r7, r0
 8009e32:	3568      	adds	r5, #104	; 0x68
 8009e34:	e7e9      	b.n	8009e0a <_fwalk_reent+0x12>

08009e36 <__retarget_lock_init_recursive>:
 8009e36:	4770      	bx	lr

08009e38 <__retarget_lock_acquire_recursive>:
 8009e38:	4770      	bx	lr

08009e3a <__retarget_lock_release_recursive>:
 8009e3a:	4770      	bx	lr

08009e3c <__swhatbuf_r>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	460e      	mov	r6, r1
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	4614      	mov	r4, r2
 8009e46:	2900      	cmp	r1, #0
 8009e48:	461d      	mov	r5, r3
 8009e4a:	b096      	sub	sp, #88	; 0x58
 8009e4c:	da08      	bge.n	8009e60 <__swhatbuf_r+0x24>
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e54:	602a      	str	r2, [r5, #0]
 8009e56:	061a      	lsls	r2, r3, #24
 8009e58:	d410      	bmi.n	8009e7c <__swhatbuf_r+0x40>
 8009e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e5e:	e00e      	b.n	8009e7e <__swhatbuf_r+0x42>
 8009e60:	466a      	mov	r2, sp
 8009e62:	f000 f96f 	bl	800a144 <_fstat_r>
 8009e66:	2800      	cmp	r0, #0
 8009e68:	dbf1      	blt.n	8009e4e <__swhatbuf_r+0x12>
 8009e6a:	9a01      	ldr	r2, [sp, #4]
 8009e6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e74:	425a      	negs	r2, r3
 8009e76:	415a      	adcs	r2, r3
 8009e78:	602a      	str	r2, [r5, #0]
 8009e7a:	e7ee      	b.n	8009e5a <__swhatbuf_r+0x1e>
 8009e7c:	2340      	movs	r3, #64	; 0x40
 8009e7e:	2000      	movs	r0, #0
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	b016      	add	sp, #88	; 0x58
 8009e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e88 <__smakebuf_r>:
 8009e88:	898b      	ldrh	r3, [r1, #12]
 8009e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e8c:	079d      	lsls	r5, r3, #30
 8009e8e:	4606      	mov	r6, r0
 8009e90:	460c      	mov	r4, r1
 8009e92:	d507      	bpl.n	8009ea4 <__smakebuf_r+0x1c>
 8009e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	6123      	str	r3, [r4, #16]
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	6163      	str	r3, [r4, #20]
 8009ea0:	b002      	add	sp, #8
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	466a      	mov	r2, sp
 8009ea6:	ab01      	add	r3, sp, #4
 8009ea8:	f7ff ffc8 	bl	8009e3c <__swhatbuf_r>
 8009eac:	9900      	ldr	r1, [sp, #0]
 8009eae:	4605      	mov	r5, r0
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f7ff fa0d 	bl	80092d0 <_malloc_r>
 8009eb6:	b948      	cbnz	r0, 8009ecc <__smakebuf_r+0x44>
 8009eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ebc:	059a      	lsls	r2, r3, #22
 8009ebe:	d4ef      	bmi.n	8009ea0 <__smakebuf_r+0x18>
 8009ec0:	f023 0303 	bic.w	r3, r3, #3
 8009ec4:	f043 0302 	orr.w	r3, r3, #2
 8009ec8:	81a3      	strh	r3, [r4, #12]
 8009eca:	e7e3      	b.n	8009e94 <__smakebuf_r+0xc>
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <__smakebuf_r+0x7c>)
 8009ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	6020      	str	r0, [r4, #0]
 8009ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed8:	81a3      	strh	r3, [r4, #12]
 8009eda:	9b00      	ldr	r3, [sp, #0]
 8009edc:	6120      	str	r0, [r4, #16]
 8009ede:	6163      	str	r3, [r4, #20]
 8009ee0:	9b01      	ldr	r3, [sp, #4]
 8009ee2:	b15b      	cbz	r3, 8009efc <__smakebuf_r+0x74>
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eea:	f000 f93d 	bl	800a168 <_isatty_r>
 8009eee:	b128      	cbz	r0, 8009efc <__smakebuf_r+0x74>
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	f023 0303 	bic.w	r3, r3, #3
 8009ef6:	f043 0301 	orr.w	r3, r3, #1
 8009efa:	81a3      	strh	r3, [r4, #12]
 8009efc:	89a0      	ldrh	r0, [r4, #12]
 8009efe:	4305      	orrs	r5, r0
 8009f00:	81a5      	strh	r5, [r4, #12]
 8009f02:	e7cd      	b.n	8009ea0 <__smakebuf_r+0x18>
 8009f04:	08009c95 	.word	0x08009c95

08009f08 <__ascii_mbtowc>:
 8009f08:	b082      	sub	sp, #8
 8009f0a:	b901      	cbnz	r1, 8009f0e <__ascii_mbtowc+0x6>
 8009f0c:	a901      	add	r1, sp, #4
 8009f0e:	b142      	cbz	r2, 8009f22 <__ascii_mbtowc+0x1a>
 8009f10:	b14b      	cbz	r3, 8009f26 <__ascii_mbtowc+0x1e>
 8009f12:	7813      	ldrb	r3, [r2, #0]
 8009f14:	600b      	str	r3, [r1, #0]
 8009f16:	7812      	ldrb	r2, [r2, #0]
 8009f18:	1e10      	subs	r0, r2, #0
 8009f1a:	bf18      	it	ne
 8009f1c:	2001      	movne	r0, #1
 8009f1e:	b002      	add	sp, #8
 8009f20:	4770      	bx	lr
 8009f22:	4610      	mov	r0, r2
 8009f24:	e7fb      	b.n	8009f1e <__ascii_mbtowc+0x16>
 8009f26:	f06f 0001 	mvn.w	r0, #1
 8009f2a:	e7f8      	b.n	8009f1e <__ascii_mbtowc+0x16>

08009f2c <memmove>:
 8009f2c:	4288      	cmp	r0, r1
 8009f2e:	b510      	push	{r4, lr}
 8009f30:	eb01 0402 	add.w	r4, r1, r2
 8009f34:	d902      	bls.n	8009f3c <memmove+0x10>
 8009f36:	4284      	cmp	r4, r0
 8009f38:	4623      	mov	r3, r4
 8009f3a:	d807      	bhi.n	8009f4c <memmove+0x20>
 8009f3c:	1e43      	subs	r3, r0, #1
 8009f3e:	42a1      	cmp	r1, r4
 8009f40:	d008      	beq.n	8009f54 <memmove+0x28>
 8009f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f4a:	e7f8      	b.n	8009f3e <memmove+0x12>
 8009f4c:	4601      	mov	r1, r0
 8009f4e:	4402      	add	r2, r0
 8009f50:	428a      	cmp	r2, r1
 8009f52:	d100      	bne.n	8009f56 <memmove+0x2a>
 8009f54:	bd10      	pop	{r4, pc}
 8009f56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f5e:	e7f7      	b.n	8009f50 <memmove+0x24>

08009f60 <__malloc_lock>:
 8009f60:	4801      	ldr	r0, [pc, #4]	; (8009f68 <__malloc_lock+0x8>)
 8009f62:	f7ff bf69 	b.w	8009e38 <__retarget_lock_acquire_recursive>
 8009f66:	bf00      	nop
 8009f68:	200004dc 	.word	0x200004dc

08009f6c <__malloc_unlock>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	; (8009f74 <__malloc_unlock+0x8>)
 8009f6e:	f7ff bf64 	b.w	8009e3a <__retarget_lock_release_recursive>
 8009f72:	bf00      	nop
 8009f74:	200004dc 	.word	0x200004dc

08009f78 <_realloc_r>:
 8009f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	4614      	mov	r4, r2
 8009f80:	460e      	mov	r6, r1
 8009f82:	b921      	cbnz	r1, 8009f8e <_realloc_r+0x16>
 8009f84:	4611      	mov	r1, r2
 8009f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8a:	f7ff b9a1 	b.w	80092d0 <_malloc_r>
 8009f8e:	b92a      	cbnz	r2, 8009f9c <_realloc_r+0x24>
 8009f90:	f7ff f936 	bl	8009200 <_free_r>
 8009f94:	4625      	mov	r5, r4
 8009f96:	4628      	mov	r0, r5
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	f000 f906 	bl	800a1ac <_malloc_usable_size_r>
 8009fa0:	4284      	cmp	r4, r0
 8009fa2:	4607      	mov	r7, r0
 8009fa4:	d802      	bhi.n	8009fac <_realloc_r+0x34>
 8009fa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009faa:	d812      	bhi.n	8009fd2 <_realloc_r+0x5a>
 8009fac:	4621      	mov	r1, r4
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7ff f98e 	bl	80092d0 <_malloc_r>
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0ed      	beq.n	8009f96 <_realloc_r+0x1e>
 8009fba:	42bc      	cmp	r4, r7
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	bf28      	it	cs
 8009fc2:	463a      	movcs	r2, r7
 8009fc4:	f7fd f9b8 	bl	8007338 <memcpy>
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f7ff f918 	bl	8009200 <_free_r>
 8009fd0:	e7e1      	b.n	8009f96 <_realloc_r+0x1e>
 8009fd2:	4635      	mov	r5, r6
 8009fd4:	e7df      	b.n	8009f96 <_realloc_r+0x1e>

08009fd6 <_raise_r>:
 8009fd6:	291f      	cmp	r1, #31
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4604      	mov	r4, r0
 8009fdc:	460d      	mov	r5, r1
 8009fde:	d904      	bls.n	8009fea <_raise_r+0x14>
 8009fe0:	2316      	movs	r3, #22
 8009fe2:	6003      	str	r3, [r0, #0]
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	bd38      	pop	{r3, r4, r5, pc}
 8009fea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009fec:	b112      	cbz	r2, 8009ff4 <_raise_r+0x1e>
 8009fee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ff2:	b94b      	cbnz	r3, 800a008 <_raise_r+0x32>
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 f831 	bl	800a05c <_getpid_r>
 8009ffa:	462a      	mov	r2, r5
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	4620      	mov	r0, r4
 800a000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a004:	f000 b818 	b.w	800a038 <_kill_r>
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d00a      	beq.n	800a022 <_raise_r+0x4c>
 800a00c:	1c59      	adds	r1, r3, #1
 800a00e:	d103      	bne.n	800a018 <_raise_r+0x42>
 800a010:	2316      	movs	r3, #22
 800a012:	6003      	str	r3, [r0, #0]
 800a014:	2001      	movs	r0, #1
 800a016:	e7e7      	b.n	8009fe8 <_raise_r+0x12>
 800a018:	2400      	movs	r4, #0
 800a01a:	4628      	mov	r0, r5
 800a01c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a020:	4798      	blx	r3
 800a022:	2000      	movs	r0, #0
 800a024:	e7e0      	b.n	8009fe8 <_raise_r+0x12>
	...

0800a028 <raise>:
 800a028:	4b02      	ldr	r3, [pc, #8]	; (800a034 <raise+0xc>)
 800a02a:	4601      	mov	r1, r0
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	f7ff bfd2 	b.w	8009fd6 <_raise_r>
 800a032:	bf00      	nop
 800a034:	2000006c 	.word	0x2000006c

0800a038 <_kill_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	2300      	movs	r3, #0
 800a03c:	4d06      	ldr	r5, [pc, #24]	; (800a058 <_kill_r+0x20>)
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	4611      	mov	r1, r2
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	f7f7 fd4c 	bl	8001ae2 <_kill>
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d102      	bne.n	800a054 <_kill_r+0x1c>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	b103      	cbz	r3, 800a054 <_kill_r+0x1c>
 800a052:	6023      	str	r3, [r4, #0]
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	bf00      	nop
 800a058:	200004e0 	.word	0x200004e0

0800a05c <_getpid_r>:
 800a05c:	f7f7 bd3a 	b.w	8001ad4 <_getpid>

0800a060 <__sread>:
 800a060:	b510      	push	{r4, lr}
 800a062:	460c      	mov	r4, r1
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	f000 f8a8 	bl	800a1bc <_read_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	bfab      	itete	ge
 800a070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a072:	89a3      	ldrhlt	r3, [r4, #12]
 800a074:	181b      	addge	r3, r3, r0
 800a076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a07a:	bfac      	ite	ge
 800a07c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a07e:	81a3      	strhlt	r3, [r4, #12]
 800a080:	bd10      	pop	{r4, pc}

0800a082 <__swrite>:
 800a082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a086:	461f      	mov	r7, r3
 800a088:	898b      	ldrh	r3, [r1, #12]
 800a08a:	4605      	mov	r5, r0
 800a08c:	05db      	lsls	r3, r3, #23
 800a08e:	460c      	mov	r4, r1
 800a090:	4616      	mov	r6, r2
 800a092:	d505      	bpl.n	800a0a0 <__swrite+0x1e>
 800a094:	2302      	movs	r3, #2
 800a096:	2200      	movs	r2, #0
 800a098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a09c:	f000 f874 	bl	800a188 <_lseek_r>
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	4632      	mov	r2, r6
 800a0a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0a8:	81a3      	strh	r3, [r4, #12]
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b6:	f000 b823 	b.w	800a100 <_write_r>

0800a0ba <__sseek>:
 800a0ba:	b510      	push	{r4, lr}
 800a0bc:	460c      	mov	r4, r1
 800a0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c2:	f000 f861 	bl	800a188 <_lseek_r>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	bf15      	itete	ne
 800a0cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0d6:	81a3      	strheq	r3, [r4, #12]
 800a0d8:	bf18      	it	ne
 800a0da:	81a3      	strhne	r3, [r4, #12]
 800a0dc:	bd10      	pop	{r4, pc}

0800a0de <__sclose>:
 800a0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e2:	f000 b81f 	b.w	800a124 <_close_r>

0800a0e6 <__ascii_wctomb>:
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	b141      	cbz	r1, 800a0fe <__ascii_wctomb+0x18>
 800a0ec:	2aff      	cmp	r2, #255	; 0xff
 800a0ee:	d904      	bls.n	800a0fa <__ascii_wctomb+0x14>
 800a0f0:	228a      	movs	r2, #138	; 0x8a
 800a0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	4770      	bx	lr
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	700a      	strb	r2, [r1, #0]
 800a0fe:	4770      	bx	lr

0800a100 <_write_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4604      	mov	r4, r0
 800a104:	4608      	mov	r0, r1
 800a106:	4611      	mov	r1, r2
 800a108:	2200      	movs	r2, #0
 800a10a:	4d05      	ldr	r5, [pc, #20]	; (800a120 <_write_r+0x20>)
 800a10c:	602a      	str	r2, [r5, #0]
 800a10e:	461a      	mov	r2, r3
 800a110:	f7f7 fd1e 	bl	8001b50 <_write>
 800a114:	1c43      	adds	r3, r0, #1
 800a116:	d102      	bne.n	800a11e <_write_r+0x1e>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	b103      	cbz	r3, 800a11e <_write_r+0x1e>
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	200004e0 	.word	0x200004e0

0800a124 <_close_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	2300      	movs	r3, #0
 800a128:	4d05      	ldr	r5, [pc, #20]	; (800a140 <_close_r+0x1c>)
 800a12a:	4604      	mov	r4, r0
 800a12c:	4608      	mov	r0, r1
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	f7f7 fd2a 	bl	8001b88 <_close>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_close_r+0x1a>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_close_r+0x1a>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	200004e0 	.word	0x200004e0

0800a144 <_fstat_r>:
 800a144:	b538      	push	{r3, r4, r5, lr}
 800a146:	2300      	movs	r3, #0
 800a148:	4d06      	ldr	r5, [pc, #24]	; (800a164 <_fstat_r+0x20>)
 800a14a:	4604      	mov	r4, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	4611      	mov	r1, r2
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	f7f7 fd24 	bl	8001b9e <_fstat>
 800a156:	1c43      	adds	r3, r0, #1
 800a158:	d102      	bne.n	800a160 <_fstat_r+0x1c>
 800a15a:	682b      	ldr	r3, [r5, #0]
 800a15c:	b103      	cbz	r3, 800a160 <_fstat_r+0x1c>
 800a15e:	6023      	str	r3, [r4, #0]
 800a160:	bd38      	pop	{r3, r4, r5, pc}
 800a162:	bf00      	nop
 800a164:	200004e0 	.word	0x200004e0

0800a168 <_isatty_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	2300      	movs	r3, #0
 800a16c:	4d05      	ldr	r5, [pc, #20]	; (800a184 <_isatty_r+0x1c>)
 800a16e:	4604      	mov	r4, r0
 800a170:	4608      	mov	r0, r1
 800a172:	602b      	str	r3, [r5, #0]
 800a174:	f7f7 fd22 	bl	8001bbc <_isatty>
 800a178:	1c43      	adds	r3, r0, #1
 800a17a:	d102      	bne.n	800a182 <_isatty_r+0x1a>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	b103      	cbz	r3, 800a182 <_isatty_r+0x1a>
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	200004e0 	.word	0x200004e0

0800a188 <_lseek_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	4611      	mov	r1, r2
 800a190:	2200      	movs	r2, #0
 800a192:	4d05      	ldr	r5, [pc, #20]	; (800a1a8 <_lseek_r+0x20>)
 800a194:	602a      	str	r2, [r5, #0]
 800a196:	461a      	mov	r2, r3
 800a198:	f7f7 fd1a 	bl	8001bd0 <_lseek>
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d102      	bne.n	800a1a6 <_lseek_r+0x1e>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	b103      	cbz	r3, 800a1a6 <_lseek_r+0x1e>
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	200004e0 	.word	0x200004e0

0800a1ac <_malloc_usable_size_r>:
 800a1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1b0:	1f18      	subs	r0, r3, #4
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	bfbc      	itt	lt
 800a1b6:	580b      	ldrlt	r3, [r1, r0]
 800a1b8:	18c0      	addlt	r0, r0, r3
 800a1ba:	4770      	bx	lr

0800a1bc <_read_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4604      	mov	r4, r0
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4d05      	ldr	r5, [pc, #20]	; (800a1dc <_read_r+0x20>)
 800a1c8:	602a      	str	r2, [r5, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f7f7 fca3 	bl	8001b16 <_read>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_read_r+0x1e>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_read_r+0x1e>
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	200004e0 	.word	0x200004e0

0800a1e0 <_init>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	bf00      	nop
 800a1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1e6:	bc08      	pop	{r3}
 800a1e8:	469e      	mov	lr, r3
 800a1ea:	4770      	bx	lr

0800a1ec <_fini>:
 800a1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ee:	bf00      	nop
 800a1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f2:	bc08      	pop	{r3}
 800a1f4:	469e      	mov	lr, r3
 800a1f6:	4770      	bx	lr
