
TrackingLine25.12.2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005bc  08008bb0  08008bb0  00018bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800916c  0800916c  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  0800916c  0800916c  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800916c  0800916c  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08009174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000230  080093a4  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080093a4  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011776  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aee  00000000  00000000  000319cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  000344c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00035448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0f4  00000000  00000000  000362a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a9f  00000000  00000000  0005039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000919c6  00000000  00000000  00063e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  000f5854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b98 	.word	0x08008b98

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	08008b98 	.word	0x08008b98

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(rxByte == '\r')
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_UART_RxCpltCallback+0x88>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b0d      	cmp	r3, #13
 8000f92:	d11d      	bne.n	8000fd0 <HAL_UART_RxCpltCallback+0x4c>
	{
		en_state_robot = bluetooth_check_string_stop_start_robot(rxBuffer);
 8000f94:	481e      	ldr	r0, [pc, #120]	; (8001010 <HAL_UART_RxCpltCallback+0x8c>)
 8000f96:	f004 fa8d 	bl	80054b4 <bluetooth_check_string_stop_start_robot>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_UART_RxCpltCallback+0x90>)
 8000fa0:	701a      	strb	r2, [r3, #0]
		bluetooth_rx_change_kx(rxBuffer);
 8000fa2:	481b      	ldr	r0, [pc, #108]	; (8001010 <HAL_UART_RxCpltCallback+0x8c>)
 8000fa4:	f004 fb10 	bl	80055c8 <bluetooth_rx_change_kx>
		change_line_sensor_read(rxBuffer);
 8000fa8:	4819      	ldr	r0, [pc, #100]	; (8001010 <HAL_UART_RxCpltCallback+0x8c>)
 8000faa:	f004 fd85 	bl	8005ab8 <change_line_sensor_read>
		for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	e009      	b.n	8000fc8 <HAL_UART_RxCpltCallback+0x44>
		{
			rxBuffer[i] = 0;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	4a16      	ldr	r2, [pc, #88]	; (8001010 <HAL_UART_RxCpltCallback+0x8c>)
 8000fb8:	2100      	movs	r1, #0
 8000fba:	54d1      	strb	r1, [r2, r3]
			rxBufferIndex = 0;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i =0; i < sizeof(rxBuffer); i++)
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b09      	cmp	r3, #9
 8000fcc:	d9f2      	bls.n	8000fb4 <HAL_UART_RxCpltCallback+0x30>
 8000fce:	e00c      	b.n	8000fea <HAL_UART_RxCpltCallback+0x66>
		}
	}
	else
	{
		rxBuffer[rxBufferIndex] = rxByte;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_UART_RxCpltCallback+0x88>)
 8000fd8:	7819      	ldrb	r1, [r3, #0]
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_UART_RxCpltCallback+0x8c>)
 8000fdc:	5499      	strb	r1, [r3, r2]
		rxBufferIndex++;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	}
	if(rxBufferIndex >= 20)
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b13      	cmp	r3, #19
 8000ff0:	d902      	bls.n	8000ff8 <HAL_UART_RxCpltCallback+0x74>
	{
		rxBufferIndex = 0;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_UART_RxCpltCallback+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4904      	ldr	r1, [pc, #16]	; (800100c <HAL_UART_RxCpltCallback+0x88>)
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <HAL_UART_RxCpltCallback+0x98>)
 8000ffe:	f003 fc12 	bl	8004826 <HAL_UART_Receive_IT>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000039e 	.word	0x2000039e
 8001010:	200003a0 	.word	0x200003a0
 8001014:	20000000 	.word	0x20000000
 8001018:	200003aa 	.word	0x200003aa
 800101c:	20000354 	.word	0x20000354

08001020 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	static uint8_t tim3_1ms_count = 0;
	static uint16_t tim3_100ms_count = 0;
	if (htim->Instance == TIM4)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10f      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3_1ms_count++;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800103c:	701a      	strb	r2, [r3, #0]
		if(tim3_1ms_count	== 10)
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d105      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim3_1ms_count = 0;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
			tim3_1ms_flag = 1;
 800104c:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
		}
	}

	if (htim->Instance == TIM4)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a0c      	ldr	r2, [pc, #48]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d110      	bne.n	800107e <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		tim3_100ms_count++;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001066:	801a      	strh	r2, [r3, #0]
		if(tim3_100ms_count	== 1000)
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001070:	d105      	bne.n	800107e <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			tim3_100ms_count = 0;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
			tim3_100ms_flag = 1;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40000800 	.word	0x40000800
 800108c:	200003ab 	.word	0x200003ab
 8001090:	2000039c 	.word	0x2000039c
 8001094:	200003ac 	.word	0x200003ac
 8001098:	2000039d 	.word	0x2000039d

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109e:	b08d      	sub	sp, #52	; 0x34
 80010a0:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 fda7 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f86f 	bl	8001188 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 fa71 	bl	8001590 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010ae:	f000 f8c7 	bl	8001240 <MX_ADC1_Init>
  MX_TIM1_Init();
 80010b2:	f000 f903 	bl	80012bc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80010b6:	f000 fa41 	bl	800153c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80010ba:	f000 f973 	bl	80013a4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80010be:	f000 f9f1 	bl	80014a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  IC74HC4051_Init(hadc1, GPIOA, SA_4051_Pin, SB_4051_Pin, SC_4051_Pin);												// Port: ADC COM // Pin: S0 S1 S2
 80010c2:	4e29      	ldr	r6, [pc, #164]	; (8001168 <main+0xcc>)
 80010c4:	2340      	movs	r3, #64	; 0x40
 80010c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80010c8:	2304      	movs	r3, #4
 80010ca:	930a      	str	r3, [sp, #40]	; 0x28
 80010cc:	2302      	movs	r3, #2
 80010ce:	9309      	str	r3, [sp, #36]	; 0x24
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <main+0xd0>)
 80010d2:	9308      	str	r3, [sp, #32]
 80010d4:	466d      	mov	r5, sp
 80010d6:	f106 0410 	add.w	r4, r6, #16
 80010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010ea:	f004 f975 	bl	80053d8 <IC74HC4051_Init>
  IC74HC595_Init(GPIOA, GPIOA, ST_595_GPIO_Port, DA_595_Pin, SH_595_Pin, ST_595_Pin);								// DS SH ST
 80010ee:	2320      	movs	r3, #32
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	2308      	movs	r3, #8
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <main+0xd0>)
 80010fa:	491c      	ldr	r1, [pc, #112]	; (800116c <main+0xd0>)
 80010fc:	481b      	ldr	r0, [pc, #108]	; (800116c <main+0xd0>)
 80010fe:	f004 f99d 	bl	800543c <IC74HC595_Init>
 	/*Init GPIO Motor for Lib*/
  		TimerInit(	&htim2, &htim2,																					\
 8001102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001106:	9303      	str	r3, [sp, #12]
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <main+0xd4>)
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <main+0xd0>)
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2304      	movs	r3, #4
 8001118:	2200      	movs	r2, #0
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <main+0xd8>)
 800111c:	4815      	ldr	r0, [pc, #84]	; (8001174 <main+0xd8>)
 800111e:	f004 f927 	bl	8005370 <TimerInit>
  					TIM_CHANNEL_1, TIM_CHANNEL_2, 																	\
					DIR_RIGHT_GPIO_Port, DIR_RIGHT_Pin, 															\
					DIR_LEFT_GPIO_Port, DIR_LEFT_Pin);																\
	/*Init GPIO UART for Lib*/
		bluetooth_init_UART(&huart3);
 8001122:	4815      	ldr	r0, [pc, #84]	; (8001178 <main+0xdc>)
 8001124:	f004 f9b4 	bl	8005490 <bluetooth_init_UART>
	/*Init GPIO UART for Lib*/
//		HC_SR04_init(htim1, TIM_CHANNEL_1, TIM_CHANNEL_1, TIM_IT_CC1, TRIG_PORT, TRIG_PIN);
	/*Start counter timer*/
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001128:	2100      	movs	r1, #0
 800112a:	4812      	ldr	r0, [pc, #72]	; (8001174 <main+0xd8>)
 800112c:	f002 f8f2 	bl	8003314 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001130:	2104      	movs	r1, #4
 8001132:	4810      	ldr	r0, [pc, #64]	; (8001174 <main+0xd8>)
 8001134:	f002 f8ee 	bl	8003314 <HAL_TIM_PWM_Start>

		HAL_TIM_Base_Start_IT(&htim4);
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <main+0xe0>)
 800113a:	f002 f841 	bl	80031c0 <HAL_TIM_Base_Start_IT>

		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800113e:	2100      	movs	r1, #0
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <main+0xe4>)
 8001142:	f002 f9e1 	bl	8003508 <HAL_TIM_IC_Start_IT>

	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rxByte, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	490e      	ldr	r1, [pc, #56]	; (8001184 <main+0xe8>)
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <main+0xdc>)
 800114c:	f003 fb6b 	bl	8004826 <HAL_UART_Receive_IT>
//				default:
//					break;
//			}


		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, 50);
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <main+0xd8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2232      	movs	r2, #50	; 0x32
 8001156:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <main+0xd4>)
 8001160:	f001 fb00 	bl	8002764 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_2, 50);
 8001164:	e7f4      	b.n	8001150 <main+0xb4>
 8001166:	bf00      	nop
 8001168:	2000024c 	.word	0x2000024c
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	200002c4 	.word	0x200002c4
 8001178:	20000354 	.word	0x20000354
 800117c:	2000030c 	.word	0x2000030c
 8001180:	2000027c 	.word	0x2000027c
 8001184:	2000039e 	.word	0x2000039e

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001192:	2228      	movs	r2, #40	; 0x28
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fdba 	bl	8005d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c6:	2301      	movs	r3, #1
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ca:	2302      	movs	r3, #2
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fad8 	bl	8002794 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011ea:	f000 fa33 	bl	8001654 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ee:	230f      	movs	r3, #15
 80011f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011fa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001200:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001204:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2102      	movs	r1, #2
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fd43 	bl	8002c98 <HAL_RCC_ClockConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001218:	f000 fa1c 	bl	8001654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800121c:	2302      	movs	r3, #2
 800121e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4618      	mov	r0, r3
 8001228:	f001 fec4 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001232:	f000 fa0f 	bl	8001654 <Error_Handler>
  }
}
 8001236:	bf00      	nop
 8001238:	3750      	adds	r7, #80	; 0x50
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <MX_ADC1_Init+0x78>)
 8001254:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_ADC1_Init+0x74>)
 800125e:	2201      	movs	r2, #1
 8001260:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_ADC1_Init+0x74>)
 800126a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800126e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_ADC1_Init+0x74>)
 8001278:	2201      	movs	r2, #1
 800127a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <MX_ADC1_Init+0x74>)
 800127e:	f000 fd1b 	bl	8001cb8 <HAL_ADC_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001288:	f000 f9e4 	bl	8001654 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800128c:	2304      	movs	r3, #4
 800128e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001290:	2301      	movs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001294:	2307      	movs	r3, #7
 8001296:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_ADC1_Init+0x74>)
 800129e:	f000 fde3 	bl	8001e68 <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012a8:	f000 f9d4 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000024c 	.word	0x2000024c
 80012b8:	40012400 	.word	0x40012400

080012bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <MX_TIM1_Init+0xe0>)
 80012e8:	4a2d      	ldr	r2, [pc, #180]	; (80013a0 <MX_TIM1_Init+0xe4>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <MX_TIM1_Init+0xe0>)
 80012ee:	2223      	movs	r2, #35	; 0x23
 80012f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_TIM1_Init+0xe0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_TIM1_Init+0xe0>)
 80012fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_TIM1_Init+0xe0>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_TIM1_Init+0xe0>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_TIM1_Init+0xe0>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001312:	4822      	ldr	r0, [pc, #136]	; (800139c <MX_TIM1_Init+0xe0>)
 8001314:	f001 ff04 	bl	8003120 <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800131e:	f000 f999 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4619      	mov	r1, r3
 800132e:	481b      	ldr	r0, [pc, #108]	; (800139c <MX_TIM1_Init+0xe0>)
 8001330:	f002 fc5c 	bl	8003bec <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800133a:	f000 f98b 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800133e:	4817      	ldr	r0, [pc, #92]	; (800139c <MX_TIM1_Init+0xe0>)
 8001340:	f002 f88a 	bl	8003458 <HAL_TIM_IC_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800134a:	f000 f983 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	4619      	mov	r1, r3
 800135c:	480f      	ldr	r0, [pc, #60]	; (800139c <MX_TIM1_Init+0xe0>)
 800135e:	f003 f91f 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001368:	f000 f974 	bl	8001654 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800136c:	2300      	movs	r3, #0
 800136e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_TIM1_Init+0xe0>)
 8001384:	f002 fad4 	bl	8003930 <HAL_TIM_IC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800138e:	f000 f961 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000027c 	.word	0x2000027c
 80013a0:	40012c00 	.word	0x40012c00

080013a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <MX_TIM2_Init+0xfc>)
 80013d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 80013dc:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <MX_TIM2_Init+0xfc>)
 80013de:	2223      	movs	r2, #35	; 0x23
 80013e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <MX_TIM2_Init+0xfc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80013e8:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <MX_TIM2_Init+0xfc>)
 80013ea:	2263      	movs	r2, #99	; 0x63
 80013ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <MX_TIM2_Init+0xfc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <MX_TIM2_Init+0xfc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013fa:	4829      	ldr	r0, [pc, #164]	; (80014a0 <MX_TIM2_Init+0xfc>)
 80013fc:	f001 fe90 	bl	8003120 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001406:	f000 f925 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001414:	4619      	mov	r1, r3
 8001416:	4822      	ldr	r0, [pc, #136]	; (80014a0 <MX_TIM2_Init+0xfc>)
 8001418:	f002 fbe8 	bl	8003bec <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001422:	f000 f917 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001426:	481e      	ldr	r0, [pc, #120]	; (80014a0 <MX_TIM2_Init+0xfc>)
 8001428:	f001 ff1c 	bl	8003264 <HAL_TIM_PWM_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001432:	f000 f90f 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	4619      	mov	r1, r3
 8001444:	4816      	ldr	r0, [pc, #88]	; (80014a0 <MX_TIM2_Init+0xfc>)
 8001446:	f003 f8ab 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001450:	f000 f900 	bl	8001654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001454:	2360      	movs	r3, #96	; 0x60
 8001456:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <MX_TIM2_Init+0xfc>)
 800146c:	f002 fafc 	bl	8003a68 <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001476:	f000 f8ed 	bl	8001654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2204      	movs	r2, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM2_Init+0xfc>)
 8001482:	f002 faf1 	bl	8003a68 <HAL_TIM_PWM_ConfigChannel>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800148c:	f000 f8e2 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM2_Init+0xfc>)
 8001492:	f000 f9c9 	bl	8001828 <HAL_TIM_MspPostInit>

}
 8001496:	bf00      	nop
 8001498:	3738      	adds	r7, #56	; 0x38
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200002c4 	.word	0x200002c4

080014a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	463b      	mov	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_TIM4_Init+0x90>)
 80014c2:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <MX_TIM4_Init+0x94>)
 80014c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_TIM4_Init+0x90>)
 80014c8:	2223      	movs	r2, #35	; 0x23
 80014ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_TIM4_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_TIM4_Init+0x90>)
 80014d4:	2263      	movs	r2, #99	; 0x63
 80014d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_TIM4_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_TIM4_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014e4:	4813      	ldr	r0, [pc, #76]	; (8001534 <MX_TIM4_Init+0x90>)
 80014e6:	f001 fe1b 	bl	8003120 <HAL_TIM_Base_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80014f0:	f000 f8b0 	bl	8001654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4619      	mov	r1, r3
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_TIM4_Init+0x90>)
 8001502:	f002 fb73 	bl	8003bec <HAL_TIM_ConfigClockSource>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800150c:	f000 f8a2 	bl	8001654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001518:	463b      	mov	r3, r7
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_TIM4_Init+0x90>)
 800151e:	f003 f83f 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001528:	f000 f894 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000030c 	.word	0x2000030c
 8001538:	40000800 	.word	0x40000800

0800153c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_USART3_UART_Init+0x50>)
 8001544:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800154c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART3_UART_Init+0x4c>)
 8001574:	f003 f884 	bl	8004680 <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800157e:	f000 f869 	bl	8001654 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000354 	.word	0x20000354
 800158c:	40004800 	.word	0x40004800

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015aa:	f043 0320 	orr.w	r3, r3, #32
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a21      	ldr	r2, [pc, #132]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_GPIO_Init+0xb8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DA_595_Pin|SA_4051_Pin|SB_4051_Pin|SH_595_Pin
 80015ec:	2200      	movs	r2, #0
 80015ee:	f240 616f 	movw	r1, #1647	; 0x66f
 80015f2:	4816      	ldr	r0, [pc, #88]	; (800164c <MX_GPIO_Init+0xbc>)
 80015f4:	f001 f8b6 	bl	8002764 <HAL_GPIO_WritePin>
                          |ST_595_Pin|SC_4051_Pin|GPIO_PIN_9|DIR_RIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_LEFT_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 4102 	mov.w	r1, #33280	; 0x8200
 80015fe:	4814      	ldr	r0, [pc, #80]	; (8001650 <MX_GPIO_Init+0xc0>)
 8001600:	f001 f8b0 	bl	8002764 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DA_595_Pin SA_4051_Pin SB_4051_Pin SH_595_Pin
                           ST_595_Pin SC_4051_Pin PA9 DIR_RIGHT_Pin */
  GPIO_InitStruct.Pin = DA_595_Pin|SA_4051_Pin|SB_4051_Pin|SH_595_Pin
 8001604:	f240 636f 	movw	r3, #1647	; 0x66f
 8001608:	613b      	str	r3, [r7, #16]
                          |ST_595_Pin|SC_4051_Pin|GPIO_PIN_9|DIR_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2302      	movs	r3, #2
 8001614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4619      	mov	r1, r3
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <MX_GPIO_Init+0xbc>)
 800161e:	f000 ff1d 	bl	800245c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_LEFT_Pin PB9 */
  GPIO_InitStruct.Pin = DIR_LEFT_Pin|GPIO_PIN_9;
 8001622:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2302      	movs	r3, #2
 8001632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_GPIO_Init+0xc0>)
 800163c:	f000 ff0e 	bl	800245c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000
 800164c:	40010800 	.word	0x40010800
 8001650:	40010c00 	.word	0x40010c00

08001654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001658:	b672      	cpsid	i
}
 800165a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800165c:	e7fe      	b.n	800165c <Error_Handler+0x8>
	...

08001660 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_MspInit+0x5c>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_MspInit+0x5c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_MspInit+0x5c>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <HAL_MspInit+0x5c>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_MspInit+0x5c>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	61d3      	str	r3, [r2, #28]
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <HAL_MspInit+0x5c>)
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001696:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_MspInit+0x60>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <HAL_MspInit+0x60>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40010000 	.word	0x40010000

080016c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a14      	ldr	r2, [pc, #80]	; (8001730 <HAL_ADC_MspInit+0x6c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d121      	bne.n	8001728 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <HAL_ADC_MspInit+0x70>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <HAL_ADC_MspInit+0x70>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_ADC_MspInit+0x70>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_ADC_MspInit+0x70>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <HAL_ADC_MspInit+0x70>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_ADC_MspInit+0x70>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001714:	2310      	movs	r3, #16
 8001716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001718:	2303      	movs	r3, #3
 800171a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	f107 0310 	add.w	r3, r7, #16
 8001720:	4619      	mov	r1, r3
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_ADC_MspInit+0x74>)
 8001724:	f000 fe9a 	bl	800245c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40012400 	.word	0x40012400
 8001734:	40021000 	.word	0x40021000
 8001738:	40010800 	.word	0x40010800

0800173c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0318 	add.w	r3, r7, #24
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <HAL_TIM_Base_MspInit+0xdc>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d12d      	bne.n	80017b8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	4a2e      	ldr	r2, [pc, #184]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 8001762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001766:	6193      	str	r3, [r2, #24]
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001774:	4b29      	ldr	r3, [pc, #164]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a28      	ldr	r2, [pc, #160]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 800177a:	f043 0304 	orr.w	r3, r3, #4
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_HC_SR04_ECHO_Pin;
 800178c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(TIM1_CH1_HC_SR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	4619      	mov	r1, r3
 80017a0:	481f      	ldr	r0, [pc, #124]	; (8001820 <HAL_TIM_Base_MspInit+0xe4>)
 80017a2:	f000 fe5b 	bl	800245c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	201b      	movs	r0, #27
 80017ac:	f000 fd6d 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017b0:	201b      	movs	r0, #27
 80017b2:	f000 fd86 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017b6:	e02a      	b.n	800180e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c0:	d10c      	bne.n	80017dc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
}
 80017da:	e018      	b.n	800180e <HAL_TIM_Base_MspInit+0xd2>
  else if(htim_base->Instance==TIM4)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a10      	ldr	r2, [pc, #64]	; (8001824 <HAL_TIM_Base_MspInit+0xe8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d113      	bne.n	800180e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_TIM_Base_MspInit+0xe0>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2105      	movs	r1, #5
 8001802:	201e      	movs	r0, #30
 8001804:	f000 fd41 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001808:	201e      	movs	r0, #30
 800180a:	f000 fd5a 	bl	80022c2 <HAL_NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40012c00 	.word	0x40012c00
 800181c:	40021000 	.word	0x40021000
 8001820:	40010800 	.word	0x40010800
 8001824:	40000800 	.word	0x40000800

08001828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001846:	d142      	bne.n	80018ce <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_TIM_MspPostInit+0xb0>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <HAL_TIM_MspPostInit+0xb0>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_TIM_MspPostInit+0xb0>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_TIM_MspPostInit+0xb0>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <HAL_TIM_MspPostInit+0xb0>)
 8001866:	f043 0308 	orr.w	r3, r3, #8
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_TIM_MspPostInit+0xb0>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800187c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2302      	movs	r3, #2
 8001884:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <HAL_TIM_MspPostInit+0xb4>)
 800188e:	f000 fde5 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001892:	2308      	movs	r3, #8
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2302      	movs	r3, #2
 800189c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	480e      	ldr	r0, [pc, #56]	; (80018e0 <HAL_TIM_MspPostInit+0xb8>)
 80018a6:	f000 fdd9 	bl	800245c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_TIM_MspPostInit+0xbc>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_TIM_MspPostInit+0xbc>)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010800 	.word	0x40010800
 80018e0:	40010c00 	.word	0x40010c00
 80018e4:	40010000 	.word	0x40010000

080018e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a20      	ldr	r2, [pc, #128]	; (8001984 <HAL_UART_MspInit+0x9c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d139      	bne.n	800197c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <HAL_UART_MspInit+0xa0>)
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <HAL_UART_MspInit+0xa0>)
 800190e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001912:	61d3      	str	r3, [r2, #28]
 8001914:	4b1c      	ldr	r3, [pc, #112]	; (8001988 <HAL_UART_MspInit+0xa0>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_UART_MspInit+0xa0>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a18      	ldr	r2, [pc, #96]	; (8001988 <HAL_UART_MspInit+0xa0>)
 8001926:	f043 0308 	orr.w	r3, r3, #8
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_UART_MspInit+0xa0>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	4619      	mov	r1, r3
 800194c:	480f      	ldr	r0, [pc, #60]	; (800198c <HAL_UART_MspInit+0xa4>)
 800194e:	f000 fd85 	bl	800245c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	4619      	mov	r1, r3
 8001966:	4809      	ldr	r0, [pc, #36]	; (800198c <HAL_UART_MspInit+0xa4>)
 8001968:	f000 fd78 	bl	800245c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 10, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	210a      	movs	r1, #10
 8001970:	2027      	movs	r0, #39	; 0x27
 8001972:	f000 fc8a 	bl	800228a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001976:	2027      	movs	r0, #39	; 0x27
 8001978:	f000 fca3 	bl	80022c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40004800 	.word	0x40004800
 8001988:	40021000 	.word	0x40021000
 800198c:	40010c00 	.word	0x40010c00

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler+0x4>

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d6:	f000 f953 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <TIM1_CC_IRQHandler+0x10>)
 80019e6:	f001 fe9b 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000027c 	.word	0x2000027c

080019f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM4_IRQHandler+0x10>)
 80019fa:	f001 fe91 	bl	8003720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000030c 	.word	0x2000030c

08001a08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART3_IRQHandler+0x10>)
 8001a0e:	f002 ff2f 	bl	8004870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000354 	.word	0x20000354

08001a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return 1;
 8001a20:	2301      	movs	r3, #1
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <_kill>:

int _kill(int pid, int sig)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a34:	f004 f934 	bl	8005ca0 <__errno>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2216      	movs	r2, #22
 8001a3c:	601a      	str	r2, [r3, #0]
  return -1;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_exit>:

void _exit (int status)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a52:	f04f 31ff 	mov.w	r1, #4294967295
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffe7 	bl	8001a2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a5c:	e7fe      	b.n	8001a5c <_exit+0x12>

08001a5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e00a      	b.n	8001a86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a70:	f3af 8000 	nop.w
 8001a74:	4601      	mov	r1, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	60ba      	str	r2, [r7, #8]
 8001a7c:	b2ca      	uxtb	r2, r1
 8001a7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbf0      	blt.n	8001a70 <_read+0x12>
  }

  return len;
 8001a8e:	687b      	ldr	r3, [r7, #4]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e009      	b.n	8001abe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60ba      	str	r2, [r7, #8]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3301      	adds	r3, #1
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbf1      	blt.n	8001aaa <_write+0x12>
  }
  return len;
 8001ac6:	687b      	ldr	r3, [r7, #4]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_close>:

int _close(int file)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af6:	605a      	str	r2, [r3, #4]
  return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <_isatty>:

int _isatty(int file)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <_sbrk+0x5c>)
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <_sbrk+0x60>)
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <_sbrk+0x64>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <_sbrk+0x68>)
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <_sbrk+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d207      	bcs.n	8001b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b60:	f004 f89e 	bl	8005ca0 <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	220c      	movs	r2, #12
 8001b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6e:	e009      	b.n	8001b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <_sbrk+0x64>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <_sbrk+0x64>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <_sbrk+0x64>)
 8001b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20005000 	.word	0x20005000
 8001b90:	00000400 	.word	0x00000400
 8001b94:	200003b0 	.word	0x200003b0
 8001b98:	20000490 	.word	0x20000490

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ba8:	f7ff fff8 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bac:	480b      	ldr	r0, [pc, #44]	; (8001bdc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bae:	490c      	ldr	r1, [pc, #48]	; (8001be0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bb0:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb4:	e002      	b.n	8001bbc <LoopCopyDataInit>

08001bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bba:	3304      	adds	r3, #4

08001bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc0:	d3f9      	bcc.n	8001bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc2:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bc4:	4c09      	ldr	r4, [pc, #36]	; (8001bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc8:	e001      	b.n	8001bce <LoopFillZerobss>

08001bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bcc:	3204      	adds	r2, #4

08001bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd0:	d3fb      	bcc.n	8001bca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f004 f86b 	bl	8005cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd6:	f7ff fa61 	bl	800109c <main>
  bx lr
 8001bda:	4770      	bx	lr
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8001be4:	08009174 	.word	0x08009174
  ldr r2, =_sbss
 8001be8:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8001bec:	20000490 	.word	0x20000490

08001bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_2_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_Init+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_Init+0x28>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 fb35 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	2008      	movs	r0, #8
 8001c0c:	f000 f808 	bl	8001c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c10:	f7ff fd26 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000

08001c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x54>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fb4d 	bl	80022de <HAL_SYSTICK_Config>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00e      	b.n	8001c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	d80a      	bhi.n	8001c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c54:	2200      	movs	r2, #0
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f000 fb15 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c60:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_InitTick+0x5c>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e000      	b.n	8001c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000004 	.word	0x20000004
 8001c78:	2000000c 	.word	0x2000000c
 8001c7c:	20000008 	.word	0x20000008

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_IncTick+0x1c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_IncTick+0x20>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	200003b4 	.word	0x200003b4

08001ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b02      	ldr	r3, [pc, #8]	; (8001cb4 <HAL_GetTick+0x10>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	200003b4 	.word	0x200003b4

08001cb8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0be      	b.n	8001e58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fce4 	bl	80016c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f9ab 	bl	8002058 <ADC_ConversionStop_Disable>
 8001d02:	4603      	mov	r3, r0
 8001d04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	f003 0310 	and.w	r3, r3, #16
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 8099 	bne.w	8001e46 <HAL_ADC_Init+0x18e>
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f040 8095 	bne.w	8001e46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d24:	f023 0302 	bic.w	r3, r3, #2
 8001d28:	f043 0202 	orr.w	r2, r3, #2
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	7b1b      	ldrb	r3, [r3, #12]
 8001d3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d50:	d003      	beq.n	8001d5a <HAL_ADC_Init+0xa2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_ADC_Init+0xa8>
 8001d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_Init+0xaa>
 8001d60:	2300      	movs	r3, #0
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7d1b      	ldrb	r3, [r3, #20]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d119      	bne.n	8001da4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	7b1b      	ldrb	r3, [r3, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	035a      	lsls	r2, r3, #13
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e00b      	b.n	8001da4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_ADC_Init+0x1a8>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd4:	d003      	beq.n	8001dde <HAL_ADC_Init+0x126>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d104      	bne.n	8001de8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	051b      	lsls	r3, r3, #20
 8001de6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_ADC_Init+0x1ac>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d10b      	bne.n	8001e24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f023 0303 	bic.w	r3, r3, #3
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e22:	e018      	b.n	8001e56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e28:	f023 0312 	bic.w	r3, r3, #18
 8001e2c:	f043 0210 	orr.w	r2, r3, #16
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e44:	e007      	b.n	8001e56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	f043 0210 	orr.w	r2, r3, #16
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	ffe1f7fd 	.word	0xffe1f7fd
 8001e64:	ff1f0efe 	.word	0xff1f0efe

08001e68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d101      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x20>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e0dc      	b.n	8002042 <HAL_ADC_ConfigChannel+0x1da>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d81c      	bhi.n	8001ed2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b05      	subs	r3, #5
 8001eaa:	221f      	movs	r2, #31
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4019      	ands	r1, r3
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3b05      	subs	r3, #5
 8001ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34
 8001ed0:	e03c      	b.n	8001f4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d81c      	bhi.n	8001f14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b23      	subs	r3, #35	; 0x23
 8001eec:	221f      	movs	r2, #31
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	4019      	ands	r1, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b23      	subs	r3, #35	; 0x23
 8001f06:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
 8001f12:	e01b      	b.n	8001f4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	3b41      	subs	r3, #65	; 0x41
 8001f26:	221f      	movs	r2, #31
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4019      	ands	r1, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3b41      	subs	r3, #65	; 0x41
 8001f40:	fa00 f203 	lsl.w	r2, r0, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d91c      	bls.n	8001f8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68d9      	ldr	r1, [r3, #12]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	3b1e      	subs	r3, #30
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6898      	ldr	r0, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b1e      	subs	r3, #30
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	e019      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6919      	ldr	r1, [r3, #16]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	4019      	ands	r1, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6898      	ldr	r0, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d003      	beq.n	8001fd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fce:	2b11      	cmp	r3, #17
 8001fd0:	d132      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <HAL_ADC_ConfigChannel+0x1e4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d125      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d126      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ff8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b10      	cmp	r3, #16
 8002000:	d11a      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_ADC_ConfigChannel+0x1e8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <HAL_ADC_ConfigChannel+0x1ec>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	0c9a      	lsrs	r2, r3, #18
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002018:	e002      	b.n	8002020 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	3b01      	subs	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f9      	bne.n	800201a <HAL_ADC_ConfigChannel+0x1b2>
 8002026:	e007      	b.n	8002038 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002040:	7bfb      	ldrb	r3, [r7, #15]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	40012400 	.word	0x40012400
 8002050:	20000004 	.word	0x20000004
 8002054:	431bde83 	.word	0x431bde83

08002058 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d12e      	bne.n	80020d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002082:	f7ff fe0f 	bl	8001ca4 <HAL_GetTick>
 8002086:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002088:	e01b      	b.n	80020c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800208a:	f7ff fe0b 	bl	8001ca4 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d914      	bls.n	80020c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10d      	bne.n	80020c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e007      	b.n	80020d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d0dc      	beq.n	800208a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4906      	ldr	r1, [pc, #24]	; (8002174 <__NVIC_EnableIRQ+0x34>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff90 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff2d 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff42 	bl	8002124 <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff90 	bl	80021cc <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5f 	bl	8002178 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff35 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d008      	beq.n	8002320 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2204      	movs	r2, #4
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e020      	b.n	8002362 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 020e 	bic.w	r2, r2, #14
 800232e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f202 	lsl.w	r2, r1, r2
 800234e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d005      	beq.n	8002390 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2204      	movs	r2, #4
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e051      	b.n	8002434 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 020e 	bic.w	r2, r2, #14
 800239e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_DMA_Abort_IT+0xd4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d029      	beq.n	800240e <HAL_DMA_Abort_IT+0xa2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a21      	ldr	r2, [pc, #132]	; (8002444 <HAL_DMA_Abort_IT+0xd8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d022      	beq.n	800240a <HAL_DMA_Abort_IT+0x9e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <HAL_DMA_Abort_IT+0xdc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01a      	beq.n	8002404 <HAL_DMA_Abort_IT+0x98>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1e      	ldr	r2, [pc, #120]	; (800244c <HAL_DMA_Abort_IT+0xe0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d012      	beq.n	80023fe <HAL_DMA_Abort_IT+0x92>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_DMA_Abort_IT+0xe4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00a      	beq.n	80023f8 <HAL_DMA_Abort_IT+0x8c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <HAL_DMA_Abort_IT+0xe8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d102      	bne.n	80023f2 <HAL_DMA_Abort_IT+0x86>
 80023ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023f0:	e00e      	b.n	8002410 <HAL_DMA_Abort_IT+0xa4>
 80023f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f6:	e00b      	b.n	8002410 <HAL_DMA_Abort_IT+0xa4>
 80023f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023fc:	e008      	b.n	8002410 <HAL_DMA_Abort_IT+0xa4>
 80023fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002402:	e005      	b.n	8002410 <HAL_DMA_Abort_IT+0xa4>
 8002404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002408:	e002      	b.n	8002410 <HAL_DMA_Abort_IT+0xa4>
 800240a:	2310      	movs	r3, #16
 800240c:	e000      	b.n	8002410 <HAL_DMA_Abort_IT+0xa4>
 800240e:	2301      	movs	r3, #1
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_DMA_Abort_IT+0xec>)
 8002412:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
    } 
  }
  return status;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40020008 	.word	0x40020008
 8002444:	4002001c 	.word	0x4002001c
 8002448:	40020030 	.word	0x40020030
 800244c:	40020044 	.word	0x40020044
 8002450:	40020058 	.word	0x40020058
 8002454:	4002006c 	.word	0x4002006c
 8002458:	40020000 	.word	0x40020000

0800245c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800245c:	b480      	push	{r7}
 800245e:	b08b      	sub	sp, #44	; 0x2c
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	e169      	b.n	8002744 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002470:	2201      	movs	r2, #1
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 8158 	bne.w	800273e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a9a      	ldr	r2, [pc, #616]	; (80026fc <HAL_GPIO_Init+0x2a0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d05e      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 8002498:	4a98      	ldr	r2, [pc, #608]	; (80026fc <HAL_GPIO_Init+0x2a0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d875      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 800249e:	4a98      	ldr	r2, [pc, #608]	; (8002700 <HAL_GPIO_Init+0x2a4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d058      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 80024a4:	4a96      	ldr	r2, [pc, #600]	; (8002700 <HAL_GPIO_Init+0x2a4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d86f      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024aa:	4a96      	ldr	r2, [pc, #600]	; (8002704 <HAL_GPIO_Init+0x2a8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d052      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 80024b0:	4a94      	ldr	r2, [pc, #592]	; (8002704 <HAL_GPIO_Init+0x2a8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d869      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024b6:	4a94      	ldr	r2, [pc, #592]	; (8002708 <HAL_GPIO_Init+0x2ac>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d04c      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 80024bc:	4a92      	ldr	r2, [pc, #584]	; (8002708 <HAL_GPIO_Init+0x2ac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d863      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024c2:	4a92      	ldr	r2, [pc, #584]	; (800270c <HAL_GPIO_Init+0x2b0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d046      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
 80024c8:	4a90      	ldr	r2, [pc, #576]	; (800270c <HAL_GPIO_Init+0x2b0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d85d      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024ce:	2b12      	cmp	r3, #18
 80024d0:	d82a      	bhi.n	8002528 <HAL_GPIO_Init+0xcc>
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d859      	bhi.n	800258a <HAL_GPIO_Init+0x12e>
 80024d6:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <HAL_GPIO_Init+0x80>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	08002557 	.word	0x08002557
 80024e0:	08002531 	.word	0x08002531
 80024e4:	08002543 	.word	0x08002543
 80024e8:	08002585 	.word	0x08002585
 80024ec:	0800258b 	.word	0x0800258b
 80024f0:	0800258b 	.word	0x0800258b
 80024f4:	0800258b 	.word	0x0800258b
 80024f8:	0800258b 	.word	0x0800258b
 80024fc:	0800258b 	.word	0x0800258b
 8002500:	0800258b 	.word	0x0800258b
 8002504:	0800258b 	.word	0x0800258b
 8002508:	0800258b 	.word	0x0800258b
 800250c:	0800258b 	.word	0x0800258b
 8002510:	0800258b 	.word	0x0800258b
 8002514:	0800258b 	.word	0x0800258b
 8002518:	0800258b 	.word	0x0800258b
 800251c:	0800258b 	.word	0x0800258b
 8002520:	08002539 	.word	0x08002539
 8002524:	0800254d 	.word	0x0800254d
 8002528:	4a79      	ldr	r2, [pc, #484]	; (8002710 <HAL_GPIO_Init+0x2b4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800252e:	e02c      	b.n	800258a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	623b      	str	r3, [r7, #32]
          break;
 8002536:	e029      	b.n	800258c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	3304      	adds	r3, #4
 800253e:	623b      	str	r3, [r7, #32]
          break;
 8002540:	e024      	b.n	800258c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	3308      	adds	r3, #8
 8002548:	623b      	str	r3, [r7, #32]
          break;
 800254a:	e01f      	b.n	800258c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	330c      	adds	r3, #12
 8002552:	623b      	str	r3, [r7, #32]
          break;
 8002554:	e01a      	b.n	800258c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800255e:	2304      	movs	r3, #4
 8002560:	623b      	str	r3, [r7, #32]
          break;
 8002562:	e013      	b.n	800258c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800256c:	2308      	movs	r3, #8
 800256e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	611a      	str	r2, [r3, #16]
          break;
 8002576:	e009      	b.n	800258c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002578:	2308      	movs	r3, #8
 800257a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	615a      	str	r2, [r3, #20]
          break;
 8002582:	e003      	b.n	800258c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002584:	2300      	movs	r3, #0
 8002586:	623b      	str	r3, [r7, #32]
          break;
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x130>
          break;
 800258a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2bff      	cmp	r3, #255	; 0xff
 8002590:	d801      	bhi.n	8002596 <HAL_GPIO_Init+0x13a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	e001      	b.n	800259a <HAL_GPIO_Init+0x13e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d802      	bhi.n	80025a8 <HAL_GPIO_Init+0x14c>
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	e002      	b.n	80025ae <HAL_GPIO_Init+0x152>
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	3b08      	subs	r3, #8
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	210f      	movs	r1, #15
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	401a      	ands	r2, r3
 80025c0:	6a39      	ldr	r1, [r7, #32]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	fa01 f303 	lsl.w	r3, r1, r3
 80025c8:	431a      	orrs	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80b1 	beq.w	800273e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025dc:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <HAL_GPIO_Init+0x2b8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a4c      	ldr	r2, [pc, #304]	; (8002714 <HAL_GPIO_Init+0x2b8>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <HAL_GPIO_Init+0x2b8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025f4:	4a48      	ldr	r2, [pc, #288]	; (8002718 <HAL_GPIO_Init+0x2bc>)
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	089b      	lsrs	r3, r3, #2
 80025fa:	3302      	adds	r3, #2
 80025fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002600:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	4013      	ands	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a40      	ldr	r2, [pc, #256]	; (800271c <HAL_GPIO_Init+0x2c0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <HAL_GPIO_Init+0x1ec>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a3f      	ldr	r2, [pc, #252]	; (8002720 <HAL_GPIO_Init+0x2c4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00d      	beq.n	8002644 <HAL_GPIO_Init+0x1e8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a3e      	ldr	r2, [pc, #248]	; (8002724 <HAL_GPIO_Init+0x2c8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <HAL_GPIO_Init+0x1e4>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3d      	ldr	r2, [pc, #244]	; (8002728 <HAL_GPIO_Init+0x2cc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_GPIO_Init+0x1e0>
 8002638:	2303      	movs	r3, #3
 800263a:	e006      	b.n	800264a <HAL_GPIO_Init+0x1ee>
 800263c:	2304      	movs	r3, #4
 800263e:	e004      	b.n	800264a <HAL_GPIO_Init+0x1ee>
 8002640:	2302      	movs	r3, #2
 8002642:	e002      	b.n	800264a <HAL_GPIO_Init+0x1ee>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_GPIO_Init+0x1ee>
 8002648:	2300      	movs	r3, #0
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4093      	lsls	r3, r2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800265a:	492f      	ldr	r1, [pc, #188]	; (8002718 <HAL_GPIO_Init+0x2bc>)
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002674:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_GPIO_Init+0x2d0>)
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	492c      	ldr	r1, [pc, #176]	; (800272c <HAL_GPIO_Init+0x2d0>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	608b      	str	r3, [r1, #8]
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002682:	4b2a      	ldr	r3, [pc, #168]	; (800272c <HAL_GPIO_Init+0x2d0>)
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	43db      	mvns	r3, r3
 800268a:	4928      	ldr	r1, [pc, #160]	; (800272c <HAL_GPIO_Init+0x2d0>)
 800268c:	4013      	ands	r3, r2
 800268e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800269c:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_GPIO_Init+0x2d0>)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	4922      	ldr	r1, [pc, #136]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60cb      	str	r3, [r1, #12]
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	491e      	ldr	r1, [pc, #120]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4918      	ldr	r1, [pc, #96]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	43db      	mvns	r3, r3
 80026da:	4914      	ldr	r1, [pc, #80]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026dc:	4013      	ands	r3, r2
 80026de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d021      	beq.n	8002730 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <HAL_GPIO_Init+0x2d0>)
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
 80026f8:	e021      	b.n	800273e <HAL_GPIO_Init+0x2e2>
 80026fa:	bf00      	nop
 80026fc:	10320000 	.word	0x10320000
 8002700:	10310000 	.word	0x10310000
 8002704:	10220000 	.word	0x10220000
 8002708:	10210000 	.word	0x10210000
 800270c:	10120000 	.word	0x10120000
 8002710:	10110000 	.word	0x10110000
 8002714:	40021000 	.word	0x40021000
 8002718:	40010000 	.word	0x40010000
 800271c:	40010800 	.word	0x40010800
 8002720:	40010c00 	.word	0x40010c00
 8002724:	40011000 	.word	0x40011000
 8002728:	40011400 	.word	0x40011400
 800272c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_GPIO_Init+0x304>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	43db      	mvns	r3, r3
 8002738:	4909      	ldr	r1, [pc, #36]	; (8002760 <HAL_GPIO_Init+0x304>)
 800273a:	4013      	ands	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3301      	adds	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	fa22 f303 	lsr.w	r3, r2, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	f47f ae8e 	bne.w	8002470 <HAL_GPIO_Init+0x14>
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	372c      	adds	r7, #44	; 0x2c
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	40010400 	.word	0x40010400

08002764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277a:	887a      	ldrh	r2, [r7, #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002780:	e003      	b.n	800278a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002782:	887b      	ldrh	r3, [r7, #2]
 8002784:	041a      	lsls	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	611a      	str	r2, [r3, #16]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e272      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 8087 	beq.w	80028c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027b4:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d00c      	beq.n	80027da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027c0:	4b8f      	ldr	r3, [pc, #572]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d112      	bne.n	80027f2 <HAL_RCC_OscConfig+0x5e>
 80027cc:	4b8c      	ldr	r3, [pc, #560]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d10b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4b89      	ldr	r3, [pc, #548]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d06c      	beq.n	80028c0 <HAL_RCC_OscConfig+0x12c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d168      	bne.n	80028c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e24c      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x76>
 80027fc:	4b80      	ldr	r3, [pc, #512]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a7f      	ldr	r2, [pc, #508]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	e02e      	b.n	8002868 <HAL_RCC_OscConfig+0xd4>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x98>
 8002812:	4b7b      	ldr	r3, [pc, #492]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7a      	ldr	r2, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b78      	ldr	r3, [pc, #480]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a77      	ldr	r2, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xd4>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0xbc>
 8002836:	4b72      	ldr	r3, [pc, #456]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a71      	ldr	r2, [pc, #452]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6f      	ldr	r3, [pc, #444]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6e      	ldr	r2, [pc, #440]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xd4>
 8002850:	4b6b      	ldr	r3, [pc, #428]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6a      	ldr	r2, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a67      	ldr	r2, [pc, #412]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7ff fa18 	bl	8001ca4 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff fa14 	bl	8001ca4 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	; 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e200      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b5d      	ldr	r3, [pc, #372]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xe4>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff fa04 	bl	8001ca4 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff fa00 	bl	8001ca4 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1ec      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x10c>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ce:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x18c>
 80028e6:	4b46      	ldr	r3, [pc, #280]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x176>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1c0      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b3d      	ldr	r3, [pc, #244]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4939      	ldr	r1, [pc, #228]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e03a      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCC_OscConfig+0x270>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff f9b9 	bl	8001ca4 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7ff f9b5 	bl	8001ca4 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1a1      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4927      	ldr	r1, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <HAL_RCC_OscConfig+0x270>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff f998 	bl	8001ca4 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7ff f994 	bl	8001ca4 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e180      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d03a      	beq.n	8002a18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d019      	beq.n	80029de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7ff f978 	bl	8001ca4 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7ff f974 	bl	8001ca4 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e160      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029d6:	2001      	movs	r0, #1
 80029d8:	f000 face 	bl	8002f78 <RCC_Delay>
 80029dc:	e01c      	b.n	8002a18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_RCC_OscConfig+0x274>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7ff f95e 	bl	8001ca4 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ec:	f7ff f95a 	bl	8001ca4 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d908      	bls.n	8002a0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e146      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	42420000 	.word	0x42420000
 8002a08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b92      	ldr	r3, [pc, #584]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e9      	bne.n	80029ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80a6 	beq.w	8002b72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2a:	4b8b      	ldr	r3, [pc, #556]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4a87      	ldr	r2, [pc, #540]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a40:	61d3      	str	r3, [r2, #28]
 8002a42:	4b85      	ldr	r3, [pc, #532]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b82      	ldr	r3, [pc, #520]	; (8002c5c <HAL_RCC_OscConfig+0x4c8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d118      	bne.n	8002a90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	; (8002c5c <HAL_RCC_OscConfig+0x4c8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7e      	ldr	r2, [pc, #504]	; (8002c5c <HAL_RCC_OscConfig+0x4c8>)
 8002a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6a:	f7ff f91b 	bl	8001ca4 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a72:	f7ff f917 	bl	8001ca4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b64      	cmp	r3, #100	; 0x64
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e103      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b75      	ldr	r3, [pc, #468]	; (8002c5c <HAL_RCC_OscConfig+0x4c8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x312>
 8002a98:	4b6f      	ldr	r3, [pc, #444]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4a6e      	ldr	r2, [pc, #440]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	6213      	str	r3, [r2, #32]
 8002aa4:	e02d      	b.n	8002b02 <HAL_RCC_OscConfig+0x36e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x334>
 8002aae:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	4a69      	ldr	r2, [pc, #420]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	6213      	str	r3, [r2, #32]
 8002aba:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4a66      	ldr	r2, [pc, #408]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	6213      	str	r3, [r2, #32]
 8002ac6:	e01c      	b.n	8002b02 <HAL_RCC_OscConfig+0x36e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d10c      	bne.n	8002aea <HAL_RCC_OscConfig+0x356>
 8002ad0:	4b61      	ldr	r3, [pc, #388]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a60      	ldr	r2, [pc, #384]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6213      	str	r3, [r2, #32]
 8002adc:	4b5e      	ldr	r3, [pc, #376]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a5d      	ldr	r2, [pc, #372]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6213      	str	r3, [r2, #32]
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCC_OscConfig+0x36e>
 8002aea:	4b5b      	ldr	r3, [pc, #364]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4a5a      	ldr	r2, [pc, #360]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6213      	str	r3, [r2, #32]
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a57      	ldr	r2, [pc, #348]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	f023 0304 	bic.w	r3, r3, #4
 8002b00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d015      	beq.n	8002b36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b0a:	f7ff f8cb 	bl	8001ca4 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7ff f8c7 	bl	8001ca4 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0b1      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ee      	beq.n	8002b12 <HAL_RCC_OscConfig+0x37e>
 8002b34:	e014      	b.n	8002b60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7ff f8b5 	bl	8001ca4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7ff f8b1 	bl	8001ca4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e09b      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4a3b      	ldr	r2, [pc, #236]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8087 	beq.w	8002c8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7c:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d061      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d146      	bne.n	8002c1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_RCC_OscConfig+0x4cc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7ff f885 	bl	8001ca4 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7ff f881 	bl	8001ca4 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e06d      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f0      	bne.n	8002b9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d108      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4921      	ldr	r1, [pc, #132]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a19      	ldr	r1, [r3, #32]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	430b      	orrs	r3, r1
 8002bea:	491b      	ldr	r1, [pc, #108]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <HAL_RCC_OscConfig+0x4cc>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7ff f855 	bl	8001ca4 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfe:	f7ff f851 	bl	8001ca4 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e03d      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c10:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x46a>
 8002c1c:	e035      	b.n	8002c8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x4cc>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7ff f83e 	bl	8001ca4 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2c:	f7ff f83a 	bl	8001ca4 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e026      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f0      	bne.n	8002c2c <HAL_RCC_OscConfig+0x498>
 8002c4a:	e01e      	b.n	8002c8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d107      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e019      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_OscConfig+0x500>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40021000 	.word	0x40021000

08002c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e0d0      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cac:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d910      	bls.n	8002cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f023 0207 	bic.w	r2, r3, #7
 8002cc2:	4965      	ldr	r1, [pc, #404]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0b8      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d020      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cf4:	4b59      	ldr	r3, [pc, #356]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a58      	ldr	r2, [pc, #352]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d0c:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4a52      	ldr	r2, [pc, #328]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	494d      	ldr	r1, [pc, #308]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d040      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d115      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e07f      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e073      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d66:	4b3d      	ldr	r3, [pc, #244]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06b      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f023 0203 	bic.w	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4936      	ldr	r1, [pc, #216]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d88:	f7fe ff8c 	bl	8001ca4 <HAL_GetTick>
 8002d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8e:	e00a      	b.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d90:	f7fe ff88 	bl	8001ca4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e053      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da6:	4b2d      	ldr	r3, [pc, #180]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 020c 	and.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1eb      	bne.n	8002d90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db8:	4b27      	ldr	r3, [pc, #156]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d210      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0207 	bic.w	r2, r3, #7
 8002dce:	4922      	ldr	r1, [pc, #136]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e032      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4916      	ldr	r1, [pc, #88]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	490e      	ldr	r1, [pc, #56]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e26:	f000 f821 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	490a      	ldr	r1, [pc, #40]	; (8002e60 <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	5ccb      	ldrb	r3, [r1, r3]
 8002e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3e:	4a09      	ldr	r2, [pc, #36]	; (8002e64 <HAL_RCC_ClockConfig+0x1cc>)
 8002e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1d0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe feea 	bl	8001c20 <HAL_InitTick>

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08008d00 	.word	0x08008d00
 8002e64:	20000004 	.word	0x20000004
 8002e68:	20000008 	.word	0x20000008

08002e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d002      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x30>
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x36>
 8002e9a:	e027      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9e:	613b      	str	r3, [r7, #16]
      break;
 8002ea0:	e027      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	0c9b      	lsrs	r3, r3, #18
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002eac:	5cd3      	ldrb	r3, [r2, r3]
 8002eae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0c5b      	lsrs	r3, r3, #17
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ec6:	5cd3      	ldrb	r3, [r2, r3]
 8002ec8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ece:	fb03 f202 	mul.w	r2, r3, r2
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e004      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	613b      	str	r3, [r7, #16]
      break;
 8002eea:	e002      	b.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eee:	613b      	str	r3, [r7, #16]
      break;
 8002ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ef2:	693b      	ldr	r3, [r7, #16]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	007a1200 	.word	0x007a1200
 8002f08:	08008d18 	.word	0x08008d18
 8002f0c:	08008d28 	.word	0x08008d28
 8002f10:	003d0900 	.word	0x003d0900

08002f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	20000004 	.word	0x20000004

08002f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f2c:	f7ff fff2 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	0a1b      	lsrs	r3, r3, #8
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	08008d10 	.word	0x08008d10

08002f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f54:	f7ff ffde 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	0adb      	lsrs	r3, r3, #11
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	4903      	ldr	r1, [pc, #12]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f66:	5ccb      	ldrb	r3, [r1, r3]
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	08008d10 	.word	0x08008d10

08002f78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <RCC_Delay+0x34>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <RCC_Delay+0x38>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0a5b      	lsrs	r3, r3, #9
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f94:	bf00      	nop
  }
  while (Delay --);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	60fa      	str	r2, [r7, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f9      	bne.n	8002f94 <RCC_Delay+0x1c>
}
 8002fa0:	bf00      	nop
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	20000004 	.word	0x20000004
 8002fb0:	10624dd3 	.word	0x10624dd3

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d07d      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	4a4b      	ldr	r2, [pc, #300]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	61d3      	str	r3, [r2, #28]
 8002fec:	4b49      	ldr	r3, [pc, #292]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d118      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003008:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a42      	ldr	r2, [pc, #264]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003014:	f7fe fe46 	bl	8001ca4 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	e008      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fe fe42 	bl	8001ca4 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e06d      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003042:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d02e      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d027      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003058:	4b2e      	ldr	r3, [pc, #184]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003060:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800306e:	4a29      	ldr	r2, [pc, #164]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d014      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fe11 	bl	8001ca4 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe fe0d 	bl	8001ca4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e036      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ee      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4917      	ldr	r1, [pc, #92]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c0:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	490b      	ldr	r1, [pc, #44]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	4904      	ldr	r1, [pc, #16]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40007000 	.word	0x40007000
 800311c:	42420440 	.word	0x42420440

08003120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e041      	b.n	80031b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe faf8 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3304      	adds	r3, #4
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f000 fe6c 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d001      	beq.n	80031d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e03a      	b.n	800324e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <HAL_TIM_Base_Start_IT+0x98>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00e      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x58>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003202:	d009      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x58>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a14      	ldr	r2, [pc, #80]	; (800325c <HAL_TIM_Base_Start_IT+0x9c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x58>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a13      	ldr	r2, [pc, #76]	; (8003260 <HAL_TIM_Base_Start_IT+0xa0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d111      	bne.n	800323c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b06      	cmp	r3, #6
 8003228:	d010      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	e007      	b.n	800324c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800

08003264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e041      	b.n	80032fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f839 	bl	8003302 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3304      	adds	r3, #4
 80032a0:	4619      	mov	r1, r3
 80032a2:	4610      	mov	r0, r2
 80032a4:	f000 fdca 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <HAL_TIM_PWM_Start+0x24>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	e022      	b.n	800337e <HAL_TIM_PWM_Start+0x6a>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	2b04      	cmp	r3, #4
 800333c:	d109      	bne.n	8003352 <HAL_TIM_PWM_Start+0x3e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	e015      	b.n	800337e <HAL_TIM_PWM_Start+0x6a>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d109      	bne.n	800336c <HAL_TIM_PWM_Start+0x58>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e008      	b.n	800337e <HAL_TIM_PWM_Start+0x6a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b01      	cmp	r3, #1
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e05e      	b.n	8003444 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <HAL_TIM_PWM_Start+0x82>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003394:	e013      	b.n	80033be <HAL_TIM_PWM_Start+0xaa>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d104      	bne.n	80033a6 <HAL_TIM_PWM_Start+0x92>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a4:	e00b      	b.n	80033be <HAL_TIM_PWM_Start+0xaa>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d104      	bne.n	80033b6 <HAL_TIM_PWM_Start+0xa2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b4:	e003      	b.n	80033be <HAL_TIM_PWM_Start+0xaa>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2201      	movs	r2, #1
 80033c4:	6839      	ldr	r1, [r7, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 f8c5 	bl	8004556 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1e      	ldr	r2, [pc, #120]	; (800344c <HAL_TIM_PWM_Start+0x138>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d107      	bne.n	80033e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <HAL_TIM_PWM_Start+0x138>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIM_PWM_Start+0xfa>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d009      	beq.n	800340e <HAL_TIM_PWM_Start+0xfa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a14      	ldr	r2, [pc, #80]	; (8003450 <HAL_TIM_PWM_Start+0x13c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIM_PWM_Start+0xfa>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a12      	ldr	r2, [pc, #72]	; (8003454 <HAL_TIM_PWM_Start+0x140>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d111      	bne.n	8003432 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d010      	beq.n	8003442 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	e007      	b.n	8003442 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800

08003458 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e041      	b.n	80034ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f839 	bl	80034f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 fcd0 	bl	8003e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr

08003508 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <HAL_TIM_IC_Start_IT+0x1e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003522:	b2db      	uxtb	r3, r3
 8003524:	e013      	b.n	800354e <HAL_TIM_IC_Start_IT+0x46>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b04      	cmp	r3, #4
 800352a:	d104      	bne.n	8003536 <HAL_TIM_IC_Start_IT+0x2e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003532:	b2db      	uxtb	r3, r3
 8003534:	e00b      	b.n	800354e <HAL_TIM_IC_Start_IT+0x46>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d104      	bne.n	8003546 <HAL_TIM_IC_Start_IT+0x3e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e003      	b.n	800354e <HAL_TIM_IC_Start_IT+0x46>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354c:	b2db      	uxtb	r3, r3
 800354e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <HAL_TIM_IC_Start_IT+0x58>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e013      	b.n	8003588 <HAL_TIM_IC_Start_IT+0x80>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b04      	cmp	r3, #4
 8003564:	d104      	bne.n	8003570 <HAL_TIM_IC_Start_IT+0x68>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e00b      	b.n	8003588 <HAL_TIM_IC_Start_IT+0x80>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b08      	cmp	r3, #8
 8003574:	d104      	bne.n	8003580 <HAL_TIM_IC_Start_IT+0x78>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e003      	b.n	8003588 <HAL_TIM_IC_Start_IT+0x80>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003586:	b2db      	uxtb	r3, r3
 8003588:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800358a:	7bbb      	ldrb	r3, [r7, #14]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d102      	bne.n	8003596 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003590:	7b7b      	ldrb	r3, [r7, #13]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0b8      	b.n	800370c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_TIM_IC_Start_IT+0xa2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a8:	e013      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0xca>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_IC_Start_IT+0xb2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b8:	e00b      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0xca>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d104      	bne.n	80035ca <HAL_TIM_IC_Start_IT+0xc2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c8:	e003      	b.n	80035d2 <HAL_TIM_IC_Start_IT+0xca>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_IC_Start_IT+0xda>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e0:	e013      	b.n	800360a <HAL_TIM_IC_Start_IT+0x102>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_IC_Start_IT+0xea>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f0:	e00b      	b.n	800360a <HAL_TIM_IC_Start_IT+0x102>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_IC_Start_IT+0xfa>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003600:	e003      	b.n	800360a <HAL_TIM_IC_Start_IT+0x102>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d841      	bhi.n	8003694 <HAL_TIM_IC_Start_IT+0x18c>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_TIM_IC_Start_IT+0x110>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	0800364d 	.word	0x0800364d
 800361c:	08003695 	.word	0x08003695
 8003620:	08003695 	.word	0x08003695
 8003624:	08003695 	.word	0x08003695
 8003628:	0800365f 	.word	0x0800365f
 800362c:	08003695 	.word	0x08003695
 8003630:	08003695 	.word	0x08003695
 8003634:	08003695 	.word	0x08003695
 8003638:	08003671 	.word	0x08003671
 800363c:	08003695 	.word	0x08003695
 8003640:	08003695 	.word	0x08003695
 8003644:	08003695 	.word	0x08003695
 8003648:	08003683 	.word	0x08003683
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0202 	orr.w	r2, r2, #2
 800365a:	60da      	str	r2, [r3, #12]
      break;
 800365c:	e01d      	b.n	800369a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0204 	orr.w	r2, r2, #4
 800366c:	60da      	str	r2, [r3, #12]
      break;
 800366e:	e014      	b.n	800369a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	60da      	str	r2, [r3, #12]
      break;
 8003680:	e00b      	b.n	800369a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0210 	orr.w	r2, r2, #16
 8003690:	60da      	str	r2, [r3, #12]
      break;
 8003692:	e002      	b.n	800369a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
      break;
 8003698:	bf00      	nop
  }

  if (status == HAL_OK)
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d134      	bne.n	800370a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2201      	movs	r2, #1
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 ff54 	bl	8004556 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_TIM_IC_Start_IT+0x20c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIM_IC_Start_IT+0x1ce>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d009      	beq.n	80036d6 <HAL_TIM_IC_Start_IT+0x1ce>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a14      	ldr	r2, [pc, #80]	; (8003718 <HAL_TIM_IC_Start_IT+0x210>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIM_IC_Start_IT+0x1ce>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <HAL_TIM_IC_Start_IT+0x214>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d111      	bne.n	80036fa <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d010      	beq.n	800370a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	e007      	b.n	800370a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800

08003720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d122      	bne.n	800377c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b02      	cmp	r3, #2
 8003742:	d11b      	bne.n	800377c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0202 	mvn.w	r2, #2
 800374c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f002 f9fc 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 8003768:	e005      	b.n	8003776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fb4a 	bl	8003e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fb50 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b04      	cmp	r3, #4
 8003788:	d122      	bne.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d11b      	bne.n	80037d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0204 	mvn.w	r2, #4
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f002 f9d2 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 fb20 	bl	8003e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fb26 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d122      	bne.n	8003824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d11b      	bne.n	8003824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0208 	mvn.w	r2, #8
 80037f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2204      	movs	r2, #4
 80037fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f002 f9a8 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 8003810:	e005      	b.n	800381e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 faf6 	bl	8003e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fafc 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	2b10      	cmp	r3, #16
 8003830:	d122      	bne.n	8003878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b10      	cmp	r3, #16
 800383e:	d11b      	bne.n	8003878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0210 	mvn.w	r2, #16
 8003848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2208      	movs	r2, #8
 800384e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f002 f97e 	bl	8005b60 <HAL_TIM_IC_CaptureCallback>
 8003864:	e005      	b.n	8003872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 facc 	bl	8003e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fad2 	bl	8003e16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0201 	mvn.w	r2, #1
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd fbbe 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d10e      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d107      	bne.n	80038d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fecf 	bl	800466e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d10e      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d107      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa96 	bl	8003e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b20      	cmp	r3, #32
 8003908:	d10e      	bne.n	8003928 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b20      	cmp	r3, #32
 8003916:	d107      	bne.n	8003928 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0220 	mvn.w	r2, #32
 8003920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fe9a 	bl	800465c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_TIM_IC_ConfigChannel+0x1e>
 800394a:	2302      	movs	r3, #2
 800394c:	e088      	b.n	8003a60 <HAL_TIM_IC_ConfigChannel+0x130>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f000 fc50 	bl	8004210 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 020c 	bic.w	r2, r2, #12
 800397e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6999      	ldr	r1, [r3, #24]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	619a      	str	r2, [r3, #24]
 8003992:	e060      	b.n	8003a56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d11c      	bne.n	80039d4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6819      	ldr	r1, [r3, #0]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f000 fcb9 	bl	8004320 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6999      	ldr	r1, [r3, #24]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	021a      	lsls	r2, r3, #8
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	619a      	str	r2, [r3, #24]
 80039d2:	e040      	b.n	8003a56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d11b      	bne.n	8003a12 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	6819      	ldr	r1, [r3, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f000 fd04 	bl	80043f6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 020c 	bic.w	r2, r2, #12
 80039fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69d9      	ldr	r1, [r3, #28]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	61da      	str	r2, [r3, #28]
 8003a10:	e021      	b.n	8003a56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	d11c      	bne.n	8003a52 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6818      	ldr	r0, [r3, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6819      	ldr	r1, [r3, #0]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f000 fd20 	bl	800446c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69da      	ldr	r2, [r3, #28]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a3a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69d9      	ldr	r1, [r3, #28]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	021a      	lsls	r2, r3, #8
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	61da      	str	r2, [r3, #28]
 8003a50:	e001      	b.n	8003a56 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e0ae      	b.n	8003be4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	f200 809f 	bhi.w	8003bd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a96:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003bd5 	.word	0x08003bd5
 8003aa4:	08003bd5 	.word	0x08003bd5
 8003aa8:	08003bd5 	.word	0x08003bd5
 8003aac:	08003b11 	.word	0x08003b11
 8003ab0:	08003bd5 	.word	0x08003bd5
 8003ab4:	08003bd5 	.word	0x08003bd5
 8003ab8:	08003bd5 	.word	0x08003bd5
 8003abc:	08003b53 	.word	0x08003b53
 8003ac0:	08003bd5 	.word	0x08003bd5
 8003ac4:	08003bd5 	.word	0x08003bd5
 8003ac8:	08003bd5 	.word	0x08003bd5
 8003acc:	08003b93 	.word	0x08003b93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fa12 	bl	8003f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0208 	orr.w	r2, r2, #8
 8003aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0204 	bic.w	r2, r2, #4
 8003afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	619a      	str	r2, [r3, #24]
      break;
 8003b0e:	e064      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fa58 	bl	8003fcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6999      	ldr	r1, [r3, #24]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	021a      	lsls	r2, r3, #8
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	619a      	str	r2, [r3, #24]
      break;
 8003b50:	e043      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 faa1 	bl	80040a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0208 	orr.w	r2, r2, #8
 8003b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69da      	ldr	r2, [r3, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0204 	bic.w	r2, r2, #4
 8003b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69d9      	ldr	r1, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]
      break;
 8003b90:	e023      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 faeb 	bl	8004174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69da      	ldr	r2, [r3, #28]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69d9      	ldr	r1, [r3, #28]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	021a      	lsls	r2, r3, #8
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	61da      	str	r2, [r3, #28]
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIM_ConfigClockSource+0x1c>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e0b4      	b.n	8003d72 <HAL_TIM_ConfigClockSource+0x186>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c40:	d03e      	beq.n	8003cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c46:	f200 8087 	bhi.w	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	f000 8086 	beq.w	8003d5e <HAL_TIM_ConfigClockSource+0x172>
 8003c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c56:	d87f      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b70      	cmp	r3, #112	; 0x70
 8003c5a:	d01a      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0xa6>
 8003c5c:	2b70      	cmp	r3, #112	; 0x70
 8003c5e:	d87b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b60      	cmp	r3, #96	; 0x60
 8003c62:	d050      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x11a>
 8003c64:	2b60      	cmp	r3, #96	; 0x60
 8003c66:	d877      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b50      	cmp	r3, #80	; 0x50
 8003c6a:	d03c      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8003c6c:	2b50      	cmp	r3, #80	; 0x50
 8003c6e:	d873      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b40      	cmp	r3, #64	; 0x40
 8003c72:	d058      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x13a>
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d86f      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c78:	2b30      	cmp	r3, #48	; 0x30
 8003c7a:	d064      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c7c:	2b30      	cmp	r3, #48	; 0x30
 8003c7e:	d86b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d060      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	d867      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d05c      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d05a      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	e062      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6899      	ldr	r1, [r3, #8]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f000 fc39 	bl	8004518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	609a      	str	r2, [r3, #8]
      break;
 8003cbe:	e04f      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	6899      	ldr	r1, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f000 fc22 	bl	8004518 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ce2:	609a      	str	r2, [r3, #8]
      break;
 8003ce4:	e03c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f000 fae6 	bl	80042c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2150      	movs	r1, #80	; 0x50
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fbf0 	bl	80044e4 <TIM_ITRx_SetConfig>
      break;
 8003d04:	e02c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 fb40 	bl	8004398 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2160      	movs	r1, #96	; 0x60
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fbe0 	bl	80044e4 <TIM_ITRx_SetConfig>
      break;
 8003d24:	e01c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f000 fac6 	bl	80042c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fbd0 	bl	80044e4 <TIM_ITRx_SetConfig>
      break;
 8003d44:	e00c      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4610      	mov	r0, r2
 8003d52:	f000 fbc7 	bl	80044e4 <TIM_ITRx_SetConfig>
      break;
 8003d56:	e003      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5c:	e000      	b.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b0c      	cmp	r3, #12
 8003d8e:	d831      	bhi.n	8003df4 <HAL_TIM_ReadCapturedValue+0x78>
 8003d90:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003dcd 	.word	0x08003dcd
 8003d9c:	08003df5 	.word	0x08003df5
 8003da0:	08003df5 	.word	0x08003df5
 8003da4:	08003df5 	.word	0x08003df5
 8003da8:	08003dd7 	.word	0x08003dd7
 8003dac:	08003df5 	.word	0x08003df5
 8003db0:	08003df5 	.word	0x08003df5
 8003db4:	08003df5 	.word	0x08003df5
 8003db8:	08003de1 	.word	0x08003de1
 8003dbc:	08003df5 	.word	0x08003df5
 8003dc0:	08003df5 	.word	0x08003df5
 8003dc4:	08003df5 	.word	0x08003df5
 8003dc8:	08003deb 	.word	0x08003deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	60fb      	str	r3, [r7, #12]

      break;
 8003dd4:	e00f      	b.n	8003df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	60fb      	str	r3, [r7, #12]

      break;
 8003dde:	e00a      	b.n	8003df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	60fb      	str	r3, [r7, #12]

      break;
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	60fb      	str	r3, [r7, #12]

      break;
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003df4:	bf00      	nop
  }

  return tmpreg;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop

08003e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
	...

08003e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a29      	ldr	r2, [pc, #164]	; (8003ef4 <TIM_Base_SetConfig+0xb8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_Base_SetConfig+0x30>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5a:	d007      	beq.n	8003e6c <TIM_Base_SetConfig+0x30>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a26      	ldr	r2, [pc, #152]	; (8003ef8 <TIM_Base_SetConfig+0xbc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0x30>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a25      	ldr	r2, [pc, #148]	; (8003efc <TIM_Base_SetConfig+0xc0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d108      	bne.n	8003e7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <TIM_Base_SetConfig+0xb8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00b      	beq.n	8003e9e <TIM_Base_SetConfig+0x62>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d007      	beq.n	8003e9e <TIM_Base_SetConfig+0x62>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a19      	ldr	r2, [pc, #100]	; (8003ef8 <TIM_Base_SetConfig+0xbc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d003      	beq.n	8003e9e <TIM_Base_SetConfig+0x62>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <TIM_Base_SetConfig+0xc0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d108      	bne.n	8003eb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <TIM_Base_SetConfig+0xb8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d103      	bne.n	8003ee4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800

08003f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f023 0201 	bic.w	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 0302 	bic.w	r3, r3, #2
 8003f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <TIM_OC1_SetConfig+0xc8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d10c      	bne.n	8003f76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0308 	bic.w	r3, r3, #8
 8003f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <TIM_OC1_SetConfig+0xc8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d111      	bne.n	8003fa2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	621a      	str	r2, [r3, #32]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40012c00 	.word	0x40012c00

08003fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f023 0210 	bic.w	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	021b      	lsls	r3, r3, #8
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0320 	bic.w	r3, r3, #32
 8004016:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a1d      	ldr	r2, [pc, #116]	; (800409c <TIM_OC2_SetConfig+0xd0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d10d      	bne.n	8004048 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004046:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a14      	ldr	r2, [pc, #80]	; (800409c <TIM_OC2_SetConfig+0xd0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d113      	bne.n	8004078 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004056:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800405e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00

080040a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1d      	ldr	r2, [pc, #116]	; (8004170 <TIM_OC3_SetConfig+0xd0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d10d      	bne.n	800411a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a14      	ldr	r2, [pc, #80]	; (8004170 <TIM_OC3_SetConfig+0xd0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d113      	bne.n	800414a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40012c00 	.word	0x40012c00

08004174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	031b      	lsls	r3, r3, #12
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a0f      	ldr	r2, [pc, #60]	; (800420c <TIM_OC4_SetConfig+0x98>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d109      	bne.n	80041e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	019b      	lsls	r3, r3, #6
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	40012c00 	.word	0x40012c00

08004210 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 0201 	bic.w	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <TIM_TI1_SetConfig+0xa8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_TI1_SetConfig+0x46>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004244:	d007      	beq.n	8004256 <TIM_TI1_SetConfig+0x46>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <TIM_TI1_SetConfig+0xac>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_TI1_SetConfig+0x46>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <TIM_TI1_SetConfig+0xb0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <TIM_TI1_SetConfig+0x4a>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <TIM_TI1_SetConfig+0x4c>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e003      	b.n	800427a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	b2db      	uxtb	r3, r3
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f023 030a 	bic.w	r3, r3, #10
 8004294:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f003 030a 	and.w	r3, r3, #10
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800

080042c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f023 0201 	bic.w	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 030a 	bic.w	r3, r3, #10
 8004300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f023 0210 	bic.w	r2, r3, #16
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800434c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800435e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	031b      	lsls	r3, r3, #12
 8004364:	b29b      	uxth	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004372:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	031b      	lsls	r3, r3, #12
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004432:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	b2db      	uxtb	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004446:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	621a      	str	r2, [r3, #32]
}
 8004462:	bf00      	nop
 8004464:	371c      	adds	r7, #28
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004498:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	031b      	lsls	r3, r3, #12
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	031b      	lsls	r3, r3, #12
 80044c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	621a      	str	r2, [r3, #32]
}
 80044da:	bf00      	nop
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	f043 0307 	orr.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	609a      	str	r2, [r3, #8]
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	021a      	lsls	r2, r3, #8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	431a      	orrs	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4313      	orrs	r3, r2
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	609a      	str	r2, [r3, #8]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004556:	b480      	push	{r7}
 8004558:	b087      	sub	sp, #28
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2201      	movs	r2, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1a      	ldr	r2, [r3, #32]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	43db      	mvns	r3, r3
 8004578:	401a      	ands	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	431a      	orrs	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
	...

080045a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e046      	b.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a16      	ldr	r2, [pc, #88]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d009      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a10      	ldr	r2, [pc, #64]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10c      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800

0800465c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e042      	b.n	8004718 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd f91e 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fdc5 	bl	8005254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	; 0x28
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	d16d      	bne.n	800481c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Transmit+0x2c>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e066      	b.n	800481e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2221      	movs	r2, #33	; 0x21
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800475e:	f7fd faa1 	bl	8001ca4 <HAL_GetTick>
 8004762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	88fa      	ldrh	r2, [r7, #6]
 8004768:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004778:	d108      	bne.n	800478c <HAL_UART_Transmit+0x6c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d104      	bne.n	800478c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	e003      	b.n	8004794 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004794:	e02a      	b.n	80047ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	; 0x80
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fb14 	bl	8004dce <UART_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e036      	b.n	800481e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3302      	adds	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e007      	b.n	80047de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	781a      	ldrb	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3301      	adds	r3, #1
 80047dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1cf      	bne.n	8004796 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2140      	movs	r1, #64	; 0x40
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fae4 	bl	8004dce <UART_WaitOnFlagUntilTimeout>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d001      	beq.n	8004810 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e006      	b.n	800481e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e000      	b.n	800481e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	4613      	mov	r3, r2
 8004832:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b20      	cmp	r3, #32
 800483e:	d112      	bne.n	8004866 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UART_Receive_IT+0x26>
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e00b      	b.n	8004868 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	461a      	mov	r2, r3
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fb24 	bl	8004eaa <UART_Start_Receive_IT>
 8004862:	4603      	mov	r3, r0
 8004864:	e000      	b.n	8004868 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b0ba      	sub	sp, #232	; 0xe8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800489c:	2300      	movs	r3, #0
 800489e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_UART_IRQHandler+0x66>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fc01 	bl	80050d6 <UART_Receive_IT>
      return;
 80048d4:	e25b      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80de 	beq.w	8004a9c <HAL_UART_IRQHandler+0x22c>
 80048e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80d1 	beq.w	8004a9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_UART_IRQHandler+0xae>
 8004906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	f043 0201 	orr.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800491e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <HAL_UART_IRQHandler+0xd2>
 800492a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	f043 0202 	orr.w	r2, r3, #2
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00b      	beq.n	8004966 <HAL_UART_IRQHandler+0xf6>
 800494e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	f043 0204 	orr.w	r2, r3, #4
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d011      	beq.n	8004996 <HAL_UART_IRQHandler+0x126>
 8004972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d105      	bne.n	800498a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800497e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498e:	f043 0208 	orr.w	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 81f2 	beq.w	8004d84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_UART_IRQHandler+0x14e>
 80049ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b0:	f003 0320 	and.w	r3, r3, #32
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fb8c 	bl	80050d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_UART_IRQHandler+0x17a>
 80049e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d04f      	beq.n	8004a8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 fa96 	bl	8004f1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d041      	beq.n	8004a82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3314      	adds	r3, #20
 8004a04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1d9      	bne.n	80049fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d013      	beq.n	8004a7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	4a7e      	ldr	r2, [pc, #504]	; (8004c50 <HAL_UART_IRQHandler+0x3e0>)
 8004a58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd fc84 	bl	800236c <HAL_DMA_Abort_IT>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a74:	4610      	mov	r0, r2
 8004a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	e00e      	b.n	8004a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f993 	bl	8004da6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	e00a      	b.n	8004a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f98f 	bl	8004da6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	e006      	b.n	8004a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f98b 	bl	8004da6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004a96:	e175      	b.n	8004d84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	bf00      	nop
    return;
 8004a9a:	e173      	b.n	8004d84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f040 814f 	bne.w	8004d44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aaa:	f003 0310 	and.w	r3, r3, #16
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8148 	beq.w	8004d44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8141 	beq.w	8004d44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80b6 	beq.w	8004c54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004af4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8145 	beq.w	8004d88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b06:	429a      	cmp	r2, r3
 8004b08:	f080 813e 	bcs.w	8004d88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	f000 8088 	beq.w	8004c30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b4c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b58:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b5c:	e841 2300 	strex	r3, r2, [r1]
 8004b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1d9      	bne.n	8004b20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e1      	bne.n	8004b6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3314      	adds	r3, #20
 8004bc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bd2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e3      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c00:	f023 0310 	bic.w	r3, r3, #16
 8004c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c12:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c14:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e3      	bne.n	8004bee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd fb63 	bl	80022f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	4619      	mov	r1, r3
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f8b6 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c4c:	e09c      	b.n	8004d88 <HAL_UART_IRQHandler+0x518>
 8004c4e:	bf00      	nop
 8004c50:	08004fe1 	.word	0x08004fe1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 808e 	beq.w	8004d8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8089 	beq.w	8004d8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c9e:	647a      	str	r2, [r7, #68]	; 0x44
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e3      	bne.n	8004c7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3314      	adds	r3, #20
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cd6:	633a      	str	r2, [r7, #48]	; 0x30
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e3      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	330c      	adds	r3, #12
 8004cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0310 	bic.w	r3, r3, #16
 8004d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d1c:	61fa      	str	r2, [r7, #28]
 8004d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	69b9      	ldr	r1, [r7, #24]
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	617b      	str	r3, [r7, #20]
   return(result);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e3      	bne.n	8004cf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f83b 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d42:	e023      	b.n	8004d8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <HAL_UART_IRQHandler+0x4f4>
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f953 	bl	8005008 <UART_Transmit_IT>
    return;
 8004d62:	e014      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <HAL_UART_IRQHandler+0x51e>
 8004d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f992 	bl	80050a6 <UART_EndTransmit_IT>
    return;
 8004d82:	e004      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
    return;
 8004d84:	bf00      	nop
 8004d86:	e002      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d88:	bf00      	nop
 8004d8a:	e000      	b.n	8004d8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004d8c:	bf00      	nop
  }
}
 8004d8e:	37e8      	adds	r7, #232	; 0xe8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr

08004da6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr

08004db8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b090      	sub	sp, #64	; 0x40
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dde:	e050      	b.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d04c      	beq.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x30>
 8004dee:	f7fc ff59 	bl	8001ca4 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d241      	bcs.n	8004e82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e1e:	637a      	str	r2, [r7, #52]	; 0x34
 8004e20:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	613b      	str	r3, [r7, #16]
   return(result);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3314      	adds	r3, #20
 8004e50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e52:	623a      	str	r2, [r7, #32]
 8004e54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	69f9      	ldr	r1, [r7, #28]
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e5      	bne.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e00f      	b.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	bf0c      	ite	eq
 8004e92:	2301      	moveq	r3, #1
 8004e94:	2300      	movne	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d09f      	beq.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3740      	adds	r7, #64	; 0x40
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2222      	movs	r2, #34	; 0x22
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0220 	orr.w	r2, r2, #32
 8004f0e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b095      	sub	sp, #84	; 0x54
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f44:	643a      	str	r2, [r7, #64]	; 0x40
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e5      	bne.n	8004f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3314      	adds	r3, #20
 8004f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e5      	bne.n	8004f58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d119      	bne.n	8004fc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	e853 3f00 	ldrex	r3, [r3]
 8004fa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f023 0310 	bic.w	r3, r3, #16
 8004faa:	647b      	str	r3, [r7, #68]	; 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fb4:	61ba      	str	r2, [r7, #24]
 8004fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6979      	ldr	r1, [r7, #20]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e5      	bne.n	8004f94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fd6:	bf00      	nop
 8004fd8:	3754      	adds	r7, #84	; 0x54
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff fed3 	bl	8004da6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b21      	cmp	r3, #33	; 0x21
 800501a:	d13e      	bne.n	800509a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005024:	d114      	bne.n	8005050 <UART_Transmit_IT+0x48>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d110      	bne.n	8005050 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005042:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]
 800504e:	e008      	b.n	8005062 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	1c59      	adds	r1, r3, #1
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6211      	str	r1, [r2, #32]
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29b      	uxth	r3, r3
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	4619      	mov	r1, r3
 8005070:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10f      	bne.n	8005096 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005084:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005094:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800509a:	2302      	movs	r3, #2
  }
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff fe64 	bl	8004d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b08c      	sub	sp, #48	; 0x30
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b22      	cmp	r3, #34	; 0x22
 80050e8:	f040 80ae 	bne.w	8005248 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f4:	d117      	bne.n	8005126 <UART_Receive_IT+0x50>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d113      	bne.n	8005126 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	b29b      	uxth	r3, r3
 8005110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005114:	b29a      	uxth	r2, r3
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	1c9a      	adds	r2, r3, #2
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	629a      	str	r2, [r3, #40]	; 0x28
 8005124:	e026      	b.n	8005174 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800512c:	2300      	movs	r3, #0
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005138:	d007      	beq.n	800514a <UART_Receive_IT+0x74>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10a      	bne.n	8005158 <UART_Receive_IT+0x82>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	b2da      	uxtb	r2, r3
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e008      	b.n	800516a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005164:	b2da      	uxtb	r2, r3
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29b      	uxth	r3, r3
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	4619      	mov	r1, r3
 8005182:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005184:	2b00      	cmp	r3, #0
 8005186:	d15d      	bne.n	8005244 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0220 	bic.w	r2, r2, #32
 8005196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d135      	bne.n	800523a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	613b      	str	r3, [r7, #16]
   return(result);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f023 0310 	bic.w	r3, r3, #16
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	623a      	str	r2, [r7, #32]
 80051f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	69f9      	ldr	r1, [r7, #28]
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	61bb      	str	r3, [r7, #24]
   return(result);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b10      	cmp	r3, #16
 8005214:	d10a      	bne.n	800522c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fdc0 	bl	8004db8 <HAL_UARTEx_RxEventCallback>
 8005238:	e002      	b.n	8005240 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fb fea2 	bl	8000f84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e002      	b.n	800524a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3730      	adds	r7, #48	; 0x30
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800528e:	f023 030c 	bic.w	r3, r3, #12
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	430b      	orrs	r3, r1
 800529a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <UART_SetConfig+0x114>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d103      	bne.n	80052c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fd fe48 	bl	8002f50 <HAL_RCC_GetPCLK2Freq>
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	e002      	b.n	80052ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052c4:	f7fd fe30 	bl	8002f28 <HAL_RCC_GetPCLK1Freq>
 80052c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009a      	lsls	r2, r3, #2
 80052d4:	441a      	add	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	4a22      	ldr	r2, [pc, #136]	; (800536c <UART_SetConfig+0x118>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	0119      	lsls	r1, r3, #4
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009a      	lsls	r2, r3, #2
 80052f4:	441a      	add	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005300:	4b1a      	ldr	r3, [pc, #104]	; (800536c <UART_SetConfig+0x118>)
 8005302:	fba3 0302 	umull	r0, r3, r3, r2
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2064      	movs	r0, #100	; 0x64
 800530a:	fb00 f303 	mul.w	r3, r0, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	3332      	adds	r3, #50	; 0x32
 8005314:	4a15      	ldr	r2, [pc, #84]	; (800536c <UART_SetConfig+0x118>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005320:	4419      	add	r1, r3
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009a      	lsls	r2, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	fbb2 f2f3 	udiv	r2, r2, r3
 8005338:	4b0c      	ldr	r3, [pc, #48]	; (800536c <UART_SetConfig+0x118>)
 800533a:	fba3 0302 	umull	r0, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2064      	movs	r0, #100	; 0x64
 8005342:	fb00 f303 	mul.w	r3, r0, r3
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	3332      	adds	r3, #50	; 0x32
 800534c:	4a07      	ldr	r2, [pc, #28]	; (800536c <UART_SetConfig+0x118>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 020f 	and.w	r2, r3, #15
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	440a      	add	r2, r1
 800535e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005360:	bf00      	nop
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40013800 	.word	0x40013800
 800536c:	51eb851f 	.word	0x51eb851f

08005370 <TimerInit>:
/* Phần code động cơ - thuật toán PID  */
	void TimerInit(TIM_HandleTypeDef * timerHandler_right, TIM_HandleTypeDef * timerHandler_left, 	\
						uint32_t Channel_R, uint32_t Channel_L, 									\
						GPIO_TypeDef *GPIO_R, uint16_t GPIO_Pin_R, 									\
						GPIO_TypeDef *GPIO_L, uint16_t GPIO_Pin_L)									\
	{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
		handlerTimerInLib_left 	= 	timerHandler_left;
 800537e:	4a0e      	ldr	r2, [pc, #56]	; (80053b8 <TimerInit+0x48>)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6013      	str	r3, [r2, #0]
		handlerTimerInLib_right	= 	timerHandler_right;
 8005384:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <TimerInit+0x4c>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6013      	str	r3, [r2, #0]

		Channel_TIM_right		=	Channel_R;
 800538a:	4a0d      	ldr	r2, [pc, #52]	; (80053c0 <TimerInit+0x50>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6013      	str	r3, [r2, #0]
		Channel_TIM_left		=	Channel_L;
 8005390:	4a0c      	ldr	r2, [pc, #48]	; (80053c4 <TimerInit+0x54>)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6013      	str	r3, [r2, #0]
		/*Port on lib_motor.c*/
			Port_DIR_Right			=	GPIO_R;
 8005396:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <TimerInit+0x58>)
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	6013      	str	r3, [r2, #0]
			Port_DIR_Left			=	GPIO_L;
 800539c:	4a0b      	ldr	r2, [pc, #44]	; (80053cc <TimerInit+0x5c>)
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	6013      	str	r3, [r2, #0]
		/*Pin on lib_motor.c*/
			Pin_DIR_Right			=	GPIO_Pin_R;
 80053a2:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <TimerInit+0x60>)
 80053a4:	8bbb      	ldrh	r3, [r7, #28]
 80053a6:	8013      	strh	r3, [r2, #0]
			Pin_DIR_Left			=	GPIO_Pin_L;
 80053a8:	4a0a      	ldr	r2, [pc, #40]	; (80053d4 <TimerInit+0x64>)
 80053aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80053ac:	8013      	strh	r3, [r2, #0]
	}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	200003c0 	.word	0x200003c0
 80053bc:	200003bc 	.word	0x200003bc
 80053c0:	200003c4 	.word	0x200003c4
 80053c4:	200003c8 	.word	0x200003c8
 80053c8:	200003cc 	.word	0x200003cc
 80053cc:	200003d0 	.word	0x200003d0
 80053d0:	200003d4 	.word	0x200003d4
 80053d4:	200003d6 	.word	0x200003d6

080053d8 <IC74HC4051_Init>:
		static uint16_t	pre_pos						= 0;
/*Init function of 74HC4051 and 74HC595*/
	/*74HC4051 INIT*/
		void IC74HC4051_Init(	ADC_HandleTypeDef handler, GPIO_TypeDef * GPIO, 									\
								uint16_t GPIO_Pin_S0, uint16_t GPIO_Pin_S1, uint16_t GPIO_Pin_S2)					\
		{
 80053d8:	b084      	sub	sp, #16
 80053da:	b4b0      	push	{r4, r5, r7}
 80053dc:	af00      	add	r7, sp, #0
 80053de:	f107 040c 	add.w	r4, r7, #12
 80053e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			hadc_lib 							= 	handler;
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <IC74HC4051_Init+0x50>)
 80053e8:	461d      	mov	r5, r3
 80053ea:	f107 040c 	add.w	r4, r7, #12
 80053ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80053fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			IC74HC4051_GPIOx 					= 	GPIO;
 80053fe:	4a0b      	ldr	r2, [pc, #44]	; (800542c <IC74HC4051_Init+0x54>)
 8005400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005402:	6013      	str	r3, [r2, #0]
			IC74HC4051_S0_Pin 					= 	GPIO_Pin_S0;
 8005404:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <IC74HC4051_Init+0x58>)
 8005406:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800540a:	8013      	strh	r3, [r2, #0]
			IC74HC4051_S1_Pin 					= 	GPIO_Pin_S1;
 800540c:	4a09      	ldr	r2, [pc, #36]	; (8005434 <IC74HC4051_Init+0x5c>)
 800540e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005412:	8013      	strh	r3, [r2, #0]
			IC74HC4051_S2_Pin 					= 	GPIO_Pin_S2;
 8005414:	4a08      	ldr	r2, [pc, #32]	; (8005438 <IC74HC4051_Init+0x60>)
 8005416:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800541a:	8013      	strh	r3, [r2, #0]
		}
 800541c:	bf00      	nop
 800541e:	46bd      	mov	sp, r7
 8005420:	bcb0      	pop	{r4, r5, r7}
 8005422:	b004      	add	sp, #16
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	200003d8 	.word	0x200003d8
 800542c:	20000408 	.word	0x20000408
 8005430:	2000040c 	.word	0x2000040c
 8005434:	2000040e 	.word	0x2000040e
 8005438:	20000410 	.word	0x20000410

0800543c <IC74HC595_Init>:
	/*74HC595 INIT*/
		void IC74HC595_Init(	GPIO_TypeDef * DS_Port, GPIO_TypeDef * Shift_Port, GPIO_TypeDef * ST_Port, 			\
								uint16_t DS_Pin, uint16_t SH_Pin, uint16_t ST_Pin)									\
		{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	807b      	strh	r3, [r7, #2]
			IC74HC595_ST_Port		=	ST_Port;
 800544a:	4a0b      	ldr	r2, [pc, #44]	; (8005478 <IC74HC595_Init+0x3c>)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6013      	str	r3, [r2, #0]
			IC74hc595_DS_Port		= 	DS_Port;
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <IC74HC595_Init+0x40>)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6013      	str	r3, [r2, #0]
			IC74HC595_Shift_Port	=	Shift_Port;
 8005456:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <IC74HC595_Init+0x44>)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6013      	str	r3, [r2, #0]
			IC74HC595_ST_Pin		=	ST_Pin;
 800545c:	4a09      	ldr	r2, [pc, #36]	; (8005484 <IC74HC595_Init+0x48>)
 800545e:	8bbb      	ldrh	r3, [r7, #28]
 8005460:	8013      	strh	r3, [r2, #0]
			IC74hc595_Shift_Pin		=	SH_Pin;
 8005462:	4a09      	ldr	r2, [pc, #36]	; (8005488 <IC74HC595_Init+0x4c>)
 8005464:	8b3b      	ldrh	r3, [r7, #24]
 8005466:	8013      	strh	r3, [r2, #0]
			IC74hc595_DS_Pin		=	DS_Pin;
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <IC74HC595_Init+0x50>)
 800546a:	887b      	ldrh	r3, [r7, #2]
 800546c:	8013      	strh	r3, [r2, #0]
		}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	20000414 	.word	0x20000414
 800547c:	20000418 	.word	0x20000418
 8005480:	2000041c 	.word	0x2000041c
 8005484:	20000424 	.word	0x20000424
 8005488:	20000420 	.word	0x20000420
 800548c:	20000422 	.word	0x20000422

08005490 <bluetooth_init_UART>:
	static const char * confirm_motor_quick_left = "QL:";

	STATE_ROBOT State_Robot 		= 	STOP_ROBOT;
/*Init uart used in lib_uart*/
	void bluetooth_init_UART(UART_HandleTypeDef *huart)
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
		Lib_uart = *huart;
 8005498:	4a05      	ldr	r2, [pc, #20]	; (80054b0 <bluetooth_init_UART+0x20>)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	2348      	movs	r3, #72	; 0x48
 80054a2:	461a      	mov	r2, r3
 80054a4:	f000 fc26 	bl	8005cf4 <memcpy>
	}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000428 	.word	0x20000428

080054b4 <bluetooth_check_string_stop_start_robot>:
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)All_sheet_TX, 26, 1000); 				// 90 * 4 = 320 bytes; 320bytes * 8 = 2560 bits
		}
	}
/*Check string input is stop or start*/
	STATE_ROBOT bluetooth_check_string_stop_start_robot(uint8_t * rxBuffer)
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	/*Control robot*/
		if(strstr((char*)rxBuffer, confirmStart) != NULL)
 80054bc:	4b3a      	ldr	r3, [pc, #232]	; (80055a8 <bluetooth_check_string_stop_start_robot+0xf4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 f8ac 	bl	8006620 <strstr>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <bluetooth_check_string_stop_start_robot+0x32>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmStart, sizeof(confirmStart), 1000);
 80054ce:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <bluetooth_check_string_stop_start_robot+0xf4>)
 80054d0:	6819      	ldr	r1, [r3, #0]
 80054d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054d6:	2204      	movs	r2, #4
 80054d8:	4834      	ldr	r0, [pc, #208]	; (80055ac <bluetooth_check_string_stop_start_robot+0xf8>)
 80054da:	f7ff f921 	bl	8004720 <HAL_UART_Transmit>
			State_Robot = START_ROBOT;
 80054de:	4b34      	ldr	r3, [pc, #208]	; (80055b0 <bluetooth_check_string_stop_start_robot+0xfc>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	e05a      	b.n	800559c <bluetooth_check_string_stop_start_robot+0xe8>
		}
		else if( strstr((char*)rxBuffer, confirmStop) != NULL)
 80054e6:	4b33      	ldr	r3, [pc, #204]	; (80055b4 <bluetooth_check_string_stop_start_robot+0x100>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f001 f897 	bl	8006620 <strstr>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <bluetooth_check_string_stop_start_robot+0x5c>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmStop, sizeof(confirmStop), 1000);
 80054f8:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <bluetooth_check_string_stop_start_robot+0x100>)
 80054fa:	6819      	ldr	r1, [r3, #0]
 80054fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005500:	2204      	movs	r2, #4
 8005502:	482a      	ldr	r0, [pc, #168]	; (80055ac <bluetooth_check_string_stop_start_robot+0xf8>)
 8005504:	f7ff f90c 	bl	8004720 <HAL_UART_Transmit>
			State_Robot = STOP_ROBOT;
 8005508:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <bluetooth_check_string_stop_start_robot+0xfc>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e045      	b.n	800559c <bluetooth_check_string_stop_start_robot+0xe8>
		}
		else if(strstr((char*)rxBuffer, confirmThreshold) != NULL)
 8005510:	4b29      	ldr	r3, [pc, #164]	; (80055b8 <bluetooth_check_string_stop_start_robot+0x104>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4619      	mov	r1, r3
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 f882 	bl	8006620 <strstr>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <bluetooth_check_string_stop_start_robot+0x86>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmThreshold, sizeof(confirmThreshold), 1000);
 8005522:	4b25      	ldr	r3, [pc, #148]	; (80055b8 <bluetooth_check_string_stop_start_robot+0x104>)
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800552a:	2204      	movs	r2, #4
 800552c:	481f      	ldr	r0, [pc, #124]	; (80055ac <bluetooth_check_string_stop_start_robot+0xf8>)
 800552e:	f7ff f8f7 	bl	8004720 <HAL_UART_Transmit>
			State_Robot = CHECK_THRESHOLD;
 8005532:	4b1f      	ldr	r3, [pc, #124]	; (80055b0 <bluetooth_check_string_stop_start_robot+0xfc>)
 8005534:	2202      	movs	r2, #2
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e030      	b.n	800559c <bluetooth_check_string_stop_start_robot+0xe8>
		}
		else if(strstr((char*)rxBuffer, confirmStartMotor) != NULL)
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <bluetooth_check_string_stop_start_robot+0x108>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 f86d 	bl	8006620 <strstr>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d013      	beq.n	8005574 <bluetooth_check_string_stop_start_robot+0xc0>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmStartMotor, sizeof(confirmStartMotor), 1000);
 800554c:	4b1b      	ldr	r3, [pc, #108]	; (80055bc <bluetooth_check_string_stop_start_robot+0x108>)
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005554:	2204      	movs	r2, #4
 8005556:	4815      	ldr	r0, [pc, #84]	; (80055ac <bluetooth_check_string_stop_start_robot+0xf8>)
 8005558:	f7ff f8e2 	bl	8004720 <HAL_UART_Transmit>
			if(state_motor == 0)
 800555c:	4b18      	ldr	r3, [pc, #96]	; (80055c0 <bluetooth_check_string_stop_start_robot+0x10c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <bluetooth_check_string_stop_start_robot+0xb8>
			{
				state_motor = 1;
 8005564:	4b16      	ldr	r3, [pc, #88]	; (80055c0 <bluetooth_check_string_stop_start_robot+0x10c>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e017      	b.n	800559c <bluetooth_check_string_stop_start_robot+0xe8>
			}
			else
			{
				state_motor = 0;
 800556c:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <bluetooth_check_string_stop_start_robot+0x10c>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e013      	b.n	800559c <bluetooth_check_string_stop_start_robot+0xe8>
			}
		}
		else if(strstr((char*)rxBuffer, confirmPower) != NULL)
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <bluetooth_check_string_stop_start_robot+0x110>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 f850 	bl	8006620 <strstr>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <bluetooth_check_string_stop_start_robot+0xe8>
		{
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)confirmPower, sizeof(confirmPower), 1000);
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <bluetooth_check_string_stop_start_robot+0x110>)
 8005588:	6819      	ldr	r1, [r3, #0]
 800558a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800558e:	2204      	movs	r2, #4
 8005590:	4806      	ldr	r0, [pc, #24]	; (80055ac <bluetooth_check_string_stop_start_robot+0xf8>)
 8005592:	f7ff f8c5 	bl	8004720 <HAL_UART_Transmit>
			State_Robot = POWER;
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <bluetooth_check_string_stop_start_robot+0xfc>)
 8005598:	2204      	movs	r2, #4
 800559a:	701a      	strb	r2, [r3, #0]
		}
		return State_Robot;
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <bluetooth_check_string_stop_start_robot+0xfc>)
 800559e:	781b      	ldrb	r3, [r3, #0]
	}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000020 	.word	0x20000020
 80055ac:	20000428 	.word	0x20000428
 80055b0:	2000005c 	.word	0x2000005c
 80055b4:	20000024 	.word	0x20000024
 80055b8:	20000028 	.word	0x20000028
 80055bc:	2000002c 	.word	0x2000002c
 80055c0:	200003b8 	.word	0x200003b8
 80055c4:	20000030 	.word	0x20000030

080055c8 <bluetooth_rx_change_kx>:
/*Chang Kx with value is recieved by phone*/
	void bluetooth_rx_change_kx(uint8_t *rxBuffer)
	{
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b089      	sub	sp, #36	; 0x24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
		char * token = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
		char string_feedback[13] = {0};
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	f107 0310 	add.w	r3, r7, #16
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	721a      	strb	r2, [r3, #8]
		/*kp: xx, ki: yy, kd: zz*/
		/*Set Kp*/
			if(strstr((char*)rxBuffer, confirmKp) != NULL)
 80055e4:	4bbc      	ldr	r3, [pc, #752]	; (80058d8 <bluetooth_rx_change_kx+0x310>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 f818 	bl	8006620 <strstr>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d03a      	beq.n	800566c <bluetooth_rx_change_kx+0xa4>
			{
				token = strtok((char*)rxBuffer, ":");											//kp:
 80055f6:	49b9      	ldr	r1, [pc, #740]	; (80058dc <bluetooth_rx_change_kx+0x314>)
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 f827 	bl	800664c <strtok>
 80055fe:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8005600:	49b7      	ldr	r1, [pc, #732]	; (80058e0 <bluetooth_rx_change_kx+0x318>)
 8005602:	2000      	movs	r0, #0
 8005604:	f001 f822 	bl	800664c <strtok>
 8005608:	61f8      	str	r0, [r7, #28]
				kx[0] = ((Char2Num(token) * 10) + Char2Num(token + 1)) / (float)10000;
 800560a:	69f8      	ldr	r0, [r7, #28]
 800560c:	f000 fa46 	bl	8005a9c <Char2Num>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	461c      	mov	r4, r3
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	3301      	adds	r3, #1
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fa3a 	bl	8005a9c <Char2Num>
 8005628:	4603      	mov	r3, r0
 800562a:	4423      	add	r3, r4
 800562c:	4618      	mov	r0, r3
 800562e:	f7fb fb05 	bl	8000c3c <__aeabi_i2f>
 8005632:	4603      	mov	r3, r0
 8005634:	49ab      	ldr	r1, [pc, #684]	; (80058e4 <bluetooth_rx_change_kx+0x31c>)
 8005636:	4618      	mov	r0, r3
 8005638:	f7fb fc08 	bl	8000e4c <__aeabi_fdiv>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	4ba9      	ldr	r3, [pc, #676]	; (80058e8 <bluetooth_rx_change_kx+0x320>)
 8005642:	601a      	str	r2, [r3, #0]
				sprintf(string_feedback,"\nKp=%1.5f\n", kx[0]);
 8005644:	4ba8      	ldr	r3, [pc, #672]	; (80058e8 <bluetooth_rx_change_kx+0x320>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f7fa feed 	bl	8000428 <__aeabi_f2d>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	f107 000c 	add.w	r0, r7, #12
 8005656:	49a5      	ldr	r1, [pc, #660]	; (80058ec <bluetooth_rx_change_kx+0x324>)
 8005658:	f000 ffc2 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback), 1000);
 800565c:	f107 010c 	add.w	r1, r7, #12
 8005660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005664:	220d      	movs	r2, #13
 8005666:	48a2      	ldr	r0, [pc, #648]	; (80058f0 <bluetooth_rx_change_kx+0x328>)
 8005668:	f7ff f85a 	bl	8004720 <HAL_UART_Transmit>
			}
		/*Set Ki*/
			if(strstr((char*)rxBuffer, confirmKi) != NULL)
 800566c:	4ba1      	ldr	r3, [pc, #644]	; (80058f4 <bluetooth_rx_change_kx+0x32c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 ffd4 	bl	8006620 <strstr>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d03a      	beq.n	80056f4 <bluetooth_rx_change_kx+0x12c>
			{
				token = strtok((char*)rxBuffer, ":");											//kp: xx, ki:
 800567e:	4997      	ldr	r1, [pc, #604]	; (80058dc <bluetooth_rx_change_kx+0x314>)
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 ffe3 	bl	800664c <strtok>
 8005686:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8005688:	4995      	ldr	r1, [pc, #596]	; (80058e0 <bluetooth_rx_change_kx+0x318>)
 800568a:	2000      	movs	r0, #0
 800568c:	f000 ffde 	bl	800664c <strtok>
 8005690:	61f8      	str	r0, [r7, #28]
				kx[1] = ((Char2Num(token) * 10) + Char2Num(token + 1)) / (float)10000;
 8005692:	69f8      	ldr	r0, [r7, #28]
 8005694:	f000 fa02 	bl	8005a9c <Char2Num>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	461c      	mov	r4, r3
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f9f6 	bl	8005a9c <Char2Num>
 80056b0:	4603      	mov	r3, r0
 80056b2:	4423      	add	r3, r4
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fb fac1 	bl	8000c3c <__aeabi_i2f>
 80056ba:	4603      	mov	r3, r0
 80056bc:	4989      	ldr	r1, [pc, #548]	; (80058e4 <bluetooth_rx_change_kx+0x31c>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fb fbc4 	bl	8000e4c <__aeabi_fdiv>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b87      	ldr	r3, [pc, #540]	; (80058e8 <bluetooth_rx_change_kx+0x320>)
 80056ca:	605a      	str	r2, [r3, #4]
				sprintf(string_feedback,"\nKi=%1.5f\n", kx[1]);
 80056cc:	4b86      	ldr	r3, [pc, #536]	; (80058e8 <bluetooth_rx_change_kx+0x320>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fa fea9 	bl	8000428 <__aeabi_f2d>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	f107 000c 	add.w	r0, r7, #12
 80056de:	4986      	ldr	r1, [pc, #536]	; (80058f8 <bluetooth_rx_change_kx+0x330>)
 80056e0:	f000 ff7e 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback), 1000);
 80056e4:	f107 010c 	add.w	r1, r7, #12
 80056e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056ec:	220d      	movs	r2, #13
 80056ee:	4880      	ldr	r0, [pc, #512]	; (80058f0 <bluetooth_rx_change_kx+0x328>)
 80056f0:	f7ff f816 	bl	8004720 <HAL_UART_Transmit>
			}
		/*Set Kd*/
			if(strstr((char*)rxBuffer, confirmKd) != NULL)
 80056f4:	4b81      	ldr	r3, [pc, #516]	; (80058fc <bluetooth_rx_change_kx+0x334>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4619      	mov	r1, r3
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 ff90 	bl	8006620 <strstr>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d03a      	beq.n	800577c <bluetooth_rx_change_kx+0x1b4>
			{
				token = strtok((char*)rxBuffer, ":");											//kp: xx, ki: yy, kd: zz
 8005706:	4975      	ldr	r1, [pc, #468]	; (80058dc <bluetooth_rx_change_kx+0x314>)
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 ff9f 	bl	800664c <strtok>
 800570e:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");															//zz
 8005710:	4973      	ldr	r1, [pc, #460]	; (80058e0 <bluetooth_rx_change_kx+0x318>)
 8005712:	2000      	movs	r0, #0
 8005714:	f000 ff9a 	bl	800664c <strtok>
 8005718:	61f8      	str	r0, [r7, #28]
				kx[2] = ((Char2Num(token) * 10) + Char2Num(token + 1)) / (float)10000;
 800571a:	69f8      	ldr	r0, [r7, #28]
 800571c:	f000 f9be 	bl	8005a9c <Char2Num>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	005b      	lsls	r3, r3, #1
 800572c:	461c      	mov	r4, r3
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3301      	adds	r3, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f9b2 	bl	8005a9c <Char2Num>
 8005738:	4603      	mov	r3, r0
 800573a:	4423      	add	r3, r4
 800573c:	4618      	mov	r0, r3
 800573e:	f7fb fa7d 	bl	8000c3c <__aeabi_i2f>
 8005742:	4603      	mov	r3, r0
 8005744:	4967      	ldr	r1, [pc, #412]	; (80058e4 <bluetooth_rx_change_kx+0x31c>)
 8005746:	4618      	mov	r0, r3
 8005748:	f7fb fb80 	bl	8000e4c <__aeabi_fdiv>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	4b65      	ldr	r3, [pc, #404]	; (80058e8 <bluetooth_rx_change_kx+0x320>)
 8005752:	609a      	str	r2, [r3, #8]
//				sprintf(string_feedback,"\nKd=%1.4f\n", kx[3]);
//				kx[2] = ((Char2Num(token) * 10) + Char2Num(token + 1));
				sprintf(string_feedback,"\nKd=%03d\n", kx[3]);
 8005754:	4b64      	ldr	r3, [pc, #400]	; (80058e8 <bluetooth_rx_change_kx+0x320>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4618      	mov	r0, r3
 800575a:	f7fa fe65 	bl	8000428 <__aeabi_f2d>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	f107 000c 	add.w	r0, r7, #12
 8005766:	4966      	ldr	r1, [pc, #408]	; (8005900 <bluetooth_rx_change_kx+0x338>)
 8005768:	f000 ff3a 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback) - 1, 1000);
 800576c:	f107 010c 	add.w	r1, r7, #12
 8005770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005774:	220c      	movs	r2, #12
 8005776:	485e      	ldr	r0, [pc, #376]	; (80058f0 <bluetooth_rx_change_kx+0x328>)
 8005778:	f7fe ffd2 	bl	8004720 <HAL_UART_Transmit>
			}
		/*Set full speed*/
			if(strstr((char*)rxBuffer, confirmMaxSpeedRight) != NULL)
 800577c:	4b61      	ldr	r3, [pc, #388]	; (8005904 <bluetooth_rx_change_kx+0x33c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 ff4c 	bl	8006620 <strstr>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d02d      	beq.n	80057ea <bluetooth_rx_change_kx+0x222>
			{
				token = strtok((char*)rxBuffer, ":");
 800578e:	4953      	ldr	r1, [pc, #332]	; (80058dc <bluetooth_rx_change_kx+0x314>)
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 ff5b 	bl	800664c <strtok>
 8005796:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8005798:	4951      	ldr	r1, [pc, #324]	; (80058e0 <bluetooth_rx_change_kx+0x318>)
 800579a:	2000      	movs	r0, #0
 800579c:	f000 ff56 	bl	800664c <strtok>
 80057a0:	61f8      	str	r0, [r7, #28]
				maxspeedr = (Char2Num(token) * 10) + Char2Num(token + 1);
 80057a2:	69f8      	ldr	r0, [r7, #28]
 80057a4:	f000 f97a 	bl	8005a9c <Char2Num>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	0092      	lsls	r2, r2, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	b2dc      	uxtb	r4, r3
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	3301      	adds	r3, #1
 80057b8:	4618      	mov	r0, r3
 80057ba:	f000 f96f 	bl	8005a9c <Char2Num>
 80057be:	4603      	mov	r3, r0
 80057c0:	4423      	add	r3, r4
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	4b50      	ldr	r3, [pc, #320]	; (8005908 <bluetooth_rx_change_kx+0x340>)
 80057c6:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nMSR=%03d\n", maxspeedl);
 80057c8:	4b50      	ldr	r3, [pc, #320]	; (800590c <bluetooth_rx_change_kx+0x344>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	f107 030c 	add.w	r3, r7, #12
 80057d2:	494f      	ldr	r1, [pc, #316]	; (8005910 <bluetooth_rx_change_kx+0x348>)
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 ff03 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 80057da:	f107 010c 	add.w	r1, r7, #12
 80057de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057e2:	2209      	movs	r2, #9
 80057e4:	4842      	ldr	r0, [pc, #264]	; (80058f0 <bluetooth_rx_change_kx+0x328>)
 80057e6:	f7fe ff9b 	bl	8004720 <HAL_UART_Transmit>
			}
			if(strstr((char*)rxBuffer, confirmMaxSpeedLeft) != NULL)
 80057ea:	4b4a      	ldr	r3, [pc, #296]	; (8005914 <bluetooth_rx_change_kx+0x34c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 ff15 	bl	8006620 <strstr>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02d      	beq.n	8005858 <bluetooth_rx_change_kx+0x290>
			{
				token = strtok((char*)rxBuffer, ":");
 80057fc:	4937      	ldr	r1, [pc, #220]	; (80058dc <bluetooth_rx_change_kx+0x314>)
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 ff24 	bl	800664c <strtok>
 8005804:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8005806:	4936      	ldr	r1, [pc, #216]	; (80058e0 <bluetooth_rx_change_kx+0x318>)
 8005808:	2000      	movs	r0, #0
 800580a:	f000 ff1f 	bl	800664c <strtok>
 800580e:	61f8      	str	r0, [r7, #28]
				maxspeedl = (Char2Num(token) * 10) + Char2Num(token + 1);
 8005810:	69f8      	ldr	r0, [r7, #28]
 8005812:	f000 f943 	bl	8005a9c <Char2Num>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	0092      	lsls	r2, r2, #2
 800581c:	4413      	add	r3, r2
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	b2dc      	uxtb	r4, r3
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3301      	adds	r3, #1
 8005826:	4618      	mov	r0, r3
 8005828:	f000 f938 	bl	8005a9c <Char2Num>
 800582c:	4603      	mov	r3, r0
 800582e:	4423      	add	r3, r4
 8005830:	b2da      	uxtb	r2, r3
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <bluetooth_rx_change_kx+0x344>)
 8005834:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nMSL=%03d\n", maxspeedl);
 8005836:	4b35      	ldr	r3, [pc, #212]	; (800590c <bluetooth_rx_change_kx+0x344>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	f107 030c 	add.w	r3, r7, #12
 8005840:	4935      	ldr	r1, [pc, #212]	; (8005918 <bluetooth_rx_change_kx+0x350>)
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fecc 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 8005848:	f107 010c 	add.w	r1, r7, #12
 800584c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005850:	2209      	movs	r2, #9
 8005852:	4827      	ldr	r0, [pc, #156]	; (80058f0 <bluetooth_rx_change_kx+0x328>)
 8005854:	f7fe ff64 	bl	8004720 <HAL_UART_Transmit>
			}
		/*Set base speed*/
			if(strstr((char*)rxBuffer, confirmBaseSpeedR) != NULL)
 8005858:	4b30      	ldr	r3, [pc, #192]	; (800591c <bluetooth_rx_change_kx+0x354>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fede 	bl	8006620 <strstr>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d02d      	beq.n	80058c6 <bluetooth_rx_change_kx+0x2fe>
			{
				token = strtok((char*)rxBuffer, ":");
 800586a:	491c      	ldr	r1, [pc, #112]	; (80058dc <bluetooth_rx_change_kx+0x314>)
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 feed 	bl	800664c <strtok>
 8005872:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8005874:	491a      	ldr	r1, [pc, #104]	; (80058e0 <bluetooth_rx_change_kx+0x318>)
 8005876:	2000      	movs	r0, #0
 8005878:	f000 fee8 	bl	800664c <strtok>
 800587c:	61f8      	str	r0, [r7, #28]
				basespeedr = (Char2Num(token) * 10) + Char2Num(token + 1);
 800587e:	69f8      	ldr	r0, [r7, #28]
 8005880:	f000 f90c 	bl	8005a9c <Char2Num>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	0092      	lsls	r2, r2, #2
 800588a:	4413      	add	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	b2dc      	uxtb	r4, r3
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3301      	adds	r3, #1
 8005894:	4618      	mov	r0, r3
 8005896:	f000 f901 	bl	8005a9c <Char2Num>
 800589a:	4603      	mov	r3, r0
 800589c:	4423      	add	r3, r4
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	4b1f      	ldr	r3, [pc, #124]	; (8005920 <bluetooth_rx_change_kx+0x358>)
 80058a2:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nBSR=%03d", basespeedr);
 80058a4:	4b1e      	ldr	r3, [pc, #120]	; (8005920 <bluetooth_rx_change_kx+0x358>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	f107 030c 	add.w	r3, r7, #12
 80058ae:	491d      	ldr	r1, [pc, #116]	; (8005924 <bluetooth_rx_change_kx+0x35c>)
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fe95 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 80058b6:	f107 010c 	add.w	r1, r7, #12
 80058ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058be:	2209      	movs	r2, #9
 80058c0:	480b      	ldr	r0, [pc, #44]	; (80058f0 <bluetooth_rx_change_kx+0x328>)
 80058c2:	f7fe ff2d 	bl	8004720 <HAL_UART_Transmit>
			}
			if(strstr((char*)rxBuffer, confirmBaseSpeedL) != NULL)
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <bluetooth_rx_change_kx+0x360>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fea7 	bl	8006620 <strstr>
 80058d2:	4603      	mov	r3, r0
 80058d4:	e02a      	b.n	800592c <bluetooth_rx_change_kx+0x364>
 80058d6:	bf00      	nop
 80058d8:	20000034 	.word	0x20000034
 80058dc:	08008c8c 	.word	0x08008c8c
 80058e0:	08008c90 	.word	0x08008c90
 80058e4:	461c4000 	.word	0x461c4000
 80058e8:	20000014 	.word	0x20000014
 80058ec:	08008c94 	.word	0x08008c94
 80058f0:	20000428 	.word	0x20000428
 80058f4:	20000038 	.word	0x20000038
 80058f8:	08008ca0 	.word	0x08008ca0
 80058fc:	2000003c 	.word	0x2000003c
 8005900:	08008cac 	.word	0x08008cac
 8005904:	2000004c 	.word	0x2000004c
 8005908:	2000000f 	.word	0x2000000f
 800590c:	20000010 	.word	0x20000010
 8005910:	08008cb8 	.word	0x08008cb8
 8005914:	20000050 	.word	0x20000050
 8005918:	08008cc4 	.word	0x08008cc4
 800591c:	20000044 	.word	0x20000044
 8005920:	2000000d 	.word	0x2000000d
 8005924:	08008cd0 	.word	0x08008cd0
 8005928:	20000048 	.word	0x20000048
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02d      	beq.n	800598c <bluetooth_rx_change_kx+0x3c4>
			{
				token = strtok((char*)rxBuffer, ":");
 8005930:	494f      	ldr	r1, [pc, #316]	; (8005a70 <bluetooth_rx_change_kx+0x4a8>)
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fe8a 	bl	800664c <strtok>
 8005938:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 800593a:	494e      	ldr	r1, [pc, #312]	; (8005a74 <bluetooth_rx_change_kx+0x4ac>)
 800593c:	2000      	movs	r0, #0
 800593e:	f000 fe85 	bl	800664c <strtok>
 8005942:	61f8      	str	r0, [r7, #28]
				basespeedl = (Char2Num(token) * 10) + Char2Num(token + 1);
 8005944:	69f8      	ldr	r0, [r7, #28]
 8005946:	f000 f8a9 	bl	8005a9c <Char2Num>
 800594a:	4603      	mov	r3, r0
 800594c:	461a      	mov	r2, r3
 800594e:	0092      	lsls	r2, r2, #2
 8005950:	4413      	add	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	b2dc      	uxtb	r4, r3
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	3301      	adds	r3, #1
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f89e 	bl	8005a9c <Char2Num>
 8005960:	4603      	mov	r3, r0
 8005962:	4423      	add	r3, r4
 8005964:	b2da      	uxtb	r2, r3
 8005966:	4b44      	ldr	r3, [pc, #272]	; (8005a78 <bluetooth_rx_change_kx+0x4b0>)
 8005968:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nBSR=%03d", basespeedl);
 800596a:	4b43      	ldr	r3, [pc, #268]	; (8005a78 <bluetooth_rx_change_kx+0x4b0>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	f107 030c 	add.w	r3, r7, #12
 8005974:	4941      	ldr	r1, [pc, #260]	; (8005a7c <bluetooth_rx_change_kx+0x4b4>)
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fe32 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 800597c:	f107 010c 	add.w	r1, r7, #12
 8005980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005984:	2209      	movs	r2, #9
 8005986:	483e      	ldr	r0, [pc, #248]	; (8005a80 <bluetooth_rx_change_kx+0x4b8>)
 8005988:	f7fe feca 	bl	8004720 <HAL_UART_Transmit>
			}
		/*Set quick speed Line*/
			if(strstr((char*)rxBuffer, confirm_motor_quick_right) != NULL)
 800598c:	4b3d      	ldr	r3, [pc, #244]	; (8005a84 <bluetooth_rx_change_kx+0x4bc>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fe44 	bl	8006620 <strstr>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d02d      	beq.n	80059fa <bluetooth_rx_change_kx+0x432>
			{
				token = strtok((char*)rxBuffer, ":");
 800599e:	4934      	ldr	r1, [pc, #208]	; (8005a70 <bluetooth_rx_change_kx+0x4a8>)
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fe53 	bl	800664c <strtok>
 80059a6:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 80059a8:	4932      	ldr	r1, [pc, #200]	; (8005a74 <bluetooth_rx_change_kx+0x4ac>)
 80059aa:	2000      	movs	r0, #0
 80059ac:	f000 fe4e 	bl	800664c <strtok>
 80059b0:	61f8      	str	r0, [r7, #28]
				quick_speed_right = (Char2Num(token) * 10) + Char2Num(token + 1);
 80059b2:	69f8      	ldr	r0, [r7, #28]
 80059b4:	f000 f872 	bl	8005a9c <Char2Num>
 80059b8:	4603      	mov	r3, r0
 80059ba:	461a      	mov	r2, r3
 80059bc:	0092      	lsls	r2, r2, #2
 80059be:	4413      	add	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	b2dc      	uxtb	r4, r3
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	3301      	adds	r3, #1
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 f867 	bl	8005a9c <Char2Num>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4423      	add	r3, r4
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	4b2c      	ldr	r3, [pc, #176]	; (8005a88 <bluetooth_rx_change_kx+0x4c0>)
 80059d6:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nQSR=%03d", quick_speed_right);
 80059d8:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <bluetooth_rx_change_kx+0x4c0>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	461a      	mov	r2, r3
 80059de:	f107 030c 	add.w	r3, r7, #12
 80059e2:	492a      	ldr	r1, [pc, #168]	; (8005a8c <bluetooth_rx_change_kx+0x4c4>)
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fdfb 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 80059ea:	f107 010c 	add.w	r1, r7, #12
 80059ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059f2:	2209      	movs	r2, #9
 80059f4:	4822      	ldr	r0, [pc, #136]	; (8005a80 <bluetooth_rx_change_kx+0x4b8>)
 80059f6:	f7fe fe93 	bl	8004720 <HAL_UART_Transmit>
			}
			if(strstr((char*)rxBuffer, confirm_motor_quick_left) != NULL)
 80059fa:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <bluetooth_rx_change_kx+0x4c8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fe0d 	bl	8006620 <strstr>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02d      	beq.n	8005a68 <bluetooth_rx_change_kx+0x4a0>
			{
				token = strtok((char*)rxBuffer, ":");
 8005a0c:	4918      	ldr	r1, [pc, #96]	; (8005a70 <bluetooth_rx_change_kx+0x4a8>)
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fe1c 	bl	800664c <strtok>
 8005a14:	61f8      	str	r0, [r7, #28]
				token = strtok(NULL, ",");
 8005a16:	4917      	ldr	r1, [pc, #92]	; (8005a74 <bluetooth_rx_change_kx+0x4ac>)
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f000 fe17 	bl	800664c <strtok>
 8005a1e:	61f8      	str	r0, [r7, #28]
				quick_speed_left = (Char2Num(token) * 10) + Char2Num(token + 1);
 8005a20:	69f8      	ldr	r0, [r7, #28]
 8005a22:	f000 f83b 	bl	8005a9c <Char2Num>
 8005a26:	4603      	mov	r3, r0
 8005a28:	461a      	mov	r2, r3
 8005a2a:	0092      	lsls	r2, r2, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	b2dc      	uxtb	r4, r3
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 f830 	bl	8005a9c <Char2Num>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	4423      	add	r3, r4
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <bluetooth_rx_change_kx+0x4cc>)
 8005a44:	701a      	strb	r2, [r3, #0]
				sprintf(string_feedback,"\nQSL=%03d", quick_speed_left);
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <bluetooth_rx_change_kx+0x4cc>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	4911      	ldr	r1, [pc, #68]	; (8005a98 <bluetooth_rx_change_kx+0x4d0>)
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fdc4 	bl	80065e0 <siprintf>
				HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, sizeof(string_feedback)-4, 1000);
 8005a58:	f107 010c 	add.w	r1, r7, #12
 8005a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a60:	2209      	movs	r2, #9
 8005a62:	4807      	ldr	r0, [pc, #28]	; (8005a80 <bluetooth_rx_change_kx+0x4b8>)
 8005a64:	f7fe fe5c 	bl	8004720 <HAL_UART_Transmit>
			}
	}
 8005a68:	bf00      	nop
 8005a6a:	3724      	adds	r7, #36	; 0x24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd90      	pop	{r4, r7, pc}
 8005a70:	08008c8c 	.word	0x08008c8c
 8005a74:	08008c90 	.word	0x08008c90
 8005a78:	2000000e 	.word	0x2000000e
 8005a7c:	08008cd0 	.word	0x08008cd0
 8005a80:	20000428 	.word	0x20000428
 8005a84:	20000054 	.word	0x20000054
 8005a88:	20000011 	.word	0x20000011
 8005a8c:	08008cdc 	.word	0x08008cdc
 8005a90:	20000058 	.word	0x20000058
 8005a94:	20000012 	.word	0x20000012
 8005a98:	08008ce8 	.word	0x08008ce8

08005a9c <Char2Num>:
/*func support for "bluetooth_rx_change_kx"*/
	uint8_t Char2Num(char * var_char)
	{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
		uint8_t var_num = *var_char - 48;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	3b30      	subs	r3, #48	; 0x30
 8005aaa:	73fb      	strb	r3, [r7, #15]
		return var_num;
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
	}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <change_line_sensor_read>:
/**/
	void change_line_sensor_read(uint8_t *rxBuffer)
	{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
		char * token = NULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61fb      	str	r3, [r7, #28]
		char string_feedback[15] = {0};
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	f107 0310 	add.w	r3, r7, #16
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	f8c3 2007 	str.w	r2, [r3, #7]
		if(strstr((char*)rxBuffer, changeLine) != NULL)
 8005ad6:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <change_line_sensor_read+0x8c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fd9f 	bl	8006620 <strstr>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d029      	beq.n	8005b3c <change_line_sensor_read+0x84>
		{
			token = strtok((char*)rxBuffer, ":");											//kp: xx, ki: yy, kd: zz
 8005ae8:	4917      	ldr	r1, [pc, #92]	; (8005b48 <change_line_sensor_read+0x90>)
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fdae 	bl	800664c <strtok>
 8005af0:	61f8      	str	r0, [r7, #28]
			token = strtok(NULL, ",");															//zz
 8005af2:	4916      	ldr	r1, [pc, #88]	; (8005b4c <change_line_sensor_read+0x94>)
 8005af4:	2000      	movs	r0, #0
 8005af6:	f000 fda9 	bl	800664c <strtok>
 8005afa:	61f8      	str	r0, [r7, #28]
			if(*token == 'W')
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b57      	cmp	r3, #87	; 0x57
 8005b02:	d103      	bne.n	8005b0c <change_line_sensor_read+0x54>
			{
				state_line_check = LINE_WHITE;
 8005b04:	4b12      	ldr	r3, [pc, #72]	; (8005b50 <change_line_sensor_read+0x98>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	e006      	b.n	8005b1a <change_line_sensor_read+0x62>
			}
			else if(*token == 'B')
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b42      	cmp	r3, #66	; 0x42
 8005b12:	d102      	bne.n	8005b1a <change_line_sensor_read+0x62>
			{
				state_line_check = LINE_BLACK;
 8005b14:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <change_line_sensor_read+0x98>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
			}
			sprintf(string_feedback,"\nLINE=%c", state_line_check);
 8005b1a:	4b0d      	ldr	r3, [pc, #52]	; (8005b50 <change_line_sensor_read+0x98>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	490b      	ldr	r1, [pc, #44]	; (8005b54 <change_line_sensor_read+0x9c>)
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fd5a 	bl	80065e0 <siprintf>
			HAL_UART_Transmit(&Lib_uart, (uint8_t *)string_feedback, 7, 1000);
 8005b2c:	f107 010c 	add.w	r1, r7, #12
 8005b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b34:	2207      	movs	r2, #7
 8005b36:	4808      	ldr	r0, [pc, #32]	; (8005b58 <change_line_sensor_read+0xa0>)
 8005b38:	f7fe fdf2 	bl	8004720 <HAL_UART_Transmit>
		}
	}
 8005b3c:	bf00      	nop
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000040 	.word	0x20000040
 8005b48:	08008c8c 	.word	0x08008c8c
 8005b4c:	08008c90 	.word	0x08008c90
 8005b50:	20000426 	.word	0x20000426
 8005b54:	08008cf4 	.word	0x08008cf4
 8005b58:	20000428 	.word	0x20000428
 8005b5c:	00000000 	.word	0x00000000

08005b60 <HAL_TIM_IC_CaptureCallback>:
#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	7f1b      	ldrb	r3, [r3, #28]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 8083 	bne.w	8005c78 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8005b72:	4b45      	ldr	r3, [pc, #276]	; (8005c88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11a      	bne.n	8005bb0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7fe f8fd 	bl	8003d7c <HAL_TIM_ReadCapturedValue>
 8005b82:	4603      	mov	r3, r0
 8005b84:	4a41      	ldr	r2, [pc, #260]	; (8005c8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005b86:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8005b88:	4b3f      	ldr	r3, [pc, #252]	; (8005c88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a1a      	ldr	r2, [r3, #32]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 020a 	bic.w	r2, r2, #10
 8005b9c:	621a      	str	r2, [r3, #32]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0202 	orr.w	r2, r2, #2
 8005bac:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8005bae:	e063      	b.n	8005c78 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8005bb0:	4b35      	ldr	r3, [pc, #212]	; (8005c88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d15f      	bne.n	8005c78 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8005bb8:	2100      	movs	r1, #0
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fe f8de 	bl	8003d7c <HAL_TIM_ReadCapturedValue>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	4a33      	ldr	r2, [pc, #204]	; (8005c90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005bc4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8005bce:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b2e      	ldr	r3, [pc, #184]	; (8005c8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d907      	bls.n	8005bea <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8005bda:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b2b      	ldr	r3, [pc, #172]	; (8005c8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	4a2b      	ldr	r2, [pc, #172]	; (8005c94 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e00f      	b.n	8005c0a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8005bea:	4b28      	ldr	r3, [pc, #160]	; (8005c8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4b28      	ldr	r3, [pc, #160]	; (8005c90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d909      	bls.n	8005c0a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8005bf6:	4b26      	ldr	r3, [pc, #152]	; (8005c90 <HAL_TIM_IC_CaptureCallback+0x130>)
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005c04:	33ff      	adds	r3, #255	; 0xff
 8005c06:	4a23      	ldr	r2, [pc, #140]	; (8005c94 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005c08:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8005c0a:	4b22      	ldr	r3, [pc, #136]	; (8005c94 <HAL_TIM_IC_CaptureCallback+0x134>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fa fbe8 	bl	80003e4 <__aeabi_ui2d>
 8005c14:	a31a      	add	r3, pc, #104	; (adr r3, 8005c80 <HAL_TIM_IC_CaptureCallback+0x120>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f7fa fc5d 	bl	80004d8 <__aeabi_dmul>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c2e:	f7fa fd7d 	bl	800072c <__aeabi_ddiv>
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	4610      	mov	r0, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f7fa ff25 	bl	8000a88 <__aeabi_d2uiz>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <HAL_TIM_IC_CaptureCallback+0x138>)
 8005c44:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <HAL_TIM_IC_CaptureCallback+0x128>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6a1a      	ldr	r2, [r3, #32]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 020a 	bic.w	r2, r2, #10
 8005c5a:	621a      	str	r2, [r3, #32]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6a12      	ldr	r2, [r2, #32]
 8005c66:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0202 	bic.w	r2, r2, #2
 8005c76:	60da      	str	r2, [r3, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	b020c49c 	.word	0xb020c49c
 8005c84:	3fa16872 	.word	0x3fa16872
 8005c88:	2000047c 	.word	0x2000047c
 8005c8c:	20000470 	.word	0x20000470
 8005c90:	20000474 	.word	0x20000474
 8005c94:	20000478 	.word	0x20000478
 8005c98:	2000047d 	.word	0x2000047d
 8005c9c:	2000027c 	.word	0x2000027c

08005ca0 <__errno>:
 8005ca0:	4b01      	ldr	r3, [pc, #4]	; (8005ca8 <__errno+0x8>)
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20000060 	.word	0x20000060

08005cac <__libc_init_array>:
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	2600      	movs	r6, #0
 8005cb0:	4d0c      	ldr	r5, [pc, #48]	; (8005ce4 <__libc_init_array+0x38>)
 8005cb2:	4c0d      	ldr	r4, [pc, #52]	; (8005ce8 <__libc_init_array+0x3c>)
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	42a6      	cmp	r6, r4
 8005cba:	d109      	bne.n	8005cd0 <__libc_init_array+0x24>
 8005cbc:	f002 ff6c 	bl	8008b98 <_init>
 8005cc0:	2600      	movs	r6, #0
 8005cc2:	4d0a      	ldr	r5, [pc, #40]	; (8005cec <__libc_init_array+0x40>)
 8005cc4:	4c0a      	ldr	r4, [pc, #40]	; (8005cf0 <__libc_init_array+0x44>)
 8005cc6:	1b64      	subs	r4, r4, r5
 8005cc8:	10a4      	asrs	r4, r4, #2
 8005cca:	42a6      	cmp	r6, r4
 8005ccc:	d105      	bne.n	8005cda <__libc_init_array+0x2e>
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd4:	4798      	blx	r3
 8005cd6:	3601      	adds	r6, #1
 8005cd8:	e7ee      	b.n	8005cb8 <__libc_init_array+0xc>
 8005cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cde:	4798      	blx	r3
 8005ce0:	3601      	adds	r6, #1
 8005ce2:	e7f2      	b.n	8005cca <__libc_init_array+0x1e>
 8005ce4:	0800916c 	.word	0x0800916c
 8005ce8:	0800916c 	.word	0x0800916c
 8005cec:	0800916c 	.word	0x0800916c
 8005cf0:	08009170 	.word	0x08009170

08005cf4 <memcpy>:
 8005cf4:	440a      	add	r2, r1
 8005cf6:	4291      	cmp	r1, r2
 8005cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cfc:	d100      	bne.n	8005d00 <memcpy+0xc>
 8005cfe:	4770      	bx	lr
 8005d00:	b510      	push	{r4, lr}
 8005d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d06:	4291      	cmp	r1, r2
 8005d08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d0c:	d1f9      	bne.n	8005d02 <memcpy+0xe>
 8005d0e:	bd10      	pop	{r4, pc}

08005d10 <memset>:
 8005d10:	4603      	mov	r3, r0
 8005d12:	4402      	add	r2, r0
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d100      	bne.n	8005d1a <memset+0xa>
 8005d18:	4770      	bx	lr
 8005d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d1e:	e7f9      	b.n	8005d14 <memset+0x4>

08005d20 <__cvt>:
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d26:	461f      	mov	r7, r3
 8005d28:	bfbb      	ittet	lt
 8005d2a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005d2e:	461f      	movlt	r7, r3
 8005d30:	2300      	movge	r3, #0
 8005d32:	232d      	movlt	r3, #45	; 0x2d
 8005d34:	b088      	sub	sp, #32
 8005d36:	4614      	mov	r4, r2
 8005d38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d3c:	7013      	strb	r3, [r2, #0]
 8005d3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d40:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005d44:	f023 0820 	bic.w	r8, r3, #32
 8005d48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d4c:	d005      	beq.n	8005d5a <__cvt+0x3a>
 8005d4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d52:	d100      	bne.n	8005d56 <__cvt+0x36>
 8005d54:	3501      	adds	r5, #1
 8005d56:	2302      	movs	r3, #2
 8005d58:	e000      	b.n	8005d5c <__cvt+0x3c>
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	aa07      	add	r2, sp, #28
 8005d5e:	9204      	str	r2, [sp, #16]
 8005d60:	aa06      	add	r2, sp, #24
 8005d62:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d66:	e9cd 3500 	strd	r3, r5, [sp]
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	463b      	mov	r3, r7
 8005d6e:	f000 fd73 	bl	8006858 <_dtoa_r>
 8005d72:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d76:	4606      	mov	r6, r0
 8005d78:	d102      	bne.n	8005d80 <__cvt+0x60>
 8005d7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d7c:	07db      	lsls	r3, r3, #31
 8005d7e:	d522      	bpl.n	8005dc6 <__cvt+0xa6>
 8005d80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d84:	eb06 0905 	add.w	r9, r6, r5
 8005d88:	d110      	bne.n	8005dac <__cvt+0x8c>
 8005d8a:	7833      	ldrb	r3, [r6, #0]
 8005d8c:	2b30      	cmp	r3, #48	; 0x30
 8005d8e:	d10a      	bne.n	8005da6 <__cvt+0x86>
 8005d90:	2200      	movs	r2, #0
 8005d92:	2300      	movs	r3, #0
 8005d94:	4620      	mov	r0, r4
 8005d96:	4639      	mov	r1, r7
 8005d98:	f7fa fe06 	bl	80009a8 <__aeabi_dcmpeq>
 8005d9c:	b918      	cbnz	r0, 8005da6 <__cvt+0x86>
 8005d9e:	f1c5 0501 	rsb	r5, r5, #1
 8005da2:	f8ca 5000 	str.w	r5, [sl]
 8005da6:	f8da 3000 	ldr.w	r3, [sl]
 8005daa:	4499      	add	r9, r3
 8005dac:	2200      	movs	r2, #0
 8005dae:	2300      	movs	r3, #0
 8005db0:	4620      	mov	r0, r4
 8005db2:	4639      	mov	r1, r7
 8005db4:	f7fa fdf8 	bl	80009a8 <__aeabi_dcmpeq>
 8005db8:	b108      	cbz	r0, 8005dbe <__cvt+0x9e>
 8005dba:	f8cd 901c 	str.w	r9, [sp, #28]
 8005dbe:	2230      	movs	r2, #48	; 0x30
 8005dc0:	9b07      	ldr	r3, [sp, #28]
 8005dc2:	454b      	cmp	r3, r9
 8005dc4:	d307      	bcc.n	8005dd6 <__cvt+0xb6>
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	9b07      	ldr	r3, [sp, #28]
 8005dca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005dcc:	1b9b      	subs	r3, r3, r6
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	b008      	add	sp, #32
 8005dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd6:	1c59      	adds	r1, r3, #1
 8005dd8:	9107      	str	r1, [sp, #28]
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	e7f0      	b.n	8005dc0 <__cvt+0xa0>

08005dde <__exponent>:
 8005dde:	4603      	mov	r3, r0
 8005de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de2:	2900      	cmp	r1, #0
 8005de4:	f803 2b02 	strb.w	r2, [r3], #2
 8005de8:	bfb6      	itet	lt
 8005dea:	222d      	movlt	r2, #45	; 0x2d
 8005dec:	222b      	movge	r2, #43	; 0x2b
 8005dee:	4249      	neglt	r1, r1
 8005df0:	2909      	cmp	r1, #9
 8005df2:	7042      	strb	r2, [r0, #1]
 8005df4:	dd2b      	ble.n	8005e4e <__exponent+0x70>
 8005df6:	f10d 0407 	add.w	r4, sp, #7
 8005dfa:	46a4      	mov	ip, r4
 8005dfc:	270a      	movs	r7, #10
 8005dfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e02:	460a      	mov	r2, r1
 8005e04:	46a6      	mov	lr, r4
 8005e06:	fb07 1516 	mls	r5, r7, r6, r1
 8005e0a:	2a63      	cmp	r2, #99	; 0x63
 8005e0c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005e10:	4631      	mov	r1, r6
 8005e12:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e1a:	dcf0      	bgt.n	8005dfe <__exponent+0x20>
 8005e1c:	3130      	adds	r1, #48	; 0x30
 8005e1e:	f1ae 0502 	sub.w	r5, lr, #2
 8005e22:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e26:	4629      	mov	r1, r5
 8005e28:	1c44      	adds	r4, r0, #1
 8005e2a:	4561      	cmp	r1, ip
 8005e2c:	d30a      	bcc.n	8005e44 <__exponent+0x66>
 8005e2e:	f10d 0209 	add.w	r2, sp, #9
 8005e32:	eba2 020e 	sub.w	r2, r2, lr
 8005e36:	4565      	cmp	r5, ip
 8005e38:	bf88      	it	hi
 8005e3a:	2200      	movhi	r2, #0
 8005e3c:	4413      	add	r3, r2
 8005e3e:	1a18      	subs	r0, r3, r0
 8005e40:	b003      	add	sp, #12
 8005e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e48:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e4c:	e7ed      	b.n	8005e2a <__exponent+0x4c>
 8005e4e:	2330      	movs	r3, #48	; 0x30
 8005e50:	3130      	adds	r1, #48	; 0x30
 8005e52:	7083      	strb	r3, [r0, #2]
 8005e54:	70c1      	strb	r1, [r0, #3]
 8005e56:	1d03      	adds	r3, r0, #4
 8005e58:	e7f1      	b.n	8005e3e <__exponent+0x60>
	...

08005e5c <_printf_float>:
 8005e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e60:	b091      	sub	sp, #68	; 0x44
 8005e62:	460c      	mov	r4, r1
 8005e64:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005e68:	4616      	mov	r6, r2
 8005e6a:	461f      	mov	r7, r3
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	f001 faf3 	bl	8007458 <_localeconv_r>
 8005e72:	6803      	ldr	r3, [r0, #0]
 8005e74:	4618      	mov	r0, r3
 8005e76:	9309      	str	r3, [sp, #36]	; 0x24
 8005e78:	f7fa f96a 	bl	8000150 <strlen>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	930e      	str	r3, [sp, #56]	; 0x38
 8005e80:	f8d8 3000 	ldr.w	r3, [r8]
 8005e84:	900a      	str	r0, [sp, #40]	; 0x28
 8005e86:	3307      	adds	r3, #7
 8005e88:	f023 0307 	bic.w	r3, r3, #7
 8005e8c:	f103 0208 	add.w	r2, r3, #8
 8005e90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e94:	f8d4 b000 	ldr.w	fp, [r4]
 8005e98:	f8c8 2000 	str.w	r2, [r8]
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ea4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005ea8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005eac:	930b      	str	r3, [sp, #44]	; 0x2c
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	4b9c      	ldr	r3, [pc, #624]	; (8006128 <_printf_float+0x2cc>)
 8005eb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005eb8:	f7fa fda8 	bl	8000a0c <__aeabi_dcmpun>
 8005ebc:	bb70      	cbnz	r0, 8005f1c <_printf_float+0xc0>
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4b98      	ldr	r3, [pc, #608]	; (8006128 <_printf_float+0x2cc>)
 8005ec6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ec8:	f7fa fd82 	bl	80009d0 <__aeabi_dcmple>
 8005ecc:	bb30      	cbnz	r0, 8005f1c <_printf_float+0xc0>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4640      	mov	r0, r8
 8005ed4:	4651      	mov	r1, sl
 8005ed6:	f7fa fd71 	bl	80009bc <__aeabi_dcmplt>
 8005eda:	b110      	cbz	r0, 8005ee2 <_printf_float+0x86>
 8005edc:	232d      	movs	r3, #45	; 0x2d
 8005ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee2:	4b92      	ldr	r3, [pc, #584]	; (800612c <_printf_float+0x2d0>)
 8005ee4:	4892      	ldr	r0, [pc, #584]	; (8006130 <_printf_float+0x2d4>)
 8005ee6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005eea:	bf94      	ite	ls
 8005eec:	4698      	movls	r8, r3
 8005eee:	4680      	movhi	r8, r0
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	f04f 0a00 	mov.w	sl, #0
 8005ef6:	6123      	str	r3, [r4, #16]
 8005ef8:	f02b 0304 	bic.w	r3, fp, #4
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	4633      	mov	r3, r6
 8005f00:	4621      	mov	r1, r4
 8005f02:	4628      	mov	r0, r5
 8005f04:	9700      	str	r7, [sp, #0]
 8005f06:	aa0f      	add	r2, sp, #60	; 0x3c
 8005f08:	f000 f9d4 	bl	80062b4 <_printf_common>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	f040 8090 	bne.w	8006032 <_printf_float+0x1d6>
 8005f12:	f04f 30ff 	mov.w	r0, #4294967295
 8005f16:	b011      	add	sp, #68	; 0x44
 8005f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	4653      	mov	r3, sl
 8005f20:	4640      	mov	r0, r8
 8005f22:	4651      	mov	r1, sl
 8005f24:	f7fa fd72 	bl	8000a0c <__aeabi_dcmpun>
 8005f28:	b148      	cbz	r0, 8005f3e <_printf_float+0xe2>
 8005f2a:	f1ba 0f00 	cmp.w	sl, #0
 8005f2e:	bfb8      	it	lt
 8005f30:	232d      	movlt	r3, #45	; 0x2d
 8005f32:	4880      	ldr	r0, [pc, #512]	; (8006134 <_printf_float+0x2d8>)
 8005f34:	bfb8      	it	lt
 8005f36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f3a:	4b7f      	ldr	r3, [pc, #508]	; (8006138 <_printf_float+0x2dc>)
 8005f3c:	e7d3      	b.n	8005ee6 <_printf_float+0x8a>
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	d142      	bne.n	8005fce <_printf_float+0x172>
 8005f48:	2306      	movs	r3, #6
 8005f4a:	6063      	str	r3, [r4, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	9206      	str	r2, [sp, #24]
 8005f50:	aa0e      	add	r2, sp, #56	; 0x38
 8005f52:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005f56:	aa0d      	add	r2, sp, #52	; 0x34
 8005f58:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005f5c:	9203      	str	r2, [sp, #12]
 8005f5e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005f62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	6863      	ldr	r3, [r4, #4]
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	4628      	mov	r0, r5
 8005f70:	4653      	mov	r3, sl
 8005f72:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f74:	f7ff fed4 	bl	8005d20 <__cvt>
 8005f78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	2947      	cmp	r1, #71	; 0x47
 8005f7e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f80:	d108      	bne.n	8005f94 <_printf_float+0x138>
 8005f82:	1cc8      	adds	r0, r1, #3
 8005f84:	db02      	blt.n	8005f8c <_printf_float+0x130>
 8005f86:	6863      	ldr	r3, [r4, #4]
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	dd40      	ble.n	800600e <_printf_float+0x1b2>
 8005f8c:	f1a9 0902 	sub.w	r9, r9, #2
 8005f90:	fa5f f989 	uxtb.w	r9, r9
 8005f94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f98:	d81f      	bhi.n	8005fda <_printf_float+0x17e>
 8005f9a:	464a      	mov	r2, r9
 8005f9c:	3901      	subs	r1, #1
 8005f9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8005fa4:	f7ff ff1b 	bl	8005dde <__exponent>
 8005fa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005faa:	4682      	mov	sl, r0
 8005fac:	1813      	adds	r3, r2, r0
 8005fae:	2a01      	cmp	r2, #1
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	dc02      	bgt.n	8005fba <_printf_float+0x15e>
 8005fb4:	6822      	ldr	r2, [r4, #0]
 8005fb6:	07d2      	lsls	r2, r2, #31
 8005fb8:	d501      	bpl.n	8005fbe <_printf_float+0x162>
 8005fba:	3301      	adds	r3, #1
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d09b      	beq.n	8005efe <_printf_float+0xa2>
 8005fc6:	232d      	movs	r3, #45	; 0x2d
 8005fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fcc:	e797      	b.n	8005efe <_printf_float+0xa2>
 8005fce:	2947      	cmp	r1, #71	; 0x47
 8005fd0:	d1bc      	bne.n	8005f4c <_printf_float+0xf0>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1ba      	bne.n	8005f4c <_printf_float+0xf0>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e7b7      	b.n	8005f4a <_printf_float+0xee>
 8005fda:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005fde:	d118      	bne.n	8006012 <_printf_float+0x1b6>
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	6863      	ldr	r3, [r4, #4]
 8005fe4:	dd0b      	ble.n	8005ffe <_printf_float+0x1a2>
 8005fe6:	6121      	str	r1, [r4, #16]
 8005fe8:	b913      	cbnz	r3, 8005ff0 <_printf_float+0x194>
 8005fea:	6822      	ldr	r2, [r4, #0]
 8005fec:	07d0      	lsls	r0, r2, #31
 8005fee:	d502      	bpl.n	8005ff6 <_printf_float+0x19a>
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	440b      	add	r3, r1
 8005ff4:	6123      	str	r3, [r4, #16]
 8005ff6:	f04f 0a00 	mov.w	sl, #0
 8005ffa:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ffc:	e7df      	b.n	8005fbe <_printf_float+0x162>
 8005ffe:	b913      	cbnz	r3, 8006006 <_printf_float+0x1aa>
 8006000:	6822      	ldr	r2, [r4, #0]
 8006002:	07d2      	lsls	r2, r2, #31
 8006004:	d501      	bpl.n	800600a <_printf_float+0x1ae>
 8006006:	3302      	adds	r3, #2
 8006008:	e7f4      	b.n	8005ff4 <_printf_float+0x198>
 800600a:	2301      	movs	r3, #1
 800600c:	e7f2      	b.n	8005ff4 <_printf_float+0x198>
 800600e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006014:	4299      	cmp	r1, r3
 8006016:	db05      	blt.n	8006024 <_printf_float+0x1c8>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	6121      	str	r1, [r4, #16]
 800601c:	07d8      	lsls	r0, r3, #31
 800601e:	d5ea      	bpl.n	8005ff6 <_printf_float+0x19a>
 8006020:	1c4b      	adds	r3, r1, #1
 8006022:	e7e7      	b.n	8005ff4 <_printf_float+0x198>
 8006024:	2900      	cmp	r1, #0
 8006026:	bfcc      	ite	gt
 8006028:	2201      	movgt	r2, #1
 800602a:	f1c1 0202 	rsble	r2, r1, #2
 800602e:	4413      	add	r3, r2
 8006030:	e7e0      	b.n	8005ff4 <_printf_float+0x198>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	055a      	lsls	r2, r3, #21
 8006036:	d407      	bmi.n	8006048 <_printf_float+0x1ec>
 8006038:	6923      	ldr	r3, [r4, #16]
 800603a:	4642      	mov	r2, r8
 800603c:	4631      	mov	r1, r6
 800603e:	4628      	mov	r0, r5
 8006040:	47b8      	blx	r7
 8006042:	3001      	adds	r0, #1
 8006044:	d12b      	bne.n	800609e <_printf_float+0x242>
 8006046:	e764      	b.n	8005f12 <_printf_float+0xb6>
 8006048:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800604c:	f240 80dd 	bls.w	800620a <_printf_float+0x3ae>
 8006050:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006054:	2200      	movs	r2, #0
 8006056:	2300      	movs	r3, #0
 8006058:	f7fa fca6 	bl	80009a8 <__aeabi_dcmpeq>
 800605c:	2800      	cmp	r0, #0
 800605e:	d033      	beq.n	80060c8 <_printf_float+0x26c>
 8006060:	2301      	movs	r3, #1
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	4a35      	ldr	r2, [pc, #212]	; (800613c <_printf_float+0x2e0>)
 8006068:	47b8      	blx	r7
 800606a:	3001      	adds	r0, #1
 800606c:	f43f af51 	beq.w	8005f12 <_printf_float+0xb6>
 8006070:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006074:	429a      	cmp	r2, r3
 8006076:	db02      	blt.n	800607e <_printf_float+0x222>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	07d8      	lsls	r0, r3, #31
 800607c:	d50f      	bpl.n	800609e <_printf_float+0x242>
 800607e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006082:	4631      	mov	r1, r6
 8006084:	4628      	mov	r0, r5
 8006086:	47b8      	blx	r7
 8006088:	3001      	adds	r0, #1
 800608a:	f43f af42 	beq.w	8005f12 <_printf_float+0xb6>
 800608e:	f04f 0800 	mov.w	r8, #0
 8006092:	f104 091a 	add.w	r9, r4, #26
 8006096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006098:	3b01      	subs	r3, #1
 800609a:	4543      	cmp	r3, r8
 800609c:	dc09      	bgt.n	80060b2 <_printf_float+0x256>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	079b      	lsls	r3, r3, #30
 80060a2:	f100 8102 	bmi.w	80062aa <_printf_float+0x44e>
 80060a6:	68e0      	ldr	r0, [r4, #12]
 80060a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060aa:	4298      	cmp	r0, r3
 80060ac:	bfb8      	it	lt
 80060ae:	4618      	movlt	r0, r3
 80060b0:	e731      	b.n	8005f16 <_printf_float+0xba>
 80060b2:	2301      	movs	r3, #1
 80060b4:	464a      	mov	r2, r9
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f af28 	beq.w	8005f12 <_printf_float+0xb6>
 80060c2:	f108 0801 	add.w	r8, r8, #1
 80060c6:	e7e6      	b.n	8006096 <_printf_float+0x23a>
 80060c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	dc38      	bgt.n	8006140 <_printf_float+0x2e4>
 80060ce:	2301      	movs	r3, #1
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	4a19      	ldr	r2, [pc, #100]	; (800613c <_printf_float+0x2e0>)
 80060d6:	47b8      	blx	r7
 80060d8:	3001      	adds	r0, #1
 80060da:	f43f af1a 	beq.w	8005f12 <_printf_float+0xb6>
 80060de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d102      	bne.n	80060ec <_printf_float+0x290>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	07d9      	lsls	r1, r3, #31
 80060ea:	d5d8      	bpl.n	800609e <_printf_float+0x242>
 80060ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f af0b 	beq.w	8005f12 <_printf_float+0xb6>
 80060fc:	f04f 0900 	mov.w	r9, #0
 8006100:	f104 0a1a 	add.w	sl, r4, #26
 8006104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006106:	425b      	negs	r3, r3
 8006108:	454b      	cmp	r3, r9
 800610a:	dc01      	bgt.n	8006110 <_printf_float+0x2b4>
 800610c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800610e:	e794      	b.n	800603a <_printf_float+0x1de>
 8006110:	2301      	movs	r3, #1
 8006112:	4652      	mov	r2, sl
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	f43f aef9 	beq.w	8005f12 <_printf_float+0xb6>
 8006120:	f109 0901 	add.w	r9, r9, #1
 8006124:	e7ee      	b.n	8006104 <_printf_float+0x2a8>
 8006126:	bf00      	nop
 8006128:	7fefffff 	.word	0x7fefffff
 800612c:	08008d30 	.word	0x08008d30
 8006130:	08008d34 	.word	0x08008d34
 8006134:	08008d3c 	.word	0x08008d3c
 8006138:	08008d38 	.word	0x08008d38
 800613c:	08008d40 	.word	0x08008d40
 8006140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006144:	429a      	cmp	r2, r3
 8006146:	bfa8      	it	ge
 8006148:	461a      	movge	r2, r3
 800614a:	2a00      	cmp	r2, #0
 800614c:	4691      	mov	r9, r2
 800614e:	dc37      	bgt.n	80061c0 <_printf_float+0x364>
 8006150:	f04f 0b00 	mov.w	fp, #0
 8006154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006158:	f104 021a 	add.w	r2, r4, #26
 800615c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006160:	ebaa 0309 	sub.w	r3, sl, r9
 8006164:	455b      	cmp	r3, fp
 8006166:	dc33      	bgt.n	80061d0 <_printf_float+0x374>
 8006168:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800616c:	429a      	cmp	r2, r3
 800616e:	db3b      	blt.n	80061e8 <_printf_float+0x38c>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	07da      	lsls	r2, r3, #31
 8006174:	d438      	bmi.n	80061e8 <_printf_float+0x38c>
 8006176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006178:	990d      	ldr	r1, [sp, #52]	; 0x34
 800617a:	eba3 020a 	sub.w	r2, r3, sl
 800617e:	eba3 0901 	sub.w	r9, r3, r1
 8006182:	4591      	cmp	r9, r2
 8006184:	bfa8      	it	ge
 8006186:	4691      	movge	r9, r2
 8006188:	f1b9 0f00 	cmp.w	r9, #0
 800618c:	dc34      	bgt.n	80061f8 <_printf_float+0x39c>
 800618e:	f04f 0800 	mov.w	r8, #0
 8006192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006196:	f104 0a1a 	add.w	sl, r4, #26
 800619a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800619e:	1a9b      	subs	r3, r3, r2
 80061a0:	eba3 0309 	sub.w	r3, r3, r9
 80061a4:	4543      	cmp	r3, r8
 80061a6:	f77f af7a 	ble.w	800609e <_printf_float+0x242>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4652      	mov	r2, sl
 80061ae:	4631      	mov	r1, r6
 80061b0:	4628      	mov	r0, r5
 80061b2:	47b8      	blx	r7
 80061b4:	3001      	adds	r0, #1
 80061b6:	f43f aeac 	beq.w	8005f12 <_printf_float+0xb6>
 80061ba:	f108 0801 	add.w	r8, r8, #1
 80061be:	e7ec      	b.n	800619a <_printf_float+0x33e>
 80061c0:	4613      	mov	r3, r2
 80061c2:	4631      	mov	r1, r6
 80061c4:	4642      	mov	r2, r8
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	3001      	adds	r0, #1
 80061cc:	d1c0      	bne.n	8006150 <_printf_float+0x2f4>
 80061ce:	e6a0      	b.n	8005f12 <_printf_float+0xb6>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4631      	mov	r1, r6
 80061d4:	4628      	mov	r0, r5
 80061d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f ae99 	beq.w	8005f12 <_printf_float+0xb6>
 80061e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061e2:	f10b 0b01 	add.w	fp, fp, #1
 80061e6:	e7b9      	b.n	800615c <_printf_float+0x300>
 80061e8:	4631      	mov	r1, r6
 80061ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	d1bf      	bne.n	8006176 <_printf_float+0x31a>
 80061f6:	e68c      	b.n	8005f12 <_printf_float+0xb6>
 80061f8:	464b      	mov	r3, r9
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	eb08 020a 	add.w	r2, r8, sl
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	d1c2      	bne.n	800618e <_printf_float+0x332>
 8006208:	e683      	b.n	8005f12 <_printf_float+0xb6>
 800620a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800620c:	2a01      	cmp	r2, #1
 800620e:	dc01      	bgt.n	8006214 <_printf_float+0x3b8>
 8006210:	07db      	lsls	r3, r3, #31
 8006212:	d537      	bpl.n	8006284 <_printf_float+0x428>
 8006214:	2301      	movs	r3, #1
 8006216:	4642      	mov	r2, r8
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	f43f ae77 	beq.w	8005f12 <_printf_float+0xb6>
 8006224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006228:	4631      	mov	r1, r6
 800622a:	4628      	mov	r0, r5
 800622c:	47b8      	blx	r7
 800622e:	3001      	adds	r0, #1
 8006230:	f43f ae6f 	beq.w	8005f12 <_printf_float+0xb6>
 8006234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006238:	2200      	movs	r2, #0
 800623a:	2300      	movs	r3, #0
 800623c:	f7fa fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8006240:	b9d8      	cbnz	r0, 800627a <_printf_float+0x41e>
 8006242:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006244:	f108 0201 	add.w	r2, r8, #1
 8006248:	3b01      	subs	r3, #1
 800624a:	4631      	mov	r1, r6
 800624c:	4628      	mov	r0, r5
 800624e:	47b8      	blx	r7
 8006250:	3001      	adds	r0, #1
 8006252:	d10e      	bne.n	8006272 <_printf_float+0x416>
 8006254:	e65d      	b.n	8005f12 <_printf_float+0xb6>
 8006256:	2301      	movs	r3, #1
 8006258:	464a      	mov	r2, r9
 800625a:	4631      	mov	r1, r6
 800625c:	4628      	mov	r0, r5
 800625e:	47b8      	blx	r7
 8006260:	3001      	adds	r0, #1
 8006262:	f43f ae56 	beq.w	8005f12 <_printf_float+0xb6>
 8006266:	f108 0801 	add.w	r8, r8, #1
 800626a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800626c:	3b01      	subs	r3, #1
 800626e:	4543      	cmp	r3, r8
 8006270:	dcf1      	bgt.n	8006256 <_printf_float+0x3fa>
 8006272:	4653      	mov	r3, sl
 8006274:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006278:	e6e0      	b.n	800603c <_printf_float+0x1e0>
 800627a:	f04f 0800 	mov.w	r8, #0
 800627e:	f104 091a 	add.w	r9, r4, #26
 8006282:	e7f2      	b.n	800626a <_printf_float+0x40e>
 8006284:	2301      	movs	r3, #1
 8006286:	4642      	mov	r2, r8
 8006288:	e7df      	b.n	800624a <_printf_float+0x3ee>
 800628a:	2301      	movs	r3, #1
 800628c:	464a      	mov	r2, r9
 800628e:	4631      	mov	r1, r6
 8006290:	4628      	mov	r0, r5
 8006292:	47b8      	blx	r7
 8006294:	3001      	adds	r0, #1
 8006296:	f43f ae3c 	beq.w	8005f12 <_printf_float+0xb6>
 800629a:	f108 0801 	add.w	r8, r8, #1
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80062a2:	1a5b      	subs	r3, r3, r1
 80062a4:	4543      	cmp	r3, r8
 80062a6:	dcf0      	bgt.n	800628a <_printf_float+0x42e>
 80062a8:	e6fd      	b.n	80060a6 <_printf_float+0x24a>
 80062aa:	f04f 0800 	mov.w	r8, #0
 80062ae:	f104 0919 	add.w	r9, r4, #25
 80062b2:	e7f4      	b.n	800629e <_printf_float+0x442>

080062b4 <_printf_common>:
 80062b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b8:	4616      	mov	r6, r2
 80062ba:	4699      	mov	r9, r3
 80062bc:	688a      	ldr	r2, [r1, #8]
 80062be:	690b      	ldr	r3, [r1, #16]
 80062c0:	4607      	mov	r7, r0
 80062c2:	4293      	cmp	r3, r2
 80062c4:	bfb8      	it	lt
 80062c6:	4613      	movlt	r3, r2
 80062c8:	6033      	str	r3, [r6, #0]
 80062ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062ce:	460c      	mov	r4, r1
 80062d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062d4:	b10a      	cbz	r2, 80062da <_printf_common+0x26>
 80062d6:	3301      	adds	r3, #1
 80062d8:	6033      	str	r3, [r6, #0]
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	0699      	lsls	r1, r3, #26
 80062de:	bf42      	ittt	mi
 80062e0:	6833      	ldrmi	r3, [r6, #0]
 80062e2:	3302      	addmi	r3, #2
 80062e4:	6033      	strmi	r3, [r6, #0]
 80062e6:	6825      	ldr	r5, [r4, #0]
 80062e8:	f015 0506 	ands.w	r5, r5, #6
 80062ec:	d106      	bne.n	80062fc <_printf_common+0x48>
 80062ee:	f104 0a19 	add.w	sl, r4, #25
 80062f2:	68e3      	ldr	r3, [r4, #12]
 80062f4:	6832      	ldr	r2, [r6, #0]
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	42ab      	cmp	r3, r5
 80062fa:	dc28      	bgt.n	800634e <_printf_common+0x9a>
 80062fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006300:	1e13      	subs	r3, r2, #0
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	bf18      	it	ne
 8006306:	2301      	movne	r3, #1
 8006308:	0692      	lsls	r2, r2, #26
 800630a:	d42d      	bmi.n	8006368 <_printf_common+0xb4>
 800630c:	4649      	mov	r1, r9
 800630e:	4638      	mov	r0, r7
 8006310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006314:	47c0      	blx	r8
 8006316:	3001      	adds	r0, #1
 8006318:	d020      	beq.n	800635c <_printf_common+0xa8>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	68e5      	ldr	r5, [r4, #12]
 800631e:	f003 0306 	and.w	r3, r3, #6
 8006322:	2b04      	cmp	r3, #4
 8006324:	bf18      	it	ne
 8006326:	2500      	movne	r5, #0
 8006328:	6832      	ldr	r2, [r6, #0]
 800632a:	f04f 0600 	mov.w	r6, #0
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	bf08      	it	eq
 8006332:	1aad      	subeq	r5, r5, r2
 8006334:	6922      	ldr	r2, [r4, #16]
 8006336:	bf08      	it	eq
 8006338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800633c:	4293      	cmp	r3, r2
 800633e:	bfc4      	itt	gt
 8006340:	1a9b      	subgt	r3, r3, r2
 8006342:	18ed      	addgt	r5, r5, r3
 8006344:	341a      	adds	r4, #26
 8006346:	42b5      	cmp	r5, r6
 8006348:	d11a      	bne.n	8006380 <_printf_common+0xcc>
 800634a:	2000      	movs	r0, #0
 800634c:	e008      	b.n	8006360 <_printf_common+0xac>
 800634e:	2301      	movs	r3, #1
 8006350:	4652      	mov	r2, sl
 8006352:	4649      	mov	r1, r9
 8006354:	4638      	mov	r0, r7
 8006356:	47c0      	blx	r8
 8006358:	3001      	adds	r0, #1
 800635a:	d103      	bne.n	8006364 <_printf_common+0xb0>
 800635c:	f04f 30ff 	mov.w	r0, #4294967295
 8006360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006364:	3501      	adds	r5, #1
 8006366:	e7c4      	b.n	80062f2 <_printf_common+0x3e>
 8006368:	2030      	movs	r0, #48	; 0x30
 800636a:	18e1      	adds	r1, r4, r3
 800636c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006376:	4422      	add	r2, r4
 8006378:	3302      	adds	r3, #2
 800637a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800637e:	e7c5      	b.n	800630c <_printf_common+0x58>
 8006380:	2301      	movs	r3, #1
 8006382:	4622      	mov	r2, r4
 8006384:	4649      	mov	r1, r9
 8006386:	4638      	mov	r0, r7
 8006388:	47c0      	blx	r8
 800638a:	3001      	adds	r0, #1
 800638c:	d0e6      	beq.n	800635c <_printf_common+0xa8>
 800638e:	3601      	adds	r6, #1
 8006390:	e7d9      	b.n	8006346 <_printf_common+0x92>
	...

08006394 <_printf_i>:
 8006394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	7e0f      	ldrb	r7, [r1, #24]
 800639a:	4691      	mov	r9, r2
 800639c:	2f78      	cmp	r7, #120	; 0x78
 800639e:	4680      	mov	r8, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	469a      	mov	sl, r3
 80063a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063aa:	d807      	bhi.n	80063bc <_printf_i+0x28>
 80063ac:	2f62      	cmp	r7, #98	; 0x62
 80063ae:	d80a      	bhi.n	80063c6 <_printf_i+0x32>
 80063b0:	2f00      	cmp	r7, #0
 80063b2:	f000 80d9 	beq.w	8006568 <_printf_i+0x1d4>
 80063b6:	2f58      	cmp	r7, #88	; 0x58
 80063b8:	f000 80a4 	beq.w	8006504 <_printf_i+0x170>
 80063bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063c4:	e03a      	b.n	800643c <_printf_i+0xa8>
 80063c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ca:	2b15      	cmp	r3, #21
 80063cc:	d8f6      	bhi.n	80063bc <_printf_i+0x28>
 80063ce:	a101      	add	r1, pc, #4	; (adr r1, 80063d4 <_printf_i+0x40>)
 80063d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063d4:	0800642d 	.word	0x0800642d
 80063d8:	08006441 	.word	0x08006441
 80063dc:	080063bd 	.word	0x080063bd
 80063e0:	080063bd 	.word	0x080063bd
 80063e4:	080063bd 	.word	0x080063bd
 80063e8:	080063bd 	.word	0x080063bd
 80063ec:	08006441 	.word	0x08006441
 80063f0:	080063bd 	.word	0x080063bd
 80063f4:	080063bd 	.word	0x080063bd
 80063f8:	080063bd 	.word	0x080063bd
 80063fc:	080063bd 	.word	0x080063bd
 8006400:	0800654f 	.word	0x0800654f
 8006404:	08006471 	.word	0x08006471
 8006408:	08006531 	.word	0x08006531
 800640c:	080063bd 	.word	0x080063bd
 8006410:	080063bd 	.word	0x080063bd
 8006414:	08006571 	.word	0x08006571
 8006418:	080063bd 	.word	0x080063bd
 800641c:	08006471 	.word	0x08006471
 8006420:	080063bd 	.word	0x080063bd
 8006424:	080063bd 	.word	0x080063bd
 8006428:	08006539 	.word	0x08006539
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	1d1a      	adds	r2, r3, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	602a      	str	r2, [r5, #0]
 8006434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800643c:	2301      	movs	r3, #1
 800643e:	e0a4      	b.n	800658a <_printf_i+0x1f6>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	6829      	ldr	r1, [r5, #0]
 8006444:	0606      	lsls	r6, r0, #24
 8006446:	f101 0304 	add.w	r3, r1, #4
 800644a:	d50a      	bpl.n	8006462 <_printf_i+0xce>
 800644c:	680e      	ldr	r6, [r1, #0]
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	2e00      	cmp	r6, #0
 8006452:	da03      	bge.n	800645c <_printf_i+0xc8>
 8006454:	232d      	movs	r3, #45	; 0x2d
 8006456:	4276      	negs	r6, r6
 8006458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800645c:	230a      	movs	r3, #10
 800645e:	485e      	ldr	r0, [pc, #376]	; (80065d8 <_printf_i+0x244>)
 8006460:	e019      	b.n	8006496 <_printf_i+0x102>
 8006462:	680e      	ldr	r6, [r1, #0]
 8006464:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006468:	602b      	str	r3, [r5, #0]
 800646a:	bf18      	it	ne
 800646c:	b236      	sxthne	r6, r6
 800646e:	e7ef      	b.n	8006450 <_printf_i+0xbc>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	1d19      	adds	r1, r3, #4
 8006476:	6029      	str	r1, [r5, #0]
 8006478:	0601      	lsls	r1, r0, #24
 800647a:	d501      	bpl.n	8006480 <_printf_i+0xec>
 800647c:	681e      	ldr	r6, [r3, #0]
 800647e:	e002      	b.n	8006486 <_printf_i+0xf2>
 8006480:	0646      	lsls	r6, r0, #25
 8006482:	d5fb      	bpl.n	800647c <_printf_i+0xe8>
 8006484:	881e      	ldrh	r6, [r3, #0]
 8006486:	2f6f      	cmp	r7, #111	; 0x6f
 8006488:	bf0c      	ite	eq
 800648a:	2308      	moveq	r3, #8
 800648c:	230a      	movne	r3, #10
 800648e:	4852      	ldr	r0, [pc, #328]	; (80065d8 <_printf_i+0x244>)
 8006490:	2100      	movs	r1, #0
 8006492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006496:	6865      	ldr	r5, [r4, #4]
 8006498:	2d00      	cmp	r5, #0
 800649a:	bfa8      	it	ge
 800649c:	6821      	ldrge	r1, [r4, #0]
 800649e:	60a5      	str	r5, [r4, #8]
 80064a0:	bfa4      	itt	ge
 80064a2:	f021 0104 	bicge.w	r1, r1, #4
 80064a6:	6021      	strge	r1, [r4, #0]
 80064a8:	b90e      	cbnz	r6, 80064ae <_printf_i+0x11a>
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	d04d      	beq.n	800654a <_printf_i+0x1b6>
 80064ae:	4615      	mov	r5, r2
 80064b0:	fbb6 f1f3 	udiv	r1, r6, r3
 80064b4:	fb03 6711 	mls	r7, r3, r1, r6
 80064b8:	5dc7      	ldrb	r7, [r0, r7]
 80064ba:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064be:	4637      	mov	r7, r6
 80064c0:	42bb      	cmp	r3, r7
 80064c2:	460e      	mov	r6, r1
 80064c4:	d9f4      	bls.n	80064b0 <_printf_i+0x11c>
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d10b      	bne.n	80064e2 <_printf_i+0x14e>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	07de      	lsls	r6, r3, #31
 80064ce:	d508      	bpl.n	80064e2 <_printf_i+0x14e>
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	6861      	ldr	r1, [r4, #4]
 80064d4:	4299      	cmp	r1, r3
 80064d6:	bfde      	ittt	le
 80064d8:	2330      	movle	r3, #48	; 0x30
 80064da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064e2:	1b52      	subs	r2, r2, r5
 80064e4:	6122      	str	r2, [r4, #16]
 80064e6:	464b      	mov	r3, r9
 80064e8:	4621      	mov	r1, r4
 80064ea:	4640      	mov	r0, r8
 80064ec:	f8cd a000 	str.w	sl, [sp]
 80064f0:	aa03      	add	r2, sp, #12
 80064f2:	f7ff fedf 	bl	80062b4 <_printf_common>
 80064f6:	3001      	adds	r0, #1
 80064f8:	d14c      	bne.n	8006594 <_printf_i+0x200>
 80064fa:	f04f 30ff 	mov.w	r0, #4294967295
 80064fe:	b004      	add	sp, #16
 8006500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006504:	4834      	ldr	r0, [pc, #208]	; (80065d8 <_printf_i+0x244>)
 8006506:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800650a:	6829      	ldr	r1, [r5, #0]
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006512:	6029      	str	r1, [r5, #0]
 8006514:	061d      	lsls	r5, r3, #24
 8006516:	d514      	bpl.n	8006542 <_printf_i+0x1ae>
 8006518:	07df      	lsls	r7, r3, #31
 800651a:	bf44      	itt	mi
 800651c:	f043 0320 	orrmi.w	r3, r3, #32
 8006520:	6023      	strmi	r3, [r4, #0]
 8006522:	b91e      	cbnz	r6, 800652c <_printf_i+0x198>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	f023 0320 	bic.w	r3, r3, #32
 800652a:	6023      	str	r3, [r4, #0]
 800652c:	2310      	movs	r3, #16
 800652e:	e7af      	b.n	8006490 <_printf_i+0xfc>
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	f043 0320 	orr.w	r3, r3, #32
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	2378      	movs	r3, #120	; 0x78
 800653a:	4828      	ldr	r0, [pc, #160]	; (80065dc <_printf_i+0x248>)
 800653c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006540:	e7e3      	b.n	800650a <_printf_i+0x176>
 8006542:	0659      	lsls	r1, r3, #25
 8006544:	bf48      	it	mi
 8006546:	b2b6      	uxthmi	r6, r6
 8006548:	e7e6      	b.n	8006518 <_printf_i+0x184>
 800654a:	4615      	mov	r5, r2
 800654c:	e7bb      	b.n	80064c6 <_printf_i+0x132>
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	6826      	ldr	r6, [r4, #0]
 8006552:	1d18      	adds	r0, r3, #4
 8006554:	6961      	ldr	r1, [r4, #20]
 8006556:	6028      	str	r0, [r5, #0]
 8006558:	0635      	lsls	r5, r6, #24
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	d501      	bpl.n	8006562 <_printf_i+0x1ce>
 800655e:	6019      	str	r1, [r3, #0]
 8006560:	e002      	b.n	8006568 <_printf_i+0x1d4>
 8006562:	0670      	lsls	r0, r6, #25
 8006564:	d5fb      	bpl.n	800655e <_printf_i+0x1ca>
 8006566:	8019      	strh	r1, [r3, #0]
 8006568:	2300      	movs	r3, #0
 800656a:	4615      	mov	r5, r2
 800656c:	6123      	str	r3, [r4, #16]
 800656e:	e7ba      	b.n	80064e6 <_printf_i+0x152>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	2100      	movs	r1, #0
 8006574:	1d1a      	adds	r2, r3, #4
 8006576:	602a      	str	r2, [r5, #0]
 8006578:	681d      	ldr	r5, [r3, #0]
 800657a:	6862      	ldr	r2, [r4, #4]
 800657c:	4628      	mov	r0, r5
 800657e:	f000 ff77 	bl	8007470 <memchr>
 8006582:	b108      	cbz	r0, 8006588 <_printf_i+0x1f4>
 8006584:	1b40      	subs	r0, r0, r5
 8006586:	6060      	str	r0, [r4, #4]
 8006588:	6863      	ldr	r3, [r4, #4]
 800658a:	6123      	str	r3, [r4, #16]
 800658c:	2300      	movs	r3, #0
 800658e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006592:	e7a8      	b.n	80064e6 <_printf_i+0x152>
 8006594:	462a      	mov	r2, r5
 8006596:	4649      	mov	r1, r9
 8006598:	4640      	mov	r0, r8
 800659a:	6923      	ldr	r3, [r4, #16]
 800659c:	47d0      	blx	sl
 800659e:	3001      	adds	r0, #1
 80065a0:	d0ab      	beq.n	80064fa <_printf_i+0x166>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	079b      	lsls	r3, r3, #30
 80065a6:	d413      	bmi.n	80065d0 <_printf_i+0x23c>
 80065a8:	68e0      	ldr	r0, [r4, #12]
 80065aa:	9b03      	ldr	r3, [sp, #12]
 80065ac:	4298      	cmp	r0, r3
 80065ae:	bfb8      	it	lt
 80065b0:	4618      	movlt	r0, r3
 80065b2:	e7a4      	b.n	80064fe <_printf_i+0x16a>
 80065b4:	2301      	movs	r3, #1
 80065b6:	4632      	mov	r2, r6
 80065b8:	4649      	mov	r1, r9
 80065ba:	4640      	mov	r0, r8
 80065bc:	47d0      	blx	sl
 80065be:	3001      	adds	r0, #1
 80065c0:	d09b      	beq.n	80064fa <_printf_i+0x166>
 80065c2:	3501      	adds	r5, #1
 80065c4:	68e3      	ldr	r3, [r4, #12]
 80065c6:	9903      	ldr	r1, [sp, #12]
 80065c8:	1a5b      	subs	r3, r3, r1
 80065ca:	42ab      	cmp	r3, r5
 80065cc:	dcf2      	bgt.n	80065b4 <_printf_i+0x220>
 80065ce:	e7eb      	b.n	80065a8 <_printf_i+0x214>
 80065d0:	2500      	movs	r5, #0
 80065d2:	f104 0619 	add.w	r6, r4, #25
 80065d6:	e7f5      	b.n	80065c4 <_printf_i+0x230>
 80065d8:	08008d42 	.word	0x08008d42
 80065dc:	08008d53 	.word	0x08008d53

080065e0 <siprintf>:
 80065e0:	b40e      	push	{r1, r2, r3}
 80065e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065e6:	b500      	push	{lr}
 80065e8:	b09c      	sub	sp, #112	; 0x70
 80065ea:	ab1d      	add	r3, sp, #116	; 0x74
 80065ec:	9002      	str	r0, [sp, #8]
 80065ee:	9006      	str	r0, [sp, #24]
 80065f0:	9107      	str	r1, [sp, #28]
 80065f2:	9104      	str	r1, [sp, #16]
 80065f4:	4808      	ldr	r0, [pc, #32]	; (8006618 <siprintf+0x38>)
 80065f6:	4909      	ldr	r1, [pc, #36]	; (800661c <siprintf+0x3c>)
 80065f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fc:	9105      	str	r1, [sp, #20]
 80065fe:	6800      	ldr	r0, [r0, #0]
 8006600:	a902      	add	r1, sp, #8
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	f001 fc10 	bl	8007e28 <_svfiprintf_r>
 8006608:	2200      	movs	r2, #0
 800660a:	9b02      	ldr	r3, [sp, #8]
 800660c:	701a      	strb	r2, [r3, #0]
 800660e:	b01c      	add	sp, #112	; 0x70
 8006610:	f85d eb04 	ldr.w	lr, [sp], #4
 8006614:	b003      	add	sp, #12
 8006616:	4770      	bx	lr
 8006618:	20000060 	.word	0x20000060
 800661c:	ffff0208 	.word	0xffff0208

08006620 <strstr>:
 8006620:	780a      	ldrb	r2, [r1, #0]
 8006622:	b570      	push	{r4, r5, r6, lr}
 8006624:	b96a      	cbnz	r2, 8006642 <strstr+0x22>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	429a      	cmp	r2, r3
 800662a:	d109      	bne.n	8006640 <strstr+0x20>
 800662c:	460c      	mov	r4, r1
 800662e:	4605      	mov	r5, r0
 8006630:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f6      	beq.n	8006626 <strstr+0x6>
 8006638:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800663c:	429e      	cmp	r6, r3
 800663e:	d0f7      	beq.n	8006630 <strstr+0x10>
 8006640:	3001      	adds	r0, #1
 8006642:	7803      	ldrb	r3, [r0, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1ef      	bne.n	8006628 <strstr+0x8>
 8006648:	4618      	mov	r0, r3
 800664a:	e7ec      	b.n	8006626 <strstr+0x6>

0800664c <strtok>:
 800664c:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <strtok+0x5c>)
 800664e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006652:	681f      	ldr	r7, [r3, #0]
 8006654:	4605      	mov	r5, r0
 8006656:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006658:	460e      	mov	r6, r1
 800665a:	b9ec      	cbnz	r4, 8006698 <strtok+0x4c>
 800665c:	2050      	movs	r0, #80	; 0x50
 800665e:	f000 feff 	bl	8007460 <malloc>
 8006662:	4602      	mov	r2, r0
 8006664:	65b8      	str	r0, [r7, #88]	; 0x58
 8006666:	b920      	cbnz	r0, 8006672 <strtok+0x26>
 8006668:	2157      	movs	r1, #87	; 0x57
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <strtok+0x60>)
 800666c:	4810      	ldr	r0, [pc, #64]	; (80066b0 <strtok+0x64>)
 800666e:	f000 f849 	bl	8006704 <__assert_func>
 8006672:	e9c0 4400 	strd	r4, r4, [r0]
 8006676:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800667a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800667e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006682:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006686:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800668a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800668e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006692:	6184      	str	r4, [r0, #24]
 8006694:	7704      	strb	r4, [r0, #28]
 8006696:	6244      	str	r4, [r0, #36]	; 0x24
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800669e:	2301      	movs	r3, #1
 80066a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	f000 b806 	b.w	80066b4 <__strtok_r>
 80066a8:	20000060 	.word	0x20000060
 80066ac:	08008d64 	.word	0x08008d64
 80066b0:	08008d7b 	.word	0x08008d7b

080066b4 <__strtok_r>:
 80066b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066b6:	b908      	cbnz	r0, 80066bc <__strtok_r+0x8>
 80066b8:	6810      	ldr	r0, [r2, #0]
 80066ba:	b188      	cbz	r0, 80066e0 <__strtok_r+0x2c>
 80066bc:	4604      	mov	r4, r0
 80066be:	460f      	mov	r7, r1
 80066c0:	4620      	mov	r0, r4
 80066c2:	f814 5b01 	ldrb.w	r5, [r4], #1
 80066c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80066ca:	b91e      	cbnz	r6, 80066d4 <__strtok_r+0x20>
 80066cc:	b965      	cbnz	r5, 80066e8 <__strtok_r+0x34>
 80066ce:	4628      	mov	r0, r5
 80066d0:	6015      	str	r5, [r2, #0]
 80066d2:	e005      	b.n	80066e0 <__strtok_r+0x2c>
 80066d4:	42b5      	cmp	r5, r6
 80066d6:	d1f6      	bne.n	80066c6 <__strtok_r+0x12>
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f0      	bne.n	80066be <__strtok_r+0xa>
 80066dc:	6014      	str	r4, [r2, #0]
 80066de:	7003      	strb	r3, [r0, #0]
 80066e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066e2:	461c      	mov	r4, r3
 80066e4:	e00c      	b.n	8006700 <__strtok_r+0x4c>
 80066e6:	b915      	cbnz	r5, 80066ee <__strtok_r+0x3a>
 80066e8:	460e      	mov	r6, r1
 80066ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80066ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 80066f2:	42ab      	cmp	r3, r5
 80066f4:	d1f7      	bne.n	80066e6 <__strtok_r+0x32>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0f3      	beq.n	80066e2 <__strtok_r+0x2e>
 80066fa:	2300      	movs	r3, #0
 80066fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006700:	6014      	str	r4, [r2, #0]
 8006702:	e7ed      	b.n	80066e0 <__strtok_r+0x2c>

08006704 <__assert_func>:
 8006704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006706:	4614      	mov	r4, r2
 8006708:	461a      	mov	r2, r3
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <__assert_func+0x2c>)
 800670c:	4605      	mov	r5, r0
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68d8      	ldr	r0, [r3, #12]
 8006712:	b14c      	cbz	r4, 8006728 <__assert_func+0x24>
 8006714:	4b07      	ldr	r3, [pc, #28]	; (8006734 <__assert_func+0x30>)
 8006716:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800671a:	9100      	str	r1, [sp, #0]
 800671c:	462b      	mov	r3, r5
 800671e:	4906      	ldr	r1, [pc, #24]	; (8006738 <__assert_func+0x34>)
 8006720:	f000 fe88 	bl	8007434 <fiprintf>
 8006724:	f001 fea8 	bl	8008478 <abort>
 8006728:	4b04      	ldr	r3, [pc, #16]	; (800673c <__assert_func+0x38>)
 800672a:	461c      	mov	r4, r3
 800672c:	e7f3      	b.n	8006716 <__assert_func+0x12>
 800672e:	bf00      	nop
 8006730:	20000060 	.word	0x20000060
 8006734:	08008dd8 	.word	0x08008dd8
 8006738:	08008de5 	.word	0x08008de5
 800673c:	08008e13 	.word	0x08008e13

08006740 <quorem>:
 8006740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	6903      	ldr	r3, [r0, #16]
 8006746:	690c      	ldr	r4, [r1, #16]
 8006748:	4607      	mov	r7, r0
 800674a:	42a3      	cmp	r3, r4
 800674c:	f2c0 8082 	blt.w	8006854 <quorem+0x114>
 8006750:	3c01      	subs	r4, #1
 8006752:	f100 0514 	add.w	r5, r0, #20
 8006756:	f101 0814 	add.w	r8, r1, #20
 800675a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006768:	3301      	adds	r3, #1
 800676a:	429a      	cmp	r2, r3
 800676c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006770:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006774:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006778:	d331      	bcc.n	80067de <quorem+0x9e>
 800677a:	f04f 0e00 	mov.w	lr, #0
 800677e:	4640      	mov	r0, r8
 8006780:	46ac      	mov	ip, r5
 8006782:	46f2      	mov	sl, lr
 8006784:	f850 2b04 	ldr.w	r2, [r0], #4
 8006788:	b293      	uxth	r3, r2
 800678a:	fb06 e303 	mla	r3, r6, r3, lr
 800678e:	0c12      	lsrs	r2, r2, #16
 8006790:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006794:	b29b      	uxth	r3, r3
 8006796:	fb06 e202 	mla	r2, r6, r2, lr
 800679a:	ebaa 0303 	sub.w	r3, sl, r3
 800679e:	f8dc a000 	ldr.w	sl, [ip]
 80067a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80067a6:	fa1f fa8a 	uxth.w	sl, sl
 80067aa:	4453      	add	r3, sl
 80067ac:	f8dc a000 	ldr.w	sl, [ip]
 80067b0:	b292      	uxth	r2, r2
 80067b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80067b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067c0:	4581      	cmp	r9, r0
 80067c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80067c6:	f84c 3b04 	str.w	r3, [ip], #4
 80067ca:	d2db      	bcs.n	8006784 <quorem+0x44>
 80067cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80067d0:	b92b      	cbnz	r3, 80067de <quorem+0x9e>
 80067d2:	9b01      	ldr	r3, [sp, #4]
 80067d4:	3b04      	subs	r3, #4
 80067d6:	429d      	cmp	r5, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	d32f      	bcc.n	800683c <quorem+0xfc>
 80067dc:	613c      	str	r4, [r7, #16]
 80067de:	4638      	mov	r0, r7
 80067e0:	f001 f8d2 	bl	8007988 <__mcmp>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	db25      	blt.n	8006834 <quorem+0xf4>
 80067e8:	4628      	mov	r0, r5
 80067ea:	f04f 0c00 	mov.w	ip, #0
 80067ee:	3601      	adds	r6, #1
 80067f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80067f4:	f8d0 e000 	ldr.w	lr, [r0]
 80067f8:	b28b      	uxth	r3, r1
 80067fa:	ebac 0303 	sub.w	r3, ip, r3
 80067fe:	fa1f f28e 	uxth.w	r2, lr
 8006802:	4413      	add	r3, r2
 8006804:	0c0a      	lsrs	r2, r1, #16
 8006806:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800680a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800680e:	b29b      	uxth	r3, r3
 8006810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006814:	45c1      	cmp	r9, r8
 8006816:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800681a:	f840 3b04 	str.w	r3, [r0], #4
 800681e:	d2e7      	bcs.n	80067f0 <quorem+0xb0>
 8006820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006828:	b922      	cbnz	r2, 8006834 <quorem+0xf4>
 800682a:	3b04      	subs	r3, #4
 800682c:	429d      	cmp	r5, r3
 800682e:	461a      	mov	r2, r3
 8006830:	d30a      	bcc.n	8006848 <quorem+0x108>
 8006832:	613c      	str	r4, [r7, #16]
 8006834:	4630      	mov	r0, r6
 8006836:	b003      	add	sp, #12
 8006838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	3b04      	subs	r3, #4
 8006840:	2a00      	cmp	r2, #0
 8006842:	d1cb      	bne.n	80067dc <quorem+0x9c>
 8006844:	3c01      	subs	r4, #1
 8006846:	e7c6      	b.n	80067d6 <quorem+0x96>
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	3b04      	subs	r3, #4
 800684c:	2a00      	cmp	r2, #0
 800684e:	d1f0      	bne.n	8006832 <quorem+0xf2>
 8006850:	3c01      	subs	r4, #1
 8006852:	e7eb      	b.n	800682c <quorem+0xec>
 8006854:	2000      	movs	r0, #0
 8006856:	e7ee      	b.n	8006836 <quorem+0xf6>

08006858 <_dtoa_r>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	4616      	mov	r6, r2
 800685e:	461f      	mov	r7, r3
 8006860:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006862:	b099      	sub	sp, #100	; 0x64
 8006864:	4605      	mov	r5, r0
 8006866:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800686a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800686e:	b974      	cbnz	r4, 800688e <_dtoa_r+0x36>
 8006870:	2010      	movs	r0, #16
 8006872:	f000 fdf5 	bl	8007460 <malloc>
 8006876:	4602      	mov	r2, r0
 8006878:	6268      	str	r0, [r5, #36]	; 0x24
 800687a:	b920      	cbnz	r0, 8006886 <_dtoa_r+0x2e>
 800687c:	21ea      	movs	r1, #234	; 0xea
 800687e:	4ba8      	ldr	r3, [pc, #672]	; (8006b20 <_dtoa_r+0x2c8>)
 8006880:	48a8      	ldr	r0, [pc, #672]	; (8006b24 <_dtoa_r+0x2cc>)
 8006882:	f7ff ff3f 	bl	8006704 <__assert_func>
 8006886:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800688a:	6004      	str	r4, [r0, #0]
 800688c:	60c4      	str	r4, [r0, #12]
 800688e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	b151      	cbz	r1, 80068aa <_dtoa_r+0x52>
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	2301      	movs	r3, #1
 8006898:	4093      	lsls	r3, r2
 800689a:	604a      	str	r2, [r1, #4]
 800689c:	608b      	str	r3, [r1, #8]
 800689e:	4628      	mov	r0, r5
 80068a0:	f000 fe34 	bl	800750c <_Bfree>
 80068a4:	2200      	movs	r2, #0
 80068a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	1e3b      	subs	r3, r7, #0
 80068ac:	bfaf      	iteee	ge
 80068ae:	2300      	movge	r3, #0
 80068b0:	2201      	movlt	r2, #1
 80068b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	9305      	strlt	r3, [sp, #20]
 80068b8:	bfa8      	it	ge
 80068ba:	f8c8 3000 	strge.w	r3, [r8]
 80068be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80068c2:	4b99      	ldr	r3, [pc, #612]	; (8006b28 <_dtoa_r+0x2d0>)
 80068c4:	bfb8      	it	lt
 80068c6:	f8c8 2000 	strlt.w	r2, [r8]
 80068ca:	ea33 0309 	bics.w	r3, r3, r9
 80068ce:	d119      	bne.n	8006904 <_dtoa_r+0xac>
 80068d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80068d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068dc:	4333      	orrs	r3, r6
 80068de:	f000 857f 	beq.w	80073e0 <_dtoa_r+0xb88>
 80068e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068e4:	b953      	cbnz	r3, 80068fc <_dtoa_r+0xa4>
 80068e6:	4b91      	ldr	r3, [pc, #580]	; (8006b2c <_dtoa_r+0x2d4>)
 80068e8:	e022      	b.n	8006930 <_dtoa_r+0xd8>
 80068ea:	4b91      	ldr	r3, [pc, #580]	; (8006b30 <_dtoa_r+0x2d8>)
 80068ec:	9303      	str	r3, [sp, #12]
 80068ee:	3308      	adds	r3, #8
 80068f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	9803      	ldr	r0, [sp, #12]
 80068f6:	b019      	add	sp, #100	; 0x64
 80068f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fc:	4b8b      	ldr	r3, [pc, #556]	; (8006b2c <_dtoa_r+0x2d4>)
 80068fe:	9303      	str	r3, [sp, #12]
 8006900:	3303      	adds	r3, #3
 8006902:	e7f5      	b.n	80068f0 <_dtoa_r+0x98>
 8006904:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006908:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800690c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006910:	2200      	movs	r2, #0
 8006912:	2300      	movs	r3, #0
 8006914:	f7fa f848 	bl	80009a8 <__aeabi_dcmpeq>
 8006918:	4680      	mov	r8, r0
 800691a:	b158      	cbz	r0, 8006934 <_dtoa_r+0xdc>
 800691c:	2301      	movs	r3, #1
 800691e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8558 	beq.w	80073da <_dtoa_r+0xb82>
 800692a:	4882      	ldr	r0, [pc, #520]	; (8006b34 <_dtoa_r+0x2dc>)
 800692c:	6018      	str	r0, [r3, #0]
 800692e:	1e43      	subs	r3, r0, #1
 8006930:	9303      	str	r3, [sp, #12]
 8006932:	e7df      	b.n	80068f4 <_dtoa_r+0x9c>
 8006934:	ab16      	add	r3, sp, #88	; 0x58
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	ab17      	add	r3, sp, #92	; 0x5c
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	4628      	mov	r0, r5
 800693e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006942:	f001 f8c9 	bl	8007ad8 <__d2b>
 8006946:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800694a:	4683      	mov	fp, r0
 800694c:	2c00      	cmp	r4, #0
 800694e:	d07f      	beq.n	8006a50 <_dtoa_r+0x1f8>
 8006950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006956:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800695a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800695e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006962:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006966:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800696a:	2200      	movs	r2, #0
 800696c:	4b72      	ldr	r3, [pc, #456]	; (8006b38 <_dtoa_r+0x2e0>)
 800696e:	f7f9 fbfb 	bl	8000168 <__aeabi_dsub>
 8006972:	a365      	add	r3, pc, #404	; (adr r3, 8006b08 <_dtoa_r+0x2b0>)
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f7f9 fdae 	bl	80004d8 <__aeabi_dmul>
 800697c:	a364      	add	r3, pc, #400	; (adr r3, 8006b10 <_dtoa_r+0x2b8>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f7f9 fbf3 	bl	800016c <__adddf3>
 8006986:	4606      	mov	r6, r0
 8006988:	4620      	mov	r0, r4
 800698a:	460f      	mov	r7, r1
 800698c:	f7f9 fd3a 	bl	8000404 <__aeabi_i2d>
 8006990:	a361      	add	r3, pc, #388	; (adr r3, 8006b18 <_dtoa_r+0x2c0>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fd9f 	bl	80004d8 <__aeabi_dmul>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 fbe3 	bl	800016c <__adddf3>
 80069a6:	4606      	mov	r6, r0
 80069a8:	460f      	mov	r7, r1
 80069aa:	f7fa f845 	bl	8000a38 <__aeabi_d2iz>
 80069ae:	2200      	movs	r2, #0
 80069b0:	4682      	mov	sl, r0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4630      	mov	r0, r6
 80069b6:	4639      	mov	r1, r7
 80069b8:	f7fa f800 	bl	80009bc <__aeabi_dcmplt>
 80069bc:	b148      	cbz	r0, 80069d2 <_dtoa_r+0x17a>
 80069be:	4650      	mov	r0, sl
 80069c0:	f7f9 fd20 	bl	8000404 <__aeabi_i2d>
 80069c4:	4632      	mov	r2, r6
 80069c6:	463b      	mov	r3, r7
 80069c8:	f7f9 ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80069cc:	b908      	cbnz	r0, 80069d2 <_dtoa_r+0x17a>
 80069ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069d2:	f1ba 0f16 	cmp.w	sl, #22
 80069d6:	d858      	bhi.n	8006a8a <_dtoa_r+0x232>
 80069d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069dc:	4b57      	ldr	r3, [pc, #348]	; (8006b3c <_dtoa_r+0x2e4>)
 80069de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e6:	f7f9 ffe9 	bl	80009bc <__aeabi_dcmplt>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d04f      	beq.n	8006a8e <_dtoa_r+0x236>
 80069ee:	2300      	movs	r3, #0
 80069f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069f8:	1b1c      	subs	r4, r3, r4
 80069fa:	1e63      	subs	r3, r4, #1
 80069fc:	9309      	str	r3, [sp, #36]	; 0x24
 80069fe:	bf49      	itett	mi
 8006a00:	f1c4 0301 	rsbmi	r3, r4, #1
 8006a04:	2300      	movpl	r3, #0
 8006a06:	9306      	strmi	r3, [sp, #24]
 8006a08:	2300      	movmi	r3, #0
 8006a0a:	bf54      	ite	pl
 8006a0c:	9306      	strpl	r3, [sp, #24]
 8006a0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006a10:	f1ba 0f00 	cmp.w	sl, #0
 8006a14:	db3d      	blt.n	8006a92 <_dtoa_r+0x23a>
 8006a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a18:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006a1c:	4453      	add	r3, sl
 8006a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a20:	2300      	movs	r3, #0
 8006a22:	930a      	str	r3, [sp, #40]	; 0x28
 8006a24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a26:	2b09      	cmp	r3, #9
 8006a28:	f200 808c 	bhi.w	8006b44 <_dtoa_r+0x2ec>
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	bfc4      	itt	gt
 8006a30:	3b04      	subgt	r3, #4
 8006a32:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006a34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a36:	bfc8      	it	gt
 8006a38:	2400      	movgt	r4, #0
 8006a3a:	f1a3 0302 	sub.w	r3, r3, #2
 8006a3e:	bfd8      	it	le
 8006a40:	2401      	movle	r4, #1
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	f200 808a 	bhi.w	8006b5c <_dtoa_r+0x304>
 8006a48:	e8df f003 	tbb	[pc, r3]
 8006a4c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006a50:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006a54:	441c      	add	r4, r3
 8006a56:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	bfc3      	ittte	gt
 8006a5e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a62:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a66:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a6a:	f1c3 0320 	rsble	r3, r3, #32
 8006a6e:	bfc6      	itte	gt
 8006a70:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a74:	4318      	orrgt	r0, r3
 8006a76:	fa06 f003 	lslle.w	r0, r6, r3
 8006a7a:	f7f9 fcb3 	bl	80003e4 <__aeabi_ui2d>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a84:	3c01      	subs	r4, #1
 8006a86:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a88:	e76f      	b.n	800696a <_dtoa_r+0x112>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e7b2      	b.n	80069f4 <_dtoa_r+0x19c>
 8006a8e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a90:	e7b1      	b.n	80069f6 <_dtoa_r+0x19e>
 8006a92:	9b06      	ldr	r3, [sp, #24]
 8006a94:	eba3 030a 	sub.w	r3, r3, sl
 8006a98:	9306      	str	r3, [sp, #24]
 8006a9a:	f1ca 0300 	rsb	r3, sl, #0
 8006a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8006aa4:	e7be      	b.n	8006a24 <_dtoa_r+0x1cc>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	dc58      	bgt.n	8006b62 <_dtoa_r+0x30a>
 8006ab0:	f04f 0901 	mov.w	r9, #1
 8006ab4:	464b      	mov	r3, r9
 8006ab6:	f8cd 9020 	str.w	r9, [sp, #32]
 8006aba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006abe:	2200      	movs	r2, #0
 8006ac0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006ac2:	6042      	str	r2, [r0, #4]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	f102 0614 	add.w	r6, r2, #20
 8006aca:	429e      	cmp	r6, r3
 8006acc:	6841      	ldr	r1, [r0, #4]
 8006ace:	d94e      	bls.n	8006b6e <_dtoa_r+0x316>
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f000 fcdb 	bl	800748c <_Balloc>
 8006ad6:	9003      	str	r0, [sp, #12]
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d14c      	bne.n	8006b76 <_dtoa_r+0x31e>
 8006adc:	4602      	mov	r2, r0
 8006ade:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <_dtoa_r+0x2e8>)
 8006ae4:	e6cc      	b.n	8006880 <_dtoa_r+0x28>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7de      	b.n	8006aa8 <_dtoa_r+0x250>
 8006aea:	2300      	movs	r3, #0
 8006aec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006af0:	eb0a 0903 	add.w	r9, sl, r3
 8006af4:	f109 0301 	add.w	r3, r9, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	9308      	str	r3, [sp, #32]
 8006afc:	bfb8      	it	lt
 8006afe:	2301      	movlt	r3, #1
 8006b00:	e7dd      	b.n	8006abe <_dtoa_r+0x266>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e7f2      	b.n	8006aec <_dtoa_r+0x294>
 8006b06:	bf00      	nop
 8006b08:	636f4361 	.word	0x636f4361
 8006b0c:	3fd287a7 	.word	0x3fd287a7
 8006b10:	8b60c8b3 	.word	0x8b60c8b3
 8006b14:	3fc68a28 	.word	0x3fc68a28
 8006b18:	509f79fb 	.word	0x509f79fb
 8006b1c:	3fd34413 	.word	0x3fd34413
 8006b20:	08008d64 	.word	0x08008d64
 8006b24:	08008e21 	.word	0x08008e21
 8006b28:	7ff00000 	.word	0x7ff00000
 8006b2c:	08008e1d 	.word	0x08008e1d
 8006b30:	08008e14 	.word	0x08008e14
 8006b34:	08008d41 	.word	0x08008d41
 8006b38:	3ff80000 	.word	0x3ff80000
 8006b3c:	08008f18 	.word	0x08008f18
 8006b40:	08008e7c 	.word	0x08008e7c
 8006b44:	2401      	movs	r4, #1
 8006b46:	2300      	movs	r3, #0
 8006b48:	940b      	str	r4, [sp, #44]	; 0x2c
 8006b4a:	9322      	str	r3, [sp, #136]	; 0x88
 8006b4c:	f04f 39ff 	mov.w	r9, #4294967295
 8006b50:	2200      	movs	r2, #0
 8006b52:	2312      	movs	r3, #18
 8006b54:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b58:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b5a:	e7b0      	b.n	8006abe <_dtoa_r+0x266>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b60:	e7f4      	b.n	8006b4c <_dtoa_r+0x2f4>
 8006b62:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b66:	464b      	mov	r3, r9
 8006b68:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b6c:	e7a7      	b.n	8006abe <_dtoa_r+0x266>
 8006b6e:	3101      	adds	r1, #1
 8006b70:	6041      	str	r1, [r0, #4]
 8006b72:	0052      	lsls	r2, r2, #1
 8006b74:	e7a7      	b.n	8006ac6 <_dtoa_r+0x26e>
 8006b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b78:	9a03      	ldr	r2, [sp, #12]
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	2b0e      	cmp	r3, #14
 8006b80:	f200 80a8 	bhi.w	8006cd4 <_dtoa_r+0x47c>
 8006b84:	2c00      	cmp	r4, #0
 8006b86:	f000 80a5 	beq.w	8006cd4 <_dtoa_r+0x47c>
 8006b8a:	f1ba 0f00 	cmp.w	sl, #0
 8006b8e:	dd34      	ble.n	8006bfa <_dtoa_r+0x3a2>
 8006b90:	4a9a      	ldr	r2, [pc, #616]	; (8006dfc <_dtoa_r+0x5a4>)
 8006b92:	f00a 030f 	and.w	r3, sl, #15
 8006b96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b9a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ba2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ba6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006baa:	d016      	beq.n	8006bda <_dtoa_r+0x382>
 8006bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bb0:	4b93      	ldr	r3, [pc, #588]	; (8006e00 <_dtoa_r+0x5a8>)
 8006bb2:	2703      	movs	r7, #3
 8006bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006bb8:	f7f9 fdb8 	bl	800072c <__aeabi_ddiv>
 8006bbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc0:	f004 040f 	and.w	r4, r4, #15
 8006bc4:	4e8e      	ldr	r6, [pc, #568]	; (8006e00 <_dtoa_r+0x5a8>)
 8006bc6:	b954      	cbnz	r4, 8006bde <_dtoa_r+0x386>
 8006bc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd0:	f7f9 fdac 	bl	800072c <__aeabi_ddiv>
 8006bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bd8:	e029      	b.n	8006c2e <_dtoa_r+0x3d6>
 8006bda:	2702      	movs	r7, #2
 8006bdc:	e7f2      	b.n	8006bc4 <_dtoa_r+0x36c>
 8006bde:	07e1      	lsls	r1, r4, #31
 8006be0:	d508      	bpl.n	8006bf4 <_dtoa_r+0x39c>
 8006be2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006be6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bea:	f7f9 fc75 	bl	80004d8 <__aeabi_dmul>
 8006bee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bf2:	3701      	adds	r7, #1
 8006bf4:	1064      	asrs	r4, r4, #1
 8006bf6:	3608      	adds	r6, #8
 8006bf8:	e7e5      	b.n	8006bc6 <_dtoa_r+0x36e>
 8006bfa:	f000 80a5 	beq.w	8006d48 <_dtoa_r+0x4f0>
 8006bfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c02:	f1ca 0400 	rsb	r4, sl, #0
 8006c06:	4b7d      	ldr	r3, [pc, #500]	; (8006dfc <_dtoa_r+0x5a4>)
 8006c08:	f004 020f 	and.w	r2, r4, #15
 8006c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 fc60 	bl	80004d8 <__aeabi_dmul>
 8006c18:	2702      	movs	r7, #2
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c20:	4e77      	ldr	r6, [pc, #476]	; (8006e00 <_dtoa_r+0x5a8>)
 8006c22:	1124      	asrs	r4, r4, #4
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	f040 8084 	bne.w	8006d32 <_dtoa_r+0x4da>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1d2      	bne.n	8006bd4 <_dtoa_r+0x37c>
 8006c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 808b 	beq.w	8006d4c <_dtoa_r+0x4f4>
 8006c36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006c3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c42:	2200      	movs	r2, #0
 8006c44:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <_dtoa_r+0x5ac>)
 8006c46:	f7f9 feb9 	bl	80009bc <__aeabi_dcmplt>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d07e      	beq.n	8006d4c <_dtoa_r+0x4f4>
 8006c4e:	9b08      	ldr	r3, [sp, #32]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d07b      	beq.n	8006d4c <_dtoa_r+0x4f4>
 8006c54:	f1b9 0f00 	cmp.w	r9, #0
 8006c58:	dd38      	ble.n	8006ccc <_dtoa_r+0x474>
 8006c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4b69      	ldr	r3, [pc, #420]	; (8006e08 <_dtoa_r+0x5b0>)
 8006c62:	f7f9 fc39 	bl	80004d8 <__aeabi_dmul>
 8006c66:	464c      	mov	r4, r9
 8006c68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c6c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006c70:	3701      	adds	r7, #1
 8006c72:	4638      	mov	r0, r7
 8006c74:	f7f9 fbc6 	bl	8000404 <__aeabi_i2d>
 8006c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c7c:	f7f9 fc2c 	bl	80004d8 <__aeabi_dmul>
 8006c80:	2200      	movs	r2, #0
 8006c82:	4b62      	ldr	r3, [pc, #392]	; (8006e0c <_dtoa_r+0x5b4>)
 8006c84:	f7f9 fa72 	bl	800016c <__adddf3>
 8006c88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c90:	9611      	str	r6, [sp, #68]	; 0x44
 8006c92:	2c00      	cmp	r4, #0
 8006c94:	d15d      	bne.n	8006d52 <_dtoa_r+0x4fa>
 8006c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4b5c      	ldr	r3, [pc, #368]	; (8006e10 <_dtoa_r+0x5b8>)
 8006c9e:	f7f9 fa63 	bl	8000168 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006caa:	4633      	mov	r3, r6
 8006cac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cae:	f7f9 fea3 	bl	80009f8 <__aeabi_dcmpgt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f040 829c 	bne.w	80071f0 <_dtoa_r+0x998>
 8006cb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cbe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006cc2:	f7f9 fe7b 	bl	80009bc <__aeabi_dcmplt>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f040 8290 	bne.w	80071ec <_dtoa_r+0x994>
 8006ccc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006cd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f2c0 8152 	blt.w	8006f80 <_dtoa_r+0x728>
 8006cdc:	f1ba 0f0e 	cmp.w	sl, #14
 8006ce0:	f300 814e 	bgt.w	8006f80 <_dtoa_r+0x728>
 8006ce4:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <_dtoa_r+0x5a4>)
 8006ce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006cea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006cf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f280 80db 	bge.w	8006eb0 <_dtoa_r+0x658>
 8006cfa:	9b08      	ldr	r3, [sp, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f300 80d7 	bgt.w	8006eb0 <_dtoa_r+0x658>
 8006d02:	f040 8272 	bne.w	80071ea <_dtoa_r+0x992>
 8006d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	4b40      	ldr	r3, [pc, #256]	; (8006e10 <_dtoa_r+0x5b8>)
 8006d0e:	f7f9 fbe3 	bl	80004d8 <__aeabi_dmul>
 8006d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d16:	f7f9 fe65 	bl	80009e4 <__aeabi_dcmpge>
 8006d1a:	9c08      	ldr	r4, [sp, #32]
 8006d1c:	4626      	mov	r6, r4
 8006d1e:	2800      	cmp	r0, #0
 8006d20:	f040 8248 	bne.w	80071b4 <_dtoa_r+0x95c>
 8006d24:	2331      	movs	r3, #49	; 0x31
 8006d26:	9f03      	ldr	r7, [sp, #12]
 8006d28:	f10a 0a01 	add.w	sl, sl, #1
 8006d2c:	f807 3b01 	strb.w	r3, [r7], #1
 8006d30:	e244      	b.n	80071bc <_dtoa_r+0x964>
 8006d32:	07e2      	lsls	r2, r4, #31
 8006d34:	d505      	bpl.n	8006d42 <_dtoa_r+0x4ea>
 8006d36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d3a:	f7f9 fbcd 	bl	80004d8 <__aeabi_dmul>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	3701      	adds	r7, #1
 8006d42:	1064      	asrs	r4, r4, #1
 8006d44:	3608      	adds	r6, #8
 8006d46:	e76d      	b.n	8006c24 <_dtoa_r+0x3cc>
 8006d48:	2702      	movs	r7, #2
 8006d4a:	e770      	b.n	8006c2e <_dtoa_r+0x3d6>
 8006d4c:	46d0      	mov	r8, sl
 8006d4e:	9c08      	ldr	r4, [sp, #32]
 8006d50:	e78f      	b.n	8006c72 <_dtoa_r+0x41a>
 8006d52:	9903      	ldr	r1, [sp, #12]
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <_dtoa_r+0x5a4>)
 8006d56:	4421      	add	r1, r4
 8006d58:	9112      	str	r1, [sp, #72]	; 0x48
 8006d5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	d055      	beq.n	8006e18 <_dtoa_r+0x5c0>
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	4929      	ldr	r1, [pc, #164]	; (8006e14 <_dtoa_r+0x5bc>)
 8006d70:	f7f9 fcdc 	bl	800072c <__aeabi_ddiv>
 8006d74:	463b      	mov	r3, r7
 8006d76:	4632      	mov	r2, r6
 8006d78:	f7f9 f9f6 	bl	8000168 <__aeabi_dsub>
 8006d7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d80:	9f03      	ldr	r7, [sp, #12]
 8006d82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d86:	f7f9 fe57 	bl	8000a38 <__aeabi_d2iz>
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	f7f9 fb3a 	bl	8000404 <__aeabi_i2d>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d98:	f7f9 f9e6 	bl	8000168 <__aeabi_dsub>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	3430      	adds	r4, #48	; 0x30
 8006da2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006daa:	f807 4b01 	strb.w	r4, [r7], #1
 8006dae:	f7f9 fe05 	bl	80009bc <__aeabi_dcmplt>
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d174      	bne.n	8006ea0 <_dtoa_r+0x648>
 8006db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dba:	2000      	movs	r0, #0
 8006dbc:	4911      	ldr	r1, [pc, #68]	; (8006e04 <_dtoa_r+0x5ac>)
 8006dbe:	f7f9 f9d3 	bl	8000168 <__aeabi_dsub>
 8006dc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dc6:	f7f9 fdf9 	bl	80009bc <__aeabi_dcmplt>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f040 80b7 	bne.w	8006f3e <_dtoa_r+0x6e6>
 8006dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dd2:	429f      	cmp	r7, r3
 8006dd4:	f43f af7a 	beq.w	8006ccc <_dtoa_r+0x474>
 8006dd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <_dtoa_r+0x5b0>)
 8006de0:	f7f9 fb7a 	bl	80004d8 <__aeabi_dmul>
 8006de4:	2200      	movs	r2, #0
 8006de6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dee:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <_dtoa_r+0x5b0>)
 8006df0:	f7f9 fb72 	bl	80004d8 <__aeabi_dmul>
 8006df4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006df8:	e7c3      	b.n	8006d82 <_dtoa_r+0x52a>
 8006dfa:	bf00      	nop
 8006dfc:	08008f18 	.word	0x08008f18
 8006e00:	08008ef0 	.word	0x08008ef0
 8006e04:	3ff00000 	.word	0x3ff00000
 8006e08:	40240000 	.word	0x40240000
 8006e0c:	401c0000 	.word	0x401c0000
 8006e10:	40140000 	.word	0x40140000
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fb5c 	bl	80004d8 <__aeabi_dmul>
 8006e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e26:	9c03      	ldr	r4, [sp, #12]
 8006e28:	9314      	str	r3, [sp, #80]	; 0x50
 8006e2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e2e:	f7f9 fe03 	bl	8000a38 <__aeabi_d2iz>
 8006e32:	9015      	str	r0, [sp, #84]	; 0x54
 8006e34:	f7f9 fae6 	bl	8000404 <__aeabi_i2d>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e40:	f7f9 f992 	bl	8000168 <__aeabi_dsub>
 8006e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e46:	4606      	mov	r6, r0
 8006e48:	3330      	adds	r3, #48	; 0x30
 8006e4a:	f804 3b01 	strb.w	r3, [r4], #1
 8006e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e50:	460f      	mov	r7, r1
 8006e52:	429c      	cmp	r4, r3
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	d124      	bne.n	8006ea4 <_dtoa_r+0x64c>
 8006e5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e5e:	4bb0      	ldr	r3, [pc, #704]	; (8007120 <_dtoa_r+0x8c8>)
 8006e60:	f7f9 f984 	bl	800016c <__adddf3>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fdc4 	bl	80009f8 <__aeabi_dcmpgt>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d163      	bne.n	8006f3c <_dtoa_r+0x6e4>
 8006e74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e78:	2000      	movs	r0, #0
 8006e7a:	49a9      	ldr	r1, [pc, #676]	; (8007120 <_dtoa_r+0x8c8>)
 8006e7c:	f7f9 f974 	bl	8000168 <__aeabi_dsub>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4630      	mov	r0, r6
 8006e86:	4639      	mov	r1, r7
 8006e88:	f7f9 fd98 	bl	80009bc <__aeabi_dcmplt>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f43f af1d 	beq.w	8006ccc <_dtoa_r+0x474>
 8006e92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e94:	1e7b      	subs	r3, r7, #1
 8006e96:	9314      	str	r3, [sp, #80]	; 0x50
 8006e98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e9c:	2b30      	cmp	r3, #48	; 0x30
 8006e9e:	d0f8      	beq.n	8006e92 <_dtoa_r+0x63a>
 8006ea0:	46c2      	mov	sl, r8
 8006ea2:	e03b      	b.n	8006f1c <_dtoa_r+0x6c4>
 8006ea4:	4b9f      	ldr	r3, [pc, #636]	; (8007124 <_dtoa_r+0x8cc>)
 8006ea6:	f7f9 fb17 	bl	80004d8 <__aeabi_dmul>
 8006eaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eae:	e7bc      	b.n	8006e2a <_dtoa_r+0x5d2>
 8006eb0:	9f03      	ldr	r7, [sp, #12]
 8006eb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006eb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f7f9 fc35 	bl	800072c <__aeabi_ddiv>
 8006ec2:	f7f9 fdb9 	bl	8000a38 <__aeabi_d2iz>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f7f9 fa9c 	bl	8000404 <__aeabi_i2d>
 8006ecc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ed0:	f7f9 fb02 	bl	80004d8 <__aeabi_dmul>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4640      	mov	r0, r8
 8006eda:	4649      	mov	r1, r9
 8006edc:	f7f9 f944 	bl	8000168 <__aeabi_dsub>
 8006ee0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ee4:	f807 6b01 	strb.w	r6, [r7], #1
 8006ee8:	9e03      	ldr	r6, [sp, #12]
 8006eea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006eee:	1bbe      	subs	r6, r7, r6
 8006ef0:	45b4      	cmp	ip, r6
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	d136      	bne.n	8006f66 <_dtoa_r+0x70e>
 8006ef8:	f7f9 f938 	bl	800016c <__adddf3>
 8006efc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f00:	4680      	mov	r8, r0
 8006f02:	4689      	mov	r9, r1
 8006f04:	f7f9 fd78 	bl	80009f8 <__aeabi_dcmpgt>
 8006f08:	bb58      	cbnz	r0, 8006f62 <_dtoa_r+0x70a>
 8006f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4649      	mov	r1, r9
 8006f12:	f7f9 fd49 	bl	80009a8 <__aeabi_dcmpeq>
 8006f16:	b108      	cbz	r0, 8006f1c <_dtoa_r+0x6c4>
 8006f18:	07e1      	lsls	r1, r4, #31
 8006f1a:	d422      	bmi.n	8006f62 <_dtoa_r+0x70a>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	4659      	mov	r1, fp
 8006f20:	f000 faf4 	bl	800750c <_Bfree>
 8006f24:	2300      	movs	r3, #0
 8006f26:	703b      	strb	r3, [r7, #0]
 8006f28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006f2a:	f10a 0001 	add.w	r0, sl, #1
 8006f2e:	6018      	str	r0, [r3, #0]
 8006f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f43f acde 	beq.w	80068f4 <_dtoa_r+0x9c>
 8006f38:	601f      	str	r7, [r3, #0]
 8006f3a:	e4db      	b.n	80068f4 <_dtoa_r+0x9c>
 8006f3c:	4627      	mov	r7, r4
 8006f3e:	463b      	mov	r3, r7
 8006f40:	461f      	mov	r7, r3
 8006f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f46:	2a39      	cmp	r2, #57	; 0x39
 8006f48:	d107      	bne.n	8006f5a <_dtoa_r+0x702>
 8006f4a:	9a03      	ldr	r2, [sp, #12]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d1f7      	bne.n	8006f40 <_dtoa_r+0x6e8>
 8006f50:	2230      	movs	r2, #48	; 0x30
 8006f52:	9903      	ldr	r1, [sp, #12]
 8006f54:	f108 0801 	add.w	r8, r8, #1
 8006f58:	700a      	strb	r2, [r1, #0]
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	3201      	adds	r2, #1
 8006f5e:	701a      	strb	r2, [r3, #0]
 8006f60:	e79e      	b.n	8006ea0 <_dtoa_r+0x648>
 8006f62:	46d0      	mov	r8, sl
 8006f64:	e7eb      	b.n	8006f3e <_dtoa_r+0x6e6>
 8006f66:	2200      	movs	r2, #0
 8006f68:	4b6e      	ldr	r3, [pc, #440]	; (8007124 <_dtoa_r+0x8cc>)
 8006f6a:	f7f9 fab5 	bl	80004d8 <__aeabi_dmul>
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2300      	movs	r3, #0
 8006f72:	4680      	mov	r8, r0
 8006f74:	4689      	mov	r9, r1
 8006f76:	f7f9 fd17 	bl	80009a8 <__aeabi_dcmpeq>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d09b      	beq.n	8006eb6 <_dtoa_r+0x65e>
 8006f7e:	e7cd      	b.n	8006f1c <_dtoa_r+0x6c4>
 8006f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f82:	2a00      	cmp	r2, #0
 8006f84:	f000 80d0 	beq.w	8007128 <_dtoa_r+0x8d0>
 8006f88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f8a:	2a01      	cmp	r2, #1
 8006f8c:	f300 80ae 	bgt.w	80070ec <_dtoa_r+0x894>
 8006f90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	f000 80a6 	beq.w	80070e4 <_dtoa_r+0x88c>
 8006f98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f9e:	9f06      	ldr	r7, [sp, #24]
 8006fa0:	9a06      	ldr	r2, [sp, #24]
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	441a      	add	r2, r3
 8006fa6:	9206      	str	r2, [sp, #24]
 8006fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006faa:	4628      	mov	r0, r5
 8006fac:	441a      	add	r2, r3
 8006fae:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb0:	f000 fb62 	bl	8007678 <__i2b>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	2f00      	cmp	r7, #0
 8006fb8:	dd0c      	ble.n	8006fd4 <_dtoa_r+0x77c>
 8006fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dd09      	ble.n	8006fd4 <_dtoa_r+0x77c>
 8006fc0:	42bb      	cmp	r3, r7
 8006fc2:	bfa8      	it	ge
 8006fc4:	463b      	movge	r3, r7
 8006fc6:	9a06      	ldr	r2, [sp, #24]
 8006fc8:	1aff      	subs	r7, r7, r3
 8006fca:	1ad2      	subs	r2, r2, r3
 8006fcc:	9206      	str	r2, [sp, #24]
 8006fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd6:	b1f3      	cbz	r3, 8007016 <_dtoa_r+0x7be>
 8006fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80a8 	beq.w	8007130 <_dtoa_r+0x8d8>
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	dd10      	ble.n	8007006 <_dtoa_r+0x7ae>
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4622      	mov	r2, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 fc03 	bl	80077f4 <__pow5mult>
 8006fee:	465a      	mov	r2, fp
 8006ff0:	4601      	mov	r1, r0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f000 fb55 	bl	80076a4 <__multiply>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 fa84 	bl	800750c <_Bfree>
 8007004:	46c3      	mov	fp, r8
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	1b1a      	subs	r2, r3, r4
 800700a:	d004      	beq.n	8007016 <_dtoa_r+0x7be>
 800700c:	4659      	mov	r1, fp
 800700e:	4628      	mov	r0, r5
 8007010:	f000 fbf0 	bl	80077f4 <__pow5mult>
 8007014:	4683      	mov	fp, r0
 8007016:	2101      	movs	r1, #1
 8007018:	4628      	mov	r0, r5
 800701a:	f000 fb2d 	bl	8007678 <__i2b>
 800701e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007020:	4604      	mov	r4, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	f340 8086 	ble.w	8007134 <_dtoa_r+0x8dc>
 8007028:	461a      	mov	r2, r3
 800702a:	4601      	mov	r1, r0
 800702c:	4628      	mov	r0, r5
 800702e:	f000 fbe1 	bl	80077f4 <__pow5mult>
 8007032:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007034:	4604      	mov	r4, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	dd7f      	ble.n	800713a <_dtoa_r+0x8e2>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007044:	6918      	ldr	r0, [r3, #16]
 8007046:	f000 fac9 	bl	80075dc <__hi0bits>
 800704a:	f1c0 0020 	rsb	r0, r0, #32
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	4418      	add	r0, r3
 8007052:	f010 001f 	ands.w	r0, r0, #31
 8007056:	f000 8092 	beq.w	800717e <_dtoa_r+0x926>
 800705a:	f1c0 0320 	rsb	r3, r0, #32
 800705e:	2b04      	cmp	r3, #4
 8007060:	f340 808a 	ble.w	8007178 <_dtoa_r+0x920>
 8007064:	f1c0 001c 	rsb	r0, r0, #28
 8007068:	9b06      	ldr	r3, [sp, #24]
 800706a:	4407      	add	r7, r0
 800706c:	4403      	add	r3, r0
 800706e:	9306      	str	r3, [sp, #24]
 8007070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007072:	4403      	add	r3, r0
 8007074:	9309      	str	r3, [sp, #36]	; 0x24
 8007076:	9b06      	ldr	r3, [sp, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	dd05      	ble.n	8007088 <_dtoa_r+0x830>
 800707c:	4659      	mov	r1, fp
 800707e:	461a      	mov	r2, r3
 8007080:	4628      	mov	r0, r5
 8007082:	f000 fc11 	bl	80078a8 <__lshift>
 8007086:	4683      	mov	fp, r0
 8007088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708a:	2b00      	cmp	r3, #0
 800708c:	dd05      	ble.n	800709a <_dtoa_r+0x842>
 800708e:	4621      	mov	r1, r4
 8007090:	461a      	mov	r2, r3
 8007092:	4628      	mov	r0, r5
 8007094:	f000 fc08 	bl	80078a8 <__lshift>
 8007098:	4604      	mov	r4, r0
 800709a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d070      	beq.n	8007182 <_dtoa_r+0x92a>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4658      	mov	r0, fp
 80070a4:	f000 fc70 	bl	8007988 <__mcmp>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	da6a      	bge.n	8007182 <_dtoa_r+0x92a>
 80070ac:	2300      	movs	r3, #0
 80070ae:	4659      	mov	r1, fp
 80070b0:	220a      	movs	r2, #10
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 fa4c 	bl	8007550 <__multadd>
 80070b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ba:	4683      	mov	fp, r0
 80070bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8194 	beq.w	80073ee <_dtoa_r+0xb96>
 80070c6:	4631      	mov	r1, r6
 80070c8:	2300      	movs	r3, #0
 80070ca:	220a      	movs	r2, #10
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 fa3f 	bl	8007550 <__multadd>
 80070d2:	f1b9 0f00 	cmp.w	r9, #0
 80070d6:	4606      	mov	r6, r0
 80070d8:	f300 8093 	bgt.w	8007202 <_dtoa_r+0x9aa>
 80070dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070de:	2b02      	cmp	r3, #2
 80070e0:	dc57      	bgt.n	8007192 <_dtoa_r+0x93a>
 80070e2:	e08e      	b.n	8007202 <_dtoa_r+0x9aa>
 80070e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070ea:	e757      	b.n	8006f9c <_dtoa_r+0x744>
 80070ec:	9b08      	ldr	r3, [sp, #32]
 80070ee:	1e5c      	subs	r4, r3, #1
 80070f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	bfb7      	itett	lt
 80070f6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80070f8:	1b1c      	subge	r4, r3, r4
 80070fa:	1ae2      	sublt	r2, r4, r3
 80070fc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070fe:	bfbe      	ittt	lt
 8007100:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007102:	189b      	addlt	r3, r3, r2
 8007104:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007106:	9b08      	ldr	r3, [sp, #32]
 8007108:	bfb8      	it	lt
 800710a:	2400      	movlt	r4, #0
 800710c:	2b00      	cmp	r3, #0
 800710e:	bfbb      	ittet	lt
 8007110:	9b06      	ldrlt	r3, [sp, #24]
 8007112:	9a08      	ldrlt	r2, [sp, #32]
 8007114:	9f06      	ldrge	r7, [sp, #24]
 8007116:	1a9f      	sublt	r7, r3, r2
 8007118:	bfac      	ite	ge
 800711a:	9b08      	ldrge	r3, [sp, #32]
 800711c:	2300      	movlt	r3, #0
 800711e:	e73f      	b.n	8006fa0 <_dtoa_r+0x748>
 8007120:	3fe00000 	.word	0x3fe00000
 8007124:	40240000 	.word	0x40240000
 8007128:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800712a:	9f06      	ldr	r7, [sp, #24]
 800712c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800712e:	e742      	b.n	8006fb6 <_dtoa_r+0x75e>
 8007130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007132:	e76b      	b.n	800700c <_dtoa_r+0x7b4>
 8007134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007136:	2b01      	cmp	r3, #1
 8007138:	dc19      	bgt.n	800716e <_dtoa_r+0x916>
 800713a:	9b04      	ldr	r3, [sp, #16]
 800713c:	b9bb      	cbnz	r3, 800716e <_dtoa_r+0x916>
 800713e:	9b05      	ldr	r3, [sp, #20]
 8007140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007144:	b99b      	cbnz	r3, 800716e <_dtoa_r+0x916>
 8007146:	9b05      	ldr	r3, [sp, #20]
 8007148:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800714c:	0d1b      	lsrs	r3, r3, #20
 800714e:	051b      	lsls	r3, r3, #20
 8007150:	b183      	cbz	r3, 8007174 <_dtoa_r+0x91c>
 8007152:	f04f 0801 	mov.w	r8, #1
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	3301      	adds	r3, #1
 800715a:	9306      	str	r3, [sp, #24]
 800715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715e:	3301      	adds	r3, #1
 8007160:	9309      	str	r3, [sp, #36]	; 0x24
 8007162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	f47f af6a 	bne.w	800703e <_dtoa_r+0x7e6>
 800716a:	2001      	movs	r0, #1
 800716c:	e76f      	b.n	800704e <_dtoa_r+0x7f6>
 800716e:	f04f 0800 	mov.w	r8, #0
 8007172:	e7f6      	b.n	8007162 <_dtoa_r+0x90a>
 8007174:	4698      	mov	r8, r3
 8007176:	e7f4      	b.n	8007162 <_dtoa_r+0x90a>
 8007178:	f43f af7d 	beq.w	8007076 <_dtoa_r+0x81e>
 800717c:	4618      	mov	r0, r3
 800717e:	301c      	adds	r0, #28
 8007180:	e772      	b.n	8007068 <_dtoa_r+0x810>
 8007182:	9b08      	ldr	r3, [sp, #32]
 8007184:	2b00      	cmp	r3, #0
 8007186:	dc36      	bgt.n	80071f6 <_dtoa_r+0x99e>
 8007188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800718a:	2b02      	cmp	r3, #2
 800718c:	dd33      	ble.n	80071f6 <_dtoa_r+0x99e>
 800718e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	d10d      	bne.n	80071b4 <_dtoa_r+0x95c>
 8007198:	4621      	mov	r1, r4
 800719a:	464b      	mov	r3, r9
 800719c:	2205      	movs	r2, #5
 800719e:	4628      	mov	r0, r5
 80071a0:	f000 f9d6 	bl	8007550 <__multadd>
 80071a4:	4601      	mov	r1, r0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4658      	mov	r0, fp
 80071aa:	f000 fbed 	bl	8007988 <__mcmp>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f73f adb8 	bgt.w	8006d24 <_dtoa_r+0x4cc>
 80071b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071b6:	9f03      	ldr	r7, [sp, #12]
 80071b8:	ea6f 0a03 	mvn.w	sl, r3
 80071bc:	f04f 0800 	mov.w	r8, #0
 80071c0:	4621      	mov	r1, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	f000 f9a2 	bl	800750c <_Bfree>
 80071c8:	2e00      	cmp	r6, #0
 80071ca:	f43f aea7 	beq.w	8006f1c <_dtoa_r+0x6c4>
 80071ce:	f1b8 0f00 	cmp.w	r8, #0
 80071d2:	d005      	beq.n	80071e0 <_dtoa_r+0x988>
 80071d4:	45b0      	cmp	r8, r6
 80071d6:	d003      	beq.n	80071e0 <_dtoa_r+0x988>
 80071d8:	4641      	mov	r1, r8
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 f996 	bl	800750c <_Bfree>
 80071e0:	4631      	mov	r1, r6
 80071e2:	4628      	mov	r0, r5
 80071e4:	f000 f992 	bl	800750c <_Bfree>
 80071e8:	e698      	b.n	8006f1c <_dtoa_r+0x6c4>
 80071ea:	2400      	movs	r4, #0
 80071ec:	4626      	mov	r6, r4
 80071ee:	e7e1      	b.n	80071b4 <_dtoa_r+0x95c>
 80071f0:	46c2      	mov	sl, r8
 80071f2:	4626      	mov	r6, r4
 80071f4:	e596      	b.n	8006d24 <_dtoa_r+0x4cc>
 80071f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 80fd 	beq.w	80073fc <_dtoa_r+0xba4>
 8007202:	2f00      	cmp	r7, #0
 8007204:	dd05      	ble.n	8007212 <_dtoa_r+0x9ba>
 8007206:	4631      	mov	r1, r6
 8007208:	463a      	mov	r2, r7
 800720a:	4628      	mov	r0, r5
 800720c:	f000 fb4c 	bl	80078a8 <__lshift>
 8007210:	4606      	mov	r6, r0
 8007212:	f1b8 0f00 	cmp.w	r8, #0
 8007216:	d05c      	beq.n	80072d2 <_dtoa_r+0xa7a>
 8007218:	4628      	mov	r0, r5
 800721a:	6871      	ldr	r1, [r6, #4]
 800721c:	f000 f936 	bl	800748c <_Balloc>
 8007220:	4607      	mov	r7, r0
 8007222:	b928      	cbnz	r0, 8007230 <_dtoa_r+0x9d8>
 8007224:	4602      	mov	r2, r0
 8007226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800722a:	4b7f      	ldr	r3, [pc, #508]	; (8007428 <_dtoa_r+0xbd0>)
 800722c:	f7ff bb28 	b.w	8006880 <_dtoa_r+0x28>
 8007230:	6932      	ldr	r2, [r6, #16]
 8007232:	f106 010c 	add.w	r1, r6, #12
 8007236:	3202      	adds	r2, #2
 8007238:	0092      	lsls	r2, r2, #2
 800723a:	300c      	adds	r0, #12
 800723c:	f7fe fd5a 	bl	8005cf4 <memcpy>
 8007240:	2201      	movs	r2, #1
 8007242:	4639      	mov	r1, r7
 8007244:	4628      	mov	r0, r5
 8007246:	f000 fb2f 	bl	80078a8 <__lshift>
 800724a:	46b0      	mov	r8, r6
 800724c:	4606      	mov	r6, r0
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	444b      	add	r3, r9
 8007258:	930a      	str	r3, [sp, #40]	; 0x28
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	9309      	str	r3, [sp, #36]	; 0x24
 8007262:	9b08      	ldr	r3, [sp, #32]
 8007264:	4621      	mov	r1, r4
 8007266:	3b01      	subs	r3, #1
 8007268:	4658      	mov	r0, fp
 800726a:	9304      	str	r3, [sp, #16]
 800726c:	f7ff fa68 	bl	8006740 <quorem>
 8007270:	4603      	mov	r3, r0
 8007272:	4641      	mov	r1, r8
 8007274:	3330      	adds	r3, #48	; 0x30
 8007276:	9006      	str	r0, [sp, #24]
 8007278:	4658      	mov	r0, fp
 800727a:	930b      	str	r3, [sp, #44]	; 0x2c
 800727c:	f000 fb84 	bl	8007988 <__mcmp>
 8007280:	4632      	mov	r2, r6
 8007282:	4681      	mov	r9, r0
 8007284:	4621      	mov	r1, r4
 8007286:	4628      	mov	r0, r5
 8007288:	f000 fb9a 	bl	80079c0 <__mdiff>
 800728c:	68c2      	ldr	r2, [r0, #12]
 800728e:	4607      	mov	r7, r0
 8007290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007292:	bb02      	cbnz	r2, 80072d6 <_dtoa_r+0xa7e>
 8007294:	4601      	mov	r1, r0
 8007296:	4658      	mov	r0, fp
 8007298:	f000 fb76 	bl	8007988 <__mcmp>
 800729c:	4602      	mov	r2, r0
 800729e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a0:	4639      	mov	r1, r7
 80072a2:	4628      	mov	r0, r5
 80072a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80072a8:	f000 f930 	bl	800750c <_Bfree>
 80072ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072b0:	9f08      	ldr	r7, [sp, #32]
 80072b2:	ea43 0102 	orr.w	r1, r3, r2
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	430b      	orrs	r3, r1
 80072ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072bc:	d10d      	bne.n	80072da <_dtoa_r+0xa82>
 80072be:	2b39      	cmp	r3, #57	; 0x39
 80072c0:	d029      	beq.n	8007316 <_dtoa_r+0xabe>
 80072c2:	f1b9 0f00 	cmp.w	r9, #0
 80072c6:	dd01      	ble.n	80072cc <_dtoa_r+0xa74>
 80072c8:	9b06      	ldr	r3, [sp, #24]
 80072ca:	3331      	adds	r3, #49	; 0x31
 80072cc:	9a04      	ldr	r2, [sp, #16]
 80072ce:	7013      	strb	r3, [r2, #0]
 80072d0:	e776      	b.n	80071c0 <_dtoa_r+0x968>
 80072d2:	4630      	mov	r0, r6
 80072d4:	e7b9      	b.n	800724a <_dtoa_r+0x9f2>
 80072d6:	2201      	movs	r2, #1
 80072d8:	e7e2      	b.n	80072a0 <_dtoa_r+0xa48>
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	db06      	blt.n	80072ee <_dtoa_r+0xa96>
 80072e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80072e2:	ea41 0909 	orr.w	r9, r1, r9
 80072e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072e8:	ea59 0101 	orrs.w	r1, r9, r1
 80072ec:	d120      	bne.n	8007330 <_dtoa_r+0xad8>
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	ddec      	ble.n	80072cc <_dtoa_r+0xa74>
 80072f2:	4659      	mov	r1, fp
 80072f4:	2201      	movs	r2, #1
 80072f6:	4628      	mov	r0, r5
 80072f8:	9308      	str	r3, [sp, #32]
 80072fa:	f000 fad5 	bl	80078a8 <__lshift>
 80072fe:	4621      	mov	r1, r4
 8007300:	4683      	mov	fp, r0
 8007302:	f000 fb41 	bl	8007988 <__mcmp>
 8007306:	2800      	cmp	r0, #0
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	dc02      	bgt.n	8007312 <_dtoa_r+0xaba>
 800730c:	d1de      	bne.n	80072cc <_dtoa_r+0xa74>
 800730e:	07da      	lsls	r2, r3, #31
 8007310:	d5dc      	bpl.n	80072cc <_dtoa_r+0xa74>
 8007312:	2b39      	cmp	r3, #57	; 0x39
 8007314:	d1d8      	bne.n	80072c8 <_dtoa_r+0xa70>
 8007316:	2339      	movs	r3, #57	; 0x39
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	7013      	strb	r3, [r2, #0]
 800731c:	463b      	mov	r3, r7
 800731e:	461f      	mov	r7, r3
 8007320:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007324:	3b01      	subs	r3, #1
 8007326:	2a39      	cmp	r2, #57	; 0x39
 8007328:	d050      	beq.n	80073cc <_dtoa_r+0xb74>
 800732a:	3201      	adds	r2, #1
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e747      	b.n	80071c0 <_dtoa_r+0x968>
 8007330:	2a00      	cmp	r2, #0
 8007332:	dd03      	ble.n	800733c <_dtoa_r+0xae4>
 8007334:	2b39      	cmp	r3, #57	; 0x39
 8007336:	d0ee      	beq.n	8007316 <_dtoa_r+0xabe>
 8007338:	3301      	adds	r3, #1
 800733a:	e7c7      	b.n	80072cc <_dtoa_r+0xa74>
 800733c:	9a08      	ldr	r2, [sp, #32]
 800733e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007340:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007344:	428a      	cmp	r2, r1
 8007346:	d02a      	beq.n	800739e <_dtoa_r+0xb46>
 8007348:	4659      	mov	r1, fp
 800734a:	2300      	movs	r3, #0
 800734c:	220a      	movs	r2, #10
 800734e:	4628      	mov	r0, r5
 8007350:	f000 f8fe 	bl	8007550 <__multadd>
 8007354:	45b0      	cmp	r8, r6
 8007356:	4683      	mov	fp, r0
 8007358:	f04f 0300 	mov.w	r3, #0
 800735c:	f04f 020a 	mov.w	r2, #10
 8007360:	4641      	mov	r1, r8
 8007362:	4628      	mov	r0, r5
 8007364:	d107      	bne.n	8007376 <_dtoa_r+0xb1e>
 8007366:	f000 f8f3 	bl	8007550 <__multadd>
 800736a:	4680      	mov	r8, r0
 800736c:	4606      	mov	r6, r0
 800736e:	9b08      	ldr	r3, [sp, #32]
 8007370:	3301      	adds	r3, #1
 8007372:	9308      	str	r3, [sp, #32]
 8007374:	e775      	b.n	8007262 <_dtoa_r+0xa0a>
 8007376:	f000 f8eb 	bl	8007550 <__multadd>
 800737a:	4631      	mov	r1, r6
 800737c:	4680      	mov	r8, r0
 800737e:	2300      	movs	r3, #0
 8007380:	220a      	movs	r2, #10
 8007382:	4628      	mov	r0, r5
 8007384:	f000 f8e4 	bl	8007550 <__multadd>
 8007388:	4606      	mov	r6, r0
 800738a:	e7f0      	b.n	800736e <_dtoa_r+0xb16>
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	bfcc      	ite	gt
 8007392:	464f      	movgt	r7, r9
 8007394:	2701      	movle	r7, #1
 8007396:	f04f 0800 	mov.w	r8, #0
 800739a:	9a03      	ldr	r2, [sp, #12]
 800739c:	4417      	add	r7, r2
 800739e:	4659      	mov	r1, fp
 80073a0:	2201      	movs	r2, #1
 80073a2:	4628      	mov	r0, r5
 80073a4:	9308      	str	r3, [sp, #32]
 80073a6:	f000 fa7f 	bl	80078a8 <__lshift>
 80073aa:	4621      	mov	r1, r4
 80073ac:	4683      	mov	fp, r0
 80073ae:	f000 faeb 	bl	8007988 <__mcmp>
 80073b2:	2800      	cmp	r0, #0
 80073b4:	dcb2      	bgt.n	800731c <_dtoa_r+0xac4>
 80073b6:	d102      	bne.n	80073be <_dtoa_r+0xb66>
 80073b8:	9b08      	ldr	r3, [sp, #32]
 80073ba:	07db      	lsls	r3, r3, #31
 80073bc:	d4ae      	bmi.n	800731c <_dtoa_r+0xac4>
 80073be:	463b      	mov	r3, r7
 80073c0:	461f      	mov	r7, r3
 80073c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073c6:	2a30      	cmp	r2, #48	; 0x30
 80073c8:	d0fa      	beq.n	80073c0 <_dtoa_r+0xb68>
 80073ca:	e6f9      	b.n	80071c0 <_dtoa_r+0x968>
 80073cc:	9a03      	ldr	r2, [sp, #12]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d1a5      	bne.n	800731e <_dtoa_r+0xac6>
 80073d2:	2331      	movs	r3, #49	; 0x31
 80073d4:	f10a 0a01 	add.w	sl, sl, #1
 80073d8:	e779      	b.n	80072ce <_dtoa_r+0xa76>
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <_dtoa_r+0xbd4>)
 80073dc:	f7ff baa8 	b.w	8006930 <_dtoa_r+0xd8>
 80073e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f47f aa81 	bne.w	80068ea <_dtoa_r+0x92>
 80073e8:	4b11      	ldr	r3, [pc, #68]	; (8007430 <_dtoa_r+0xbd8>)
 80073ea:	f7ff baa1 	b.w	8006930 <_dtoa_r+0xd8>
 80073ee:	f1b9 0f00 	cmp.w	r9, #0
 80073f2:	dc03      	bgt.n	80073fc <_dtoa_r+0xba4>
 80073f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	f73f aecb 	bgt.w	8007192 <_dtoa_r+0x93a>
 80073fc:	9f03      	ldr	r7, [sp, #12]
 80073fe:	4621      	mov	r1, r4
 8007400:	4658      	mov	r0, fp
 8007402:	f7ff f99d 	bl	8006740 <quorem>
 8007406:	9a03      	ldr	r2, [sp, #12]
 8007408:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800740c:	f807 3b01 	strb.w	r3, [r7], #1
 8007410:	1aba      	subs	r2, r7, r2
 8007412:	4591      	cmp	r9, r2
 8007414:	ddba      	ble.n	800738c <_dtoa_r+0xb34>
 8007416:	4659      	mov	r1, fp
 8007418:	2300      	movs	r3, #0
 800741a:	220a      	movs	r2, #10
 800741c:	4628      	mov	r0, r5
 800741e:	f000 f897 	bl	8007550 <__multadd>
 8007422:	4683      	mov	fp, r0
 8007424:	e7eb      	b.n	80073fe <_dtoa_r+0xba6>
 8007426:	bf00      	nop
 8007428:	08008e7c 	.word	0x08008e7c
 800742c:	08008d40 	.word	0x08008d40
 8007430:	08008e14 	.word	0x08008e14

08007434 <fiprintf>:
 8007434:	b40e      	push	{r1, r2, r3}
 8007436:	b503      	push	{r0, r1, lr}
 8007438:	4601      	mov	r1, r0
 800743a:	ab03      	add	r3, sp, #12
 800743c:	4805      	ldr	r0, [pc, #20]	; (8007454 <fiprintf+0x20>)
 800743e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007442:	6800      	ldr	r0, [r0, #0]
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	f000 fe17 	bl	8008078 <_vfiprintf_r>
 800744a:	b002      	add	sp, #8
 800744c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007450:	b003      	add	sp, #12
 8007452:	4770      	bx	lr
 8007454:	20000060 	.word	0x20000060

08007458 <_localeconv_r>:
 8007458:	4800      	ldr	r0, [pc, #0]	; (800745c <_localeconv_r+0x4>)
 800745a:	4770      	bx	lr
 800745c:	200001b4 	.word	0x200001b4

08007460 <malloc>:
 8007460:	4b02      	ldr	r3, [pc, #8]	; (800746c <malloc+0xc>)
 8007462:	4601      	mov	r1, r0
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	f000 bc0f 	b.w	8007c88 <_malloc_r>
 800746a:	bf00      	nop
 800746c:	20000060 	.word	0x20000060

08007470 <memchr>:
 8007470:	4603      	mov	r3, r0
 8007472:	b510      	push	{r4, lr}
 8007474:	b2c9      	uxtb	r1, r1
 8007476:	4402      	add	r2, r0
 8007478:	4293      	cmp	r3, r2
 800747a:	4618      	mov	r0, r3
 800747c:	d101      	bne.n	8007482 <memchr+0x12>
 800747e:	2000      	movs	r0, #0
 8007480:	e003      	b.n	800748a <memchr+0x1a>
 8007482:	7804      	ldrb	r4, [r0, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	428c      	cmp	r4, r1
 8007488:	d1f6      	bne.n	8007478 <memchr+0x8>
 800748a:	bd10      	pop	{r4, pc}

0800748c <_Balloc>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	b976      	cbnz	r6, 80074b4 <_Balloc+0x28>
 8007496:	2010      	movs	r0, #16
 8007498:	f7ff ffe2 	bl	8007460 <malloc>
 800749c:	4602      	mov	r2, r0
 800749e:	6260      	str	r0, [r4, #36]	; 0x24
 80074a0:	b920      	cbnz	r0, 80074ac <_Balloc+0x20>
 80074a2:	2166      	movs	r1, #102	; 0x66
 80074a4:	4b17      	ldr	r3, [pc, #92]	; (8007504 <_Balloc+0x78>)
 80074a6:	4818      	ldr	r0, [pc, #96]	; (8007508 <_Balloc+0x7c>)
 80074a8:	f7ff f92c 	bl	8006704 <__assert_func>
 80074ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074b0:	6006      	str	r6, [r0, #0]
 80074b2:	60c6      	str	r6, [r0, #12]
 80074b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80074b6:	68f3      	ldr	r3, [r6, #12]
 80074b8:	b183      	cbz	r3, 80074dc <_Balloc+0x50>
 80074ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80074c2:	b9b8      	cbnz	r0, 80074f4 <_Balloc+0x68>
 80074c4:	2101      	movs	r1, #1
 80074c6:	fa01 f605 	lsl.w	r6, r1, r5
 80074ca:	1d72      	adds	r2, r6, #5
 80074cc:	4620      	mov	r0, r4
 80074ce:	0092      	lsls	r2, r2, #2
 80074d0:	f000 fb5e 	bl	8007b90 <_calloc_r>
 80074d4:	b160      	cbz	r0, 80074f0 <_Balloc+0x64>
 80074d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80074da:	e00e      	b.n	80074fa <_Balloc+0x6e>
 80074dc:	2221      	movs	r2, #33	; 0x21
 80074de:	2104      	movs	r1, #4
 80074e0:	4620      	mov	r0, r4
 80074e2:	f000 fb55 	bl	8007b90 <_calloc_r>
 80074e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074e8:	60f0      	str	r0, [r6, #12]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e4      	bne.n	80074ba <_Balloc+0x2e>
 80074f0:	2000      	movs	r0, #0
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	6802      	ldr	r2, [r0, #0]
 80074f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80074fa:	2300      	movs	r3, #0
 80074fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007500:	e7f7      	b.n	80074f2 <_Balloc+0x66>
 8007502:	bf00      	nop
 8007504:	08008d64 	.word	0x08008d64
 8007508:	08008e8d 	.word	0x08008e8d

0800750c <_Bfree>:
 800750c:	b570      	push	{r4, r5, r6, lr}
 800750e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007510:	4605      	mov	r5, r0
 8007512:	460c      	mov	r4, r1
 8007514:	b976      	cbnz	r6, 8007534 <_Bfree+0x28>
 8007516:	2010      	movs	r0, #16
 8007518:	f7ff ffa2 	bl	8007460 <malloc>
 800751c:	4602      	mov	r2, r0
 800751e:	6268      	str	r0, [r5, #36]	; 0x24
 8007520:	b920      	cbnz	r0, 800752c <_Bfree+0x20>
 8007522:	218a      	movs	r1, #138	; 0x8a
 8007524:	4b08      	ldr	r3, [pc, #32]	; (8007548 <_Bfree+0x3c>)
 8007526:	4809      	ldr	r0, [pc, #36]	; (800754c <_Bfree+0x40>)
 8007528:	f7ff f8ec 	bl	8006704 <__assert_func>
 800752c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007530:	6006      	str	r6, [r0, #0]
 8007532:	60c6      	str	r6, [r0, #12]
 8007534:	b13c      	cbz	r4, 8007546 <_Bfree+0x3a>
 8007536:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007538:	6862      	ldr	r2, [r4, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007540:	6021      	str	r1, [r4, #0]
 8007542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007546:	bd70      	pop	{r4, r5, r6, pc}
 8007548:	08008d64 	.word	0x08008d64
 800754c:	08008e8d 	.word	0x08008e8d

08007550 <__multadd>:
 8007550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007554:	4607      	mov	r7, r0
 8007556:	460c      	mov	r4, r1
 8007558:	461e      	mov	r6, r3
 800755a:	2000      	movs	r0, #0
 800755c:	690d      	ldr	r5, [r1, #16]
 800755e:	f101 0c14 	add.w	ip, r1, #20
 8007562:	f8dc 3000 	ldr.w	r3, [ip]
 8007566:	3001      	adds	r0, #1
 8007568:	b299      	uxth	r1, r3
 800756a:	fb02 6101 	mla	r1, r2, r1, r6
 800756e:	0c1e      	lsrs	r6, r3, #16
 8007570:	0c0b      	lsrs	r3, r1, #16
 8007572:	fb02 3306 	mla	r3, r2, r6, r3
 8007576:	b289      	uxth	r1, r1
 8007578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800757c:	4285      	cmp	r5, r0
 800757e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007582:	f84c 1b04 	str.w	r1, [ip], #4
 8007586:	dcec      	bgt.n	8007562 <__multadd+0x12>
 8007588:	b30e      	cbz	r6, 80075ce <__multadd+0x7e>
 800758a:	68a3      	ldr	r3, [r4, #8]
 800758c:	42ab      	cmp	r3, r5
 800758e:	dc19      	bgt.n	80075c4 <__multadd+0x74>
 8007590:	6861      	ldr	r1, [r4, #4]
 8007592:	4638      	mov	r0, r7
 8007594:	3101      	adds	r1, #1
 8007596:	f7ff ff79 	bl	800748c <_Balloc>
 800759a:	4680      	mov	r8, r0
 800759c:	b928      	cbnz	r0, 80075aa <__multadd+0x5a>
 800759e:	4602      	mov	r2, r0
 80075a0:	21b5      	movs	r1, #181	; 0xb5
 80075a2:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <__multadd+0x84>)
 80075a4:	480c      	ldr	r0, [pc, #48]	; (80075d8 <__multadd+0x88>)
 80075a6:	f7ff f8ad 	bl	8006704 <__assert_func>
 80075aa:	6922      	ldr	r2, [r4, #16]
 80075ac:	f104 010c 	add.w	r1, r4, #12
 80075b0:	3202      	adds	r2, #2
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	300c      	adds	r0, #12
 80075b6:	f7fe fb9d 	bl	8005cf4 <memcpy>
 80075ba:	4621      	mov	r1, r4
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff ffa5 	bl	800750c <_Bfree>
 80075c2:	4644      	mov	r4, r8
 80075c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80075c8:	3501      	adds	r5, #1
 80075ca:	615e      	str	r6, [r3, #20]
 80075cc:	6125      	str	r5, [r4, #16]
 80075ce:	4620      	mov	r0, r4
 80075d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d4:	08008e7c 	.word	0x08008e7c
 80075d8:	08008e8d 	.word	0x08008e8d

080075dc <__hi0bits>:
 80075dc:	0c02      	lsrs	r2, r0, #16
 80075de:	0412      	lsls	r2, r2, #16
 80075e0:	4603      	mov	r3, r0
 80075e2:	b9ca      	cbnz	r2, 8007618 <__hi0bits+0x3c>
 80075e4:	0403      	lsls	r3, r0, #16
 80075e6:	2010      	movs	r0, #16
 80075e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80075ec:	bf04      	itt	eq
 80075ee:	021b      	lsleq	r3, r3, #8
 80075f0:	3008      	addeq	r0, #8
 80075f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80075f6:	bf04      	itt	eq
 80075f8:	011b      	lsleq	r3, r3, #4
 80075fa:	3004      	addeq	r0, #4
 80075fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007600:	bf04      	itt	eq
 8007602:	009b      	lsleq	r3, r3, #2
 8007604:	3002      	addeq	r0, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	db05      	blt.n	8007616 <__hi0bits+0x3a>
 800760a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800760e:	f100 0001 	add.w	r0, r0, #1
 8007612:	bf08      	it	eq
 8007614:	2020      	moveq	r0, #32
 8007616:	4770      	bx	lr
 8007618:	2000      	movs	r0, #0
 800761a:	e7e5      	b.n	80075e8 <__hi0bits+0xc>

0800761c <__lo0bits>:
 800761c:	6803      	ldr	r3, [r0, #0]
 800761e:	4602      	mov	r2, r0
 8007620:	f013 0007 	ands.w	r0, r3, #7
 8007624:	d00b      	beq.n	800763e <__lo0bits+0x22>
 8007626:	07d9      	lsls	r1, r3, #31
 8007628:	d421      	bmi.n	800766e <__lo0bits+0x52>
 800762a:	0798      	lsls	r0, r3, #30
 800762c:	bf49      	itett	mi
 800762e:	085b      	lsrmi	r3, r3, #1
 8007630:	089b      	lsrpl	r3, r3, #2
 8007632:	2001      	movmi	r0, #1
 8007634:	6013      	strmi	r3, [r2, #0]
 8007636:	bf5c      	itt	pl
 8007638:	2002      	movpl	r0, #2
 800763a:	6013      	strpl	r3, [r2, #0]
 800763c:	4770      	bx	lr
 800763e:	b299      	uxth	r1, r3
 8007640:	b909      	cbnz	r1, 8007646 <__lo0bits+0x2a>
 8007642:	2010      	movs	r0, #16
 8007644:	0c1b      	lsrs	r3, r3, #16
 8007646:	b2d9      	uxtb	r1, r3
 8007648:	b909      	cbnz	r1, 800764e <__lo0bits+0x32>
 800764a:	3008      	adds	r0, #8
 800764c:	0a1b      	lsrs	r3, r3, #8
 800764e:	0719      	lsls	r1, r3, #28
 8007650:	bf04      	itt	eq
 8007652:	091b      	lsreq	r3, r3, #4
 8007654:	3004      	addeq	r0, #4
 8007656:	0799      	lsls	r1, r3, #30
 8007658:	bf04      	itt	eq
 800765a:	089b      	lsreq	r3, r3, #2
 800765c:	3002      	addeq	r0, #2
 800765e:	07d9      	lsls	r1, r3, #31
 8007660:	d403      	bmi.n	800766a <__lo0bits+0x4e>
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	f100 0001 	add.w	r0, r0, #1
 8007668:	d003      	beq.n	8007672 <__lo0bits+0x56>
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	4770      	bx	lr
 800766e:	2000      	movs	r0, #0
 8007670:	4770      	bx	lr
 8007672:	2020      	movs	r0, #32
 8007674:	4770      	bx	lr
	...

08007678 <__i2b>:
 8007678:	b510      	push	{r4, lr}
 800767a:	460c      	mov	r4, r1
 800767c:	2101      	movs	r1, #1
 800767e:	f7ff ff05 	bl	800748c <_Balloc>
 8007682:	4602      	mov	r2, r0
 8007684:	b928      	cbnz	r0, 8007692 <__i2b+0x1a>
 8007686:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800768a:	4b04      	ldr	r3, [pc, #16]	; (800769c <__i2b+0x24>)
 800768c:	4804      	ldr	r0, [pc, #16]	; (80076a0 <__i2b+0x28>)
 800768e:	f7ff f839 	bl	8006704 <__assert_func>
 8007692:	2301      	movs	r3, #1
 8007694:	6144      	str	r4, [r0, #20]
 8007696:	6103      	str	r3, [r0, #16]
 8007698:	bd10      	pop	{r4, pc}
 800769a:	bf00      	nop
 800769c:	08008e7c 	.word	0x08008e7c
 80076a0:	08008e8d 	.word	0x08008e8d

080076a4 <__multiply>:
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	4691      	mov	r9, r2
 80076aa:	690a      	ldr	r2, [r1, #16]
 80076ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076b0:	460c      	mov	r4, r1
 80076b2:	429a      	cmp	r2, r3
 80076b4:	bfbe      	ittt	lt
 80076b6:	460b      	movlt	r3, r1
 80076b8:	464c      	movlt	r4, r9
 80076ba:	4699      	movlt	r9, r3
 80076bc:	6927      	ldr	r7, [r4, #16]
 80076be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076c2:	68a3      	ldr	r3, [r4, #8]
 80076c4:	6861      	ldr	r1, [r4, #4]
 80076c6:	eb07 060a 	add.w	r6, r7, sl
 80076ca:	42b3      	cmp	r3, r6
 80076cc:	b085      	sub	sp, #20
 80076ce:	bfb8      	it	lt
 80076d0:	3101      	addlt	r1, #1
 80076d2:	f7ff fedb 	bl	800748c <_Balloc>
 80076d6:	b930      	cbnz	r0, 80076e6 <__multiply+0x42>
 80076d8:	4602      	mov	r2, r0
 80076da:	f240 115d 	movw	r1, #349	; 0x15d
 80076de:	4b43      	ldr	r3, [pc, #268]	; (80077ec <__multiply+0x148>)
 80076e0:	4843      	ldr	r0, [pc, #268]	; (80077f0 <__multiply+0x14c>)
 80076e2:	f7ff f80f 	bl	8006704 <__assert_func>
 80076e6:	f100 0514 	add.w	r5, r0, #20
 80076ea:	462b      	mov	r3, r5
 80076ec:	2200      	movs	r2, #0
 80076ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80076f2:	4543      	cmp	r3, r8
 80076f4:	d321      	bcc.n	800773a <__multiply+0x96>
 80076f6:	f104 0314 	add.w	r3, r4, #20
 80076fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80076fe:	f109 0314 	add.w	r3, r9, #20
 8007702:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007706:	9202      	str	r2, [sp, #8]
 8007708:	1b3a      	subs	r2, r7, r4
 800770a:	3a15      	subs	r2, #21
 800770c:	f022 0203 	bic.w	r2, r2, #3
 8007710:	3204      	adds	r2, #4
 8007712:	f104 0115 	add.w	r1, r4, #21
 8007716:	428f      	cmp	r7, r1
 8007718:	bf38      	it	cc
 800771a:	2204      	movcc	r2, #4
 800771c:	9201      	str	r2, [sp, #4]
 800771e:	9a02      	ldr	r2, [sp, #8]
 8007720:	9303      	str	r3, [sp, #12]
 8007722:	429a      	cmp	r2, r3
 8007724:	d80c      	bhi.n	8007740 <__multiply+0x9c>
 8007726:	2e00      	cmp	r6, #0
 8007728:	dd03      	ble.n	8007732 <__multiply+0x8e>
 800772a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800772e:	2b00      	cmp	r3, #0
 8007730:	d059      	beq.n	80077e6 <__multiply+0x142>
 8007732:	6106      	str	r6, [r0, #16]
 8007734:	b005      	add	sp, #20
 8007736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773a:	f843 2b04 	str.w	r2, [r3], #4
 800773e:	e7d8      	b.n	80076f2 <__multiply+0x4e>
 8007740:	f8b3 a000 	ldrh.w	sl, [r3]
 8007744:	f1ba 0f00 	cmp.w	sl, #0
 8007748:	d023      	beq.n	8007792 <__multiply+0xee>
 800774a:	46a9      	mov	r9, r5
 800774c:	f04f 0c00 	mov.w	ip, #0
 8007750:	f104 0e14 	add.w	lr, r4, #20
 8007754:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007758:	f8d9 1000 	ldr.w	r1, [r9]
 800775c:	fa1f fb82 	uxth.w	fp, r2
 8007760:	b289      	uxth	r1, r1
 8007762:	fb0a 110b 	mla	r1, sl, fp, r1
 8007766:	4461      	add	r1, ip
 8007768:	f8d9 c000 	ldr.w	ip, [r9]
 800776c:	0c12      	lsrs	r2, r2, #16
 800776e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007772:	fb0a c202 	mla	r2, sl, r2, ip
 8007776:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800777a:	b289      	uxth	r1, r1
 800777c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007780:	4577      	cmp	r7, lr
 8007782:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007786:	f849 1b04 	str.w	r1, [r9], #4
 800778a:	d8e3      	bhi.n	8007754 <__multiply+0xb0>
 800778c:	9a01      	ldr	r2, [sp, #4]
 800778e:	f845 c002 	str.w	ip, [r5, r2]
 8007792:	9a03      	ldr	r2, [sp, #12]
 8007794:	3304      	adds	r3, #4
 8007796:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800779a:	f1b9 0f00 	cmp.w	r9, #0
 800779e:	d020      	beq.n	80077e2 <__multiply+0x13e>
 80077a0:	46ae      	mov	lr, r5
 80077a2:	f04f 0a00 	mov.w	sl, #0
 80077a6:	6829      	ldr	r1, [r5, #0]
 80077a8:	f104 0c14 	add.w	ip, r4, #20
 80077ac:	f8bc b000 	ldrh.w	fp, [ip]
 80077b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077b4:	b289      	uxth	r1, r1
 80077b6:	fb09 220b 	mla	r2, r9, fp, r2
 80077ba:	4492      	add	sl, r2
 80077bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077c0:	f84e 1b04 	str.w	r1, [lr], #4
 80077c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077c8:	f8be 1000 	ldrh.w	r1, [lr]
 80077cc:	0c12      	lsrs	r2, r2, #16
 80077ce:	fb09 1102 	mla	r1, r9, r2, r1
 80077d2:	4567      	cmp	r7, ip
 80077d4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80077dc:	d8e6      	bhi.n	80077ac <__multiply+0x108>
 80077de:	9a01      	ldr	r2, [sp, #4]
 80077e0:	50a9      	str	r1, [r5, r2]
 80077e2:	3504      	adds	r5, #4
 80077e4:	e79b      	b.n	800771e <__multiply+0x7a>
 80077e6:	3e01      	subs	r6, #1
 80077e8:	e79d      	b.n	8007726 <__multiply+0x82>
 80077ea:	bf00      	nop
 80077ec:	08008e7c 	.word	0x08008e7c
 80077f0:	08008e8d 	.word	0x08008e8d

080077f4 <__pow5mult>:
 80077f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f8:	4615      	mov	r5, r2
 80077fa:	f012 0203 	ands.w	r2, r2, #3
 80077fe:	4606      	mov	r6, r0
 8007800:	460f      	mov	r7, r1
 8007802:	d007      	beq.n	8007814 <__pow5mult+0x20>
 8007804:	4c25      	ldr	r4, [pc, #148]	; (800789c <__pow5mult+0xa8>)
 8007806:	3a01      	subs	r2, #1
 8007808:	2300      	movs	r3, #0
 800780a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800780e:	f7ff fe9f 	bl	8007550 <__multadd>
 8007812:	4607      	mov	r7, r0
 8007814:	10ad      	asrs	r5, r5, #2
 8007816:	d03d      	beq.n	8007894 <__pow5mult+0xa0>
 8007818:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800781a:	b97c      	cbnz	r4, 800783c <__pow5mult+0x48>
 800781c:	2010      	movs	r0, #16
 800781e:	f7ff fe1f 	bl	8007460 <malloc>
 8007822:	4602      	mov	r2, r0
 8007824:	6270      	str	r0, [r6, #36]	; 0x24
 8007826:	b928      	cbnz	r0, 8007834 <__pow5mult+0x40>
 8007828:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800782c:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <__pow5mult+0xac>)
 800782e:	481d      	ldr	r0, [pc, #116]	; (80078a4 <__pow5mult+0xb0>)
 8007830:	f7fe ff68 	bl	8006704 <__assert_func>
 8007834:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007838:	6004      	str	r4, [r0, #0]
 800783a:	60c4      	str	r4, [r0, #12]
 800783c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007840:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007844:	b94c      	cbnz	r4, 800785a <__pow5mult+0x66>
 8007846:	f240 2171 	movw	r1, #625	; 0x271
 800784a:	4630      	mov	r0, r6
 800784c:	f7ff ff14 	bl	8007678 <__i2b>
 8007850:	2300      	movs	r3, #0
 8007852:	4604      	mov	r4, r0
 8007854:	f8c8 0008 	str.w	r0, [r8, #8]
 8007858:	6003      	str	r3, [r0, #0]
 800785a:	f04f 0900 	mov.w	r9, #0
 800785e:	07eb      	lsls	r3, r5, #31
 8007860:	d50a      	bpl.n	8007878 <__pow5mult+0x84>
 8007862:	4639      	mov	r1, r7
 8007864:	4622      	mov	r2, r4
 8007866:	4630      	mov	r0, r6
 8007868:	f7ff ff1c 	bl	80076a4 <__multiply>
 800786c:	4680      	mov	r8, r0
 800786e:	4639      	mov	r1, r7
 8007870:	4630      	mov	r0, r6
 8007872:	f7ff fe4b 	bl	800750c <_Bfree>
 8007876:	4647      	mov	r7, r8
 8007878:	106d      	asrs	r5, r5, #1
 800787a:	d00b      	beq.n	8007894 <__pow5mult+0xa0>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	b938      	cbnz	r0, 8007890 <__pow5mult+0x9c>
 8007880:	4622      	mov	r2, r4
 8007882:	4621      	mov	r1, r4
 8007884:	4630      	mov	r0, r6
 8007886:	f7ff ff0d 	bl	80076a4 <__multiply>
 800788a:	6020      	str	r0, [r4, #0]
 800788c:	f8c0 9000 	str.w	r9, [r0]
 8007890:	4604      	mov	r4, r0
 8007892:	e7e4      	b.n	800785e <__pow5mult+0x6a>
 8007894:	4638      	mov	r0, r7
 8007896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789a:	bf00      	nop
 800789c:	08008fe0 	.word	0x08008fe0
 80078a0:	08008d64 	.word	0x08008d64
 80078a4:	08008e8d 	.word	0x08008e8d

080078a8 <__lshift>:
 80078a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	4607      	mov	r7, r0
 80078b0:	4691      	mov	r9, r2
 80078b2:	6923      	ldr	r3, [r4, #16]
 80078b4:	6849      	ldr	r1, [r1, #4]
 80078b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078ba:	68a3      	ldr	r3, [r4, #8]
 80078bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078c0:	f108 0601 	add.w	r6, r8, #1
 80078c4:	42b3      	cmp	r3, r6
 80078c6:	db0b      	blt.n	80078e0 <__lshift+0x38>
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7ff fddf 	bl	800748c <_Balloc>
 80078ce:	4605      	mov	r5, r0
 80078d0:	b948      	cbnz	r0, 80078e6 <__lshift+0x3e>
 80078d2:	4602      	mov	r2, r0
 80078d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80078d8:	4b29      	ldr	r3, [pc, #164]	; (8007980 <__lshift+0xd8>)
 80078da:	482a      	ldr	r0, [pc, #168]	; (8007984 <__lshift+0xdc>)
 80078dc:	f7fe ff12 	bl	8006704 <__assert_func>
 80078e0:	3101      	adds	r1, #1
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	e7ee      	b.n	80078c4 <__lshift+0x1c>
 80078e6:	2300      	movs	r3, #0
 80078e8:	f100 0114 	add.w	r1, r0, #20
 80078ec:	f100 0210 	add.w	r2, r0, #16
 80078f0:	4618      	mov	r0, r3
 80078f2:	4553      	cmp	r3, sl
 80078f4:	db37      	blt.n	8007966 <__lshift+0xbe>
 80078f6:	6920      	ldr	r0, [r4, #16]
 80078f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078fc:	f104 0314 	add.w	r3, r4, #20
 8007900:	f019 091f 	ands.w	r9, r9, #31
 8007904:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007908:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800790c:	d02f      	beq.n	800796e <__lshift+0xc6>
 800790e:	468a      	mov	sl, r1
 8007910:	f04f 0c00 	mov.w	ip, #0
 8007914:	f1c9 0e20 	rsb	lr, r9, #32
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	fa02 f209 	lsl.w	r2, r2, r9
 800791e:	ea42 020c 	orr.w	r2, r2, ip
 8007922:	f84a 2b04 	str.w	r2, [sl], #4
 8007926:	f853 2b04 	ldr.w	r2, [r3], #4
 800792a:	4298      	cmp	r0, r3
 800792c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007930:	d8f2      	bhi.n	8007918 <__lshift+0x70>
 8007932:	1b03      	subs	r3, r0, r4
 8007934:	3b15      	subs	r3, #21
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	3304      	adds	r3, #4
 800793c:	f104 0215 	add.w	r2, r4, #21
 8007940:	4290      	cmp	r0, r2
 8007942:	bf38      	it	cc
 8007944:	2304      	movcc	r3, #4
 8007946:	f841 c003 	str.w	ip, [r1, r3]
 800794a:	f1bc 0f00 	cmp.w	ip, #0
 800794e:	d001      	beq.n	8007954 <__lshift+0xac>
 8007950:	f108 0602 	add.w	r6, r8, #2
 8007954:	3e01      	subs	r6, #1
 8007956:	4638      	mov	r0, r7
 8007958:	4621      	mov	r1, r4
 800795a:	612e      	str	r6, [r5, #16]
 800795c:	f7ff fdd6 	bl	800750c <_Bfree>
 8007960:	4628      	mov	r0, r5
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	f842 0f04 	str.w	r0, [r2, #4]!
 800796a:	3301      	adds	r3, #1
 800796c:	e7c1      	b.n	80078f2 <__lshift+0x4a>
 800796e:	3904      	subs	r1, #4
 8007970:	f853 2b04 	ldr.w	r2, [r3], #4
 8007974:	4298      	cmp	r0, r3
 8007976:	f841 2f04 	str.w	r2, [r1, #4]!
 800797a:	d8f9      	bhi.n	8007970 <__lshift+0xc8>
 800797c:	e7ea      	b.n	8007954 <__lshift+0xac>
 800797e:	bf00      	nop
 8007980:	08008e7c 	.word	0x08008e7c
 8007984:	08008e8d 	.word	0x08008e8d

08007988 <__mcmp>:
 8007988:	4603      	mov	r3, r0
 800798a:	690a      	ldr	r2, [r1, #16]
 800798c:	6900      	ldr	r0, [r0, #16]
 800798e:	b530      	push	{r4, r5, lr}
 8007990:	1a80      	subs	r0, r0, r2
 8007992:	d10d      	bne.n	80079b0 <__mcmp+0x28>
 8007994:	3314      	adds	r3, #20
 8007996:	3114      	adds	r1, #20
 8007998:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800799c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079a8:	4295      	cmp	r5, r2
 80079aa:	d002      	beq.n	80079b2 <__mcmp+0x2a>
 80079ac:	d304      	bcc.n	80079b8 <__mcmp+0x30>
 80079ae:	2001      	movs	r0, #1
 80079b0:	bd30      	pop	{r4, r5, pc}
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	d3f4      	bcc.n	80079a0 <__mcmp+0x18>
 80079b6:	e7fb      	b.n	80079b0 <__mcmp+0x28>
 80079b8:	f04f 30ff 	mov.w	r0, #4294967295
 80079bc:	e7f8      	b.n	80079b0 <__mcmp+0x28>
	...

080079c0 <__mdiff>:
 80079c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	460d      	mov	r5, r1
 80079c6:	4607      	mov	r7, r0
 80079c8:	4611      	mov	r1, r2
 80079ca:	4628      	mov	r0, r5
 80079cc:	4614      	mov	r4, r2
 80079ce:	f7ff ffdb 	bl	8007988 <__mcmp>
 80079d2:	1e06      	subs	r6, r0, #0
 80079d4:	d111      	bne.n	80079fa <__mdiff+0x3a>
 80079d6:	4631      	mov	r1, r6
 80079d8:	4638      	mov	r0, r7
 80079da:	f7ff fd57 	bl	800748c <_Balloc>
 80079de:	4602      	mov	r2, r0
 80079e0:	b928      	cbnz	r0, 80079ee <__mdiff+0x2e>
 80079e2:	f240 2132 	movw	r1, #562	; 0x232
 80079e6:	4b3a      	ldr	r3, [pc, #232]	; (8007ad0 <__mdiff+0x110>)
 80079e8:	483a      	ldr	r0, [pc, #232]	; (8007ad4 <__mdiff+0x114>)
 80079ea:	f7fe fe8b 	bl	8006704 <__assert_func>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80079f4:	4610      	mov	r0, r2
 80079f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	bfa4      	itt	ge
 80079fc:	4623      	movge	r3, r4
 80079fe:	462c      	movge	r4, r5
 8007a00:	4638      	mov	r0, r7
 8007a02:	6861      	ldr	r1, [r4, #4]
 8007a04:	bfa6      	itte	ge
 8007a06:	461d      	movge	r5, r3
 8007a08:	2600      	movge	r6, #0
 8007a0a:	2601      	movlt	r6, #1
 8007a0c:	f7ff fd3e 	bl	800748c <_Balloc>
 8007a10:	4602      	mov	r2, r0
 8007a12:	b918      	cbnz	r0, 8007a1c <__mdiff+0x5c>
 8007a14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a18:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <__mdiff+0x110>)
 8007a1a:	e7e5      	b.n	80079e8 <__mdiff+0x28>
 8007a1c:	f102 0814 	add.w	r8, r2, #20
 8007a20:	46c2      	mov	sl, r8
 8007a22:	f04f 0c00 	mov.w	ip, #0
 8007a26:	6927      	ldr	r7, [r4, #16]
 8007a28:	60c6      	str	r6, [r0, #12]
 8007a2a:	692e      	ldr	r6, [r5, #16]
 8007a2c:	f104 0014 	add.w	r0, r4, #20
 8007a30:	f105 0914 	add.w	r9, r5, #20
 8007a34:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007a38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a3c:	3410      	adds	r4, #16
 8007a3e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007a42:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a46:	fa1f f18b 	uxth.w	r1, fp
 8007a4a:	448c      	add	ip, r1
 8007a4c:	b299      	uxth	r1, r3
 8007a4e:	0c1b      	lsrs	r3, r3, #16
 8007a50:	ebac 0101 	sub.w	r1, ip, r1
 8007a54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a58:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007a5c:	b289      	uxth	r1, r1
 8007a5e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007a62:	454e      	cmp	r6, r9
 8007a64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007a68:	f84a 3b04 	str.w	r3, [sl], #4
 8007a6c:	d8e7      	bhi.n	8007a3e <__mdiff+0x7e>
 8007a6e:	1b73      	subs	r3, r6, r5
 8007a70:	3b15      	subs	r3, #21
 8007a72:	f023 0303 	bic.w	r3, r3, #3
 8007a76:	3515      	adds	r5, #21
 8007a78:	3304      	adds	r3, #4
 8007a7a:	42ae      	cmp	r6, r5
 8007a7c:	bf38      	it	cc
 8007a7e:	2304      	movcc	r3, #4
 8007a80:	4418      	add	r0, r3
 8007a82:	4443      	add	r3, r8
 8007a84:	461e      	mov	r6, r3
 8007a86:	4605      	mov	r5, r0
 8007a88:	4575      	cmp	r5, lr
 8007a8a:	d30e      	bcc.n	8007aaa <__mdiff+0xea>
 8007a8c:	f10e 0103 	add.w	r1, lr, #3
 8007a90:	1a09      	subs	r1, r1, r0
 8007a92:	f021 0103 	bic.w	r1, r1, #3
 8007a96:	3803      	subs	r0, #3
 8007a98:	4586      	cmp	lr, r0
 8007a9a:	bf38      	it	cc
 8007a9c:	2100      	movcc	r1, #0
 8007a9e:	4419      	add	r1, r3
 8007aa0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007aa4:	b18b      	cbz	r3, 8007aca <__mdiff+0x10a>
 8007aa6:	6117      	str	r7, [r2, #16]
 8007aa8:	e7a4      	b.n	80079f4 <__mdiff+0x34>
 8007aaa:	f855 8b04 	ldr.w	r8, [r5], #4
 8007aae:	fa1f f188 	uxth.w	r1, r8
 8007ab2:	4461      	add	r1, ip
 8007ab4:	140c      	asrs	r4, r1, #16
 8007ab6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007aba:	b289      	uxth	r1, r1
 8007abc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ac0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007ac4:	f846 1b04 	str.w	r1, [r6], #4
 8007ac8:	e7de      	b.n	8007a88 <__mdiff+0xc8>
 8007aca:	3f01      	subs	r7, #1
 8007acc:	e7e8      	b.n	8007aa0 <__mdiff+0xe0>
 8007ace:	bf00      	nop
 8007ad0:	08008e7c 	.word	0x08008e7c
 8007ad4:	08008e8d 	.word	0x08008e8d

08007ad8 <__d2b>:
 8007ad8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007adc:	2101      	movs	r1, #1
 8007ade:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007ae2:	4690      	mov	r8, r2
 8007ae4:	461d      	mov	r5, r3
 8007ae6:	f7ff fcd1 	bl	800748c <_Balloc>
 8007aea:	4604      	mov	r4, r0
 8007aec:	b930      	cbnz	r0, 8007afc <__d2b+0x24>
 8007aee:	4602      	mov	r2, r0
 8007af0:	f240 310a 	movw	r1, #778	; 0x30a
 8007af4:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <__d2b+0xb0>)
 8007af6:	4825      	ldr	r0, [pc, #148]	; (8007b8c <__d2b+0xb4>)
 8007af8:	f7fe fe04 	bl	8006704 <__assert_func>
 8007afc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007b00:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007b04:	bb2d      	cbnz	r5, 8007b52 <__d2b+0x7a>
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	f1b8 0300 	subs.w	r3, r8, #0
 8007b0c:	d026      	beq.n	8007b5c <__d2b+0x84>
 8007b0e:	4668      	mov	r0, sp
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	f7ff fd83 	bl	800761c <__lo0bits>
 8007b16:	9900      	ldr	r1, [sp, #0]
 8007b18:	b1f0      	cbz	r0, 8007b58 <__d2b+0x80>
 8007b1a:	9a01      	ldr	r2, [sp, #4]
 8007b1c:	f1c0 0320 	rsb	r3, r0, #32
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	430b      	orrs	r3, r1
 8007b26:	40c2      	lsrs	r2, r0
 8007b28:	6163      	str	r3, [r4, #20]
 8007b2a:	9201      	str	r2, [sp, #4]
 8007b2c:	9b01      	ldr	r3, [sp, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	bf14      	ite	ne
 8007b32:	2102      	movne	r1, #2
 8007b34:	2101      	moveq	r1, #1
 8007b36:	61a3      	str	r3, [r4, #24]
 8007b38:	6121      	str	r1, [r4, #16]
 8007b3a:	b1c5      	cbz	r5, 8007b6e <__d2b+0x96>
 8007b3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b40:	4405      	add	r5, r0
 8007b42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b46:	603d      	str	r5, [r7, #0]
 8007b48:	6030      	str	r0, [r6, #0]
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	b002      	add	sp, #8
 8007b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b56:	e7d6      	b.n	8007b06 <__d2b+0x2e>
 8007b58:	6161      	str	r1, [r4, #20]
 8007b5a:	e7e7      	b.n	8007b2c <__d2b+0x54>
 8007b5c:	a801      	add	r0, sp, #4
 8007b5e:	f7ff fd5d 	bl	800761c <__lo0bits>
 8007b62:	2101      	movs	r1, #1
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	6121      	str	r1, [r4, #16]
 8007b68:	6163      	str	r3, [r4, #20]
 8007b6a:	3020      	adds	r0, #32
 8007b6c:	e7e5      	b.n	8007b3a <__d2b+0x62>
 8007b6e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007b72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b76:	6038      	str	r0, [r7, #0]
 8007b78:	6918      	ldr	r0, [r3, #16]
 8007b7a:	f7ff fd2f 	bl	80075dc <__hi0bits>
 8007b7e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007b82:	6031      	str	r1, [r6, #0]
 8007b84:	e7e1      	b.n	8007b4a <__d2b+0x72>
 8007b86:	bf00      	nop
 8007b88:	08008e7c 	.word	0x08008e7c
 8007b8c:	08008e8d 	.word	0x08008e8d

08007b90 <_calloc_r>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	fba1 5402 	umull	r5, r4, r1, r2
 8007b96:	b934      	cbnz	r4, 8007ba6 <_calloc_r+0x16>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f000 f875 	bl	8007c88 <_malloc_r>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	b928      	cbnz	r0, 8007bae <_calloc_r+0x1e>
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	bd70      	pop	{r4, r5, r6, pc}
 8007ba6:	220c      	movs	r2, #12
 8007ba8:	2600      	movs	r6, #0
 8007baa:	6002      	str	r2, [r0, #0]
 8007bac:	e7f9      	b.n	8007ba2 <_calloc_r+0x12>
 8007bae:	462a      	mov	r2, r5
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f7fe f8ad 	bl	8005d10 <memset>
 8007bb6:	e7f4      	b.n	8007ba2 <_calloc_r+0x12>

08007bb8 <_free_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4605      	mov	r5, r0
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d040      	beq.n	8007c42 <_free_r+0x8a>
 8007bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc4:	1f0c      	subs	r4, r1, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfb8      	it	lt
 8007bca:	18e4      	addlt	r4, r4, r3
 8007bcc:	f000 fea4 	bl	8008918 <__malloc_lock>
 8007bd0:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <_free_r+0x8c>)
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	b933      	cbnz	r3, 8007be4 <_free_r+0x2c>
 8007bd6:	6063      	str	r3, [r4, #4]
 8007bd8:	6014      	str	r4, [r2, #0]
 8007bda:	4628      	mov	r0, r5
 8007bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be0:	f000 bea0 	b.w	8008924 <__malloc_unlock>
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	d908      	bls.n	8007bfa <_free_r+0x42>
 8007be8:	6820      	ldr	r0, [r4, #0]
 8007bea:	1821      	adds	r1, r4, r0
 8007bec:	428b      	cmp	r3, r1
 8007bee:	bf01      	itttt	eq
 8007bf0:	6819      	ldreq	r1, [r3, #0]
 8007bf2:	685b      	ldreq	r3, [r3, #4]
 8007bf4:	1809      	addeq	r1, r1, r0
 8007bf6:	6021      	streq	r1, [r4, #0]
 8007bf8:	e7ed      	b.n	8007bd6 <_free_r+0x1e>
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	b10b      	cbz	r3, 8007c04 <_free_r+0x4c>
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	d9fa      	bls.n	8007bfa <_free_r+0x42>
 8007c04:	6811      	ldr	r1, [r2, #0]
 8007c06:	1850      	adds	r0, r2, r1
 8007c08:	42a0      	cmp	r0, r4
 8007c0a:	d10b      	bne.n	8007c24 <_free_r+0x6c>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	4401      	add	r1, r0
 8007c10:	1850      	adds	r0, r2, r1
 8007c12:	4283      	cmp	r3, r0
 8007c14:	6011      	str	r1, [r2, #0]
 8007c16:	d1e0      	bne.n	8007bda <_free_r+0x22>
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4401      	add	r1, r0
 8007c1e:	6011      	str	r1, [r2, #0]
 8007c20:	6053      	str	r3, [r2, #4]
 8007c22:	e7da      	b.n	8007bda <_free_r+0x22>
 8007c24:	d902      	bls.n	8007c2c <_free_r+0x74>
 8007c26:	230c      	movs	r3, #12
 8007c28:	602b      	str	r3, [r5, #0]
 8007c2a:	e7d6      	b.n	8007bda <_free_r+0x22>
 8007c2c:	6820      	ldr	r0, [r4, #0]
 8007c2e:	1821      	adds	r1, r4, r0
 8007c30:	428b      	cmp	r3, r1
 8007c32:	bf01      	itttt	eq
 8007c34:	6819      	ldreq	r1, [r3, #0]
 8007c36:	685b      	ldreq	r3, [r3, #4]
 8007c38:	1809      	addeq	r1, r1, r0
 8007c3a:	6021      	streq	r1, [r4, #0]
 8007c3c:	6063      	str	r3, [r4, #4]
 8007c3e:	6054      	str	r4, [r2, #4]
 8007c40:	e7cb      	b.n	8007bda <_free_r+0x22>
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	20000480 	.word	0x20000480

08007c48 <sbrk_aligned>:
 8007c48:	b570      	push	{r4, r5, r6, lr}
 8007c4a:	4e0e      	ldr	r6, [pc, #56]	; (8007c84 <sbrk_aligned+0x3c>)
 8007c4c:	460c      	mov	r4, r1
 8007c4e:	6831      	ldr	r1, [r6, #0]
 8007c50:	4605      	mov	r5, r0
 8007c52:	b911      	cbnz	r1, 8007c5a <sbrk_aligned+0x12>
 8007c54:	f000 fb40 	bl	80082d8 <_sbrk_r>
 8007c58:	6030      	str	r0, [r6, #0]
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f000 fb3b 	bl	80082d8 <_sbrk_r>
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d00a      	beq.n	8007c7c <sbrk_aligned+0x34>
 8007c66:	1cc4      	adds	r4, r0, #3
 8007c68:	f024 0403 	bic.w	r4, r4, #3
 8007c6c:	42a0      	cmp	r0, r4
 8007c6e:	d007      	beq.n	8007c80 <sbrk_aligned+0x38>
 8007c70:	1a21      	subs	r1, r4, r0
 8007c72:	4628      	mov	r0, r5
 8007c74:	f000 fb30 	bl	80082d8 <_sbrk_r>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	d101      	bne.n	8007c80 <sbrk_aligned+0x38>
 8007c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8007c80:	4620      	mov	r0, r4
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	20000484 	.word	0x20000484

08007c88 <_malloc_r>:
 8007c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	1ccd      	adds	r5, r1, #3
 8007c8e:	f025 0503 	bic.w	r5, r5, #3
 8007c92:	3508      	adds	r5, #8
 8007c94:	2d0c      	cmp	r5, #12
 8007c96:	bf38      	it	cc
 8007c98:	250c      	movcc	r5, #12
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	db01      	blt.n	8007ca4 <_malloc_r+0x1c>
 8007ca0:	42a9      	cmp	r1, r5
 8007ca2:	d905      	bls.n	8007cb0 <_malloc_r+0x28>
 8007ca4:	230c      	movs	r3, #12
 8007ca6:	2600      	movs	r6, #0
 8007ca8:	603b      	str	r3, [r7, #0]
 8007caa:	4630      	mov	r0, r6
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	4e2e      	ldr	r6, [pc, #184]	; (8007d6c <_malloc_r+0xe4>)
 8007cb2:	f000 fe31 	bl	8008918 <__malloc_lock>
 8007cb6:	6833      	ldr	r3, [r6, #0]
 8007cb8:	461c      	mov	r4, r3
 8007cba:	bb34      	cbnz	r4, 8007d0a <_malloc_r+0x82>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f7ff ffc2 	bl	8007c48 <sbrk_aligned>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	d14d      	bne.n	8007d66 <_malloc_r+0xde>
 8007cca:	6834      	ldr	r4, [r6, #0]
 8007ccc:	4626      	mov	r6, r4
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	d140      	bne.n	8007d54 <_malloc_r+0xcc>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	eb04 0803 	add.w	r8, r4, r3
 8007cdc:	f000 fafc 	bl	80082d8 <_sbrk_r>
 8007ce0:	4580      	cmp	r8, r0
 8007ce2:	d13a      	bne.n	8007d5a <_malloc_r+0xd2>
 8007ce4:	6821      	ldr	r1, [r4, #0]
 8007ce6:	3503      	adds	r5, #3
 8007ce8:	1a6d      	subs	r5, r5, r1
 8007cea:	f025 0503 	bic.w	r5, r5, #3
 8007cee:	3508      	adds	r5, #8
 8007cf0:	2d0c      	cmp	r5, #12
 8007cf2:	bf38      	it	cc
 8007cf4:	250c      	movcc	r5, #12
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	f7ff ffa5 	bl	8007c48 <sbrk_aligned>
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d02b      	beq.n	8007d5a <_malloc_r+0xd2>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	442b      	add	r3, r5
 8007d06:	6023      	str	r3, [r4, #0]
 8007d08:	e00e      	b.n	8007d28 <_malloc_r+0xa0>
 8007d0a:	6822      	ldr	r2, [r4, #0]
 8007d0c:	1b52      	subs	r2, r2, r5
 8007d0e:	d41e      	bmi.n	8007d4e <_malloc_r+0xc6>
 8007d10:	2a0b      	cmp	r2, #11
 8007d12:	d916      	bls.n	8007d42 <_malloc_r+0xba>
 8007d14:	1961      	adds	r1, r4, r5
 8007d16:	42a3      	cmp	r3, r4
 8007d18:	6025      	str	r5, [r4, #0]
 8007d1a:	bf18      	it	ne
 8007d1c:	6059      	strne	r1, [r3, #4]
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	bf08      	it	eq
 8007d22:	6031      	streq	r1, [r6, #0]
 8007d24:	5162      	str	r2, [r4, r5]
 8007d26:	604b      	str	r3, [r1, #4]
 8007d28:	4638      	mov	r0, r7
 8007d2a:	f104 060b 	add.w	r6, r4, #11
 8007d2e:	f000 fdf9 	bl	8008924 <__malloc_unlock>
 8007d32:	f026 0607 	bic.w	r6, r6, #7
 8007d36:	1d23      	adds	r3, r4, #4
 8007d38:	1af2      	subs	r2, r6, r3
 8007d3a:	d0b6      	beq.n	8007caa <_malloc_r+0x22>
 8007d3c:	1b9b      	subs	r3, r3, r6
 8007d3e:	50a3      	str	r3, [r4, r2]
 8007d40:	e7b3      	b.n	8007caa <_malloc_r+0x22>
 8007d42:	6862      	ldr	r2, [r4, #4]
 8007d44:	42a3      	cmp	r3, r4
 8007d46:	bf0c      	ite	eq
 8007d48:	6032      	streq	r2, [r6, #0]
 8007d4a:	605a      	strne	r2, [r3, #4]
 8007d4c:	e7ec      	b.n	8007d28 <_malloc_r+0xa0>
 8007d4e:	4623      	mov	r3, r4
 8007d50:	6864      	ldr	r4, [r4, #4]
 8007d52:	e7b2      	b.n	8007cba <_malloc_r+0x32>
 8007d54:	4634      	mov	r4, r6
 8007d56:	6876      	ldr	r6, [r6, #4]
 8007d58:	e7b9      	b.n	8007cce <_malloc_r+0x46>
 8007d5a:	230c      	movs	r3, #12
 8007d5c:	4638      	mov	r0, r7
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	f000 fde0 	bl	8008924 <__malloc_unlock>
 8007d64:	e7a1      	b.n	8007caa <_malloc_r+0x22>
 8007d66:	6025      	str	r5, [r4, #0]
 8007d68:	e7de      	b.n	8007d28 <_malloc_r+0xa0>
 8007d6a:	bf00      	nop
 8007d6c:	20000480 	.word	0x20000480

08007d70 <__ssputs_r>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	688e      	ldr	r6, [r1, #8]
 8007d76:	4682      	mov	sl, r0
 8007d78:	429e      	cmp	r6, r3
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4690      	mov	r8, r2
 8007d7e:	461f      	mov	r7, r3
 8007d80:	d838      	bhi.n	8007df4 <__ssputs_r+0x84>
 8007d82:	898a      	ldrh	r2, [r1, #12]
 8007d84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d88:	d032      	beq.n	8007df0 <__ssputs_r+0x80>
 8007d8a:	6825      	ldr	r5, [r4, #0]
 8007d8c:	6909      	ldr	r1, [r1, #16]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	eba5 0901 	sub.w	r9, r5, r1
 8007d94:	6965      	ldr	r5, [r4, #20]
 8007d96:	444b      	add	r3, r9
 8007d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007da0:	106d      	asrs	r5, r5, #1
 8007da2:	429d      	cmp	r5, r3
 8007da4:	bf38      	it	cc
 8007da6:	461d      	movcc	r5, r3
 8007da8:	0553      	lsls	r3, r2, #21
 8007daa:	d531      	bpl.n	8007e10 <__ssputs_r+0xa0>
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7ff ff6b 	bl	8007c88 <_malloc_r>
 8007db2:	4606      	mov	r6, r0
 8007db4:	b950      	cbnz	r0, 8007dcc <__ssputs_r+0x5c>
 8007db6:	230c      	movs	r3, #12
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	f8ca 3000 	str.w	r3, [sl]
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dcc:	464a      	mov	r2, r9
 8007dce:	6921      	ldr	r1, [r4, #16]
 8007dd0:	f7fd ff90 	bl	8005cf4 <memcpy>
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	6126      	str	r6, [r4, #16]
 8007de2:	444e      	add	r6, r9
 8007de4:	6026      	str	r6, [r4, #0]
 8007de6:	463e      	mov	r6, r7
 8007de8:	6165      	str	r5, [r4, #20]
 8007dea:	eba5 0509 	sub.w	r5, r5, r9
 8007dee:	60a5      	str	r5, [r4, #8]
 8007df0:	42be      	cmp	r6, r7
 8007df2:	d900      	bls.n	8007df6 <__ssputs_r+0x86>
 8007df4:	463e      	mov	r6, r7
 8007df6:	4632      	mov	r2, r6
 8007df8:	4641      	mov	r1, r8
 8007dfa:	6820      	ldr	r0, [r4, #0]
 8007dfc:	f000 fd72 	bl	80088e4 <memmove>
 8007e00:	68a3      	ldr	r3, [r4, #8]
 8007e02:	2000      	movs	r0, #0
 8007e04:	1b9b      	subs	r3, r3, r6
 8007e06:	60a3      	str	r3, [r4, #8]
 8007e08:	6823      	ldr	r3, [r4, #0]
 8007e0a:	4433      	add	r3, r6
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	e7db      	b.n	8007dc8 <__ssputs_r+0x58>
 8007e10:	462a      	mov	r2, r5
 8007e12:	f000 fd8d 	bl	8008930 <_realloc_r>
 8007e16:	4606      	mov	r6, r0
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d1e1      	bne.n	8007de0 <__ssputs_r+0x70>
 8007e1c:	4650      	mov	r0, sl
 8007e1e:	6921      	ldr	r1, [r4, #16]
 8007e20:	f7ff feca 	bl	8007bb8 <_free_r>
 8007e24:	e7c7      	b.n	8007db6 <__ssputs_r+0x46>
	...

08007e28 <_svfiprintf_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	4698      	mov	r8, r3
 8007e2e:	898b      	ldrh	r3, [r1, #12]
 8007e30:	4607      	mov	r7, r0
 8007e32:	061b      	lsls	r3, r3, #24
 8007e34:	460d      	mov	r5, r1
 8007e36:	4614      	mov	r4, r2
 8007e38:	b09d      	sub	sp, #116	; 0x74
 8007e3a:	d50e      	bpl.n	8007e5a <_svfiprintf_r+0x32>
 8007e3c:	690b      	ldr	r3, [r1, #16]
 8007e3e:	b963      	cbnz	r3, 8007e5a <_svfiprintf_r+0x32>
 8007e40:	2140      	movs	r1, #64	; 0x40
 8007e42:	f7ff ff21 	bl	8007c88 <_malloc_r>
 8007e46:	6028      	str	r0, [r5, #0]
 8007e48:	6128      	str	r0, [r5, #16]
 8007e4a:	b920      	cbnz	r0, 8007e56 <_svfiprintf_r+0x2e>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	e0d1      	b.n	8007ffa <_svfiprintf_r+0x1d2>
 8007e56:	2340      	movs	r3, #64	; 0x40
 8007e58:	616b      	str	r3, [r5, #20]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5e:	2320      	movs	r3, #32
 8007e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e64:	2330      	movs	r3, #48	; 0x30
 8007e66:	f04f 0901 	mov.w	r9, #1
 8007e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008014 <_svfiprintf_r+0x1ec>
 8007e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e76:	4623      	mov	r3, r4
 8007e78:	469a      	mov	sl, r3
 8007e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e7e:	b10a      	cbz	r2, 8007e84 <_svfiprintf_r+0x5c>
 8007e80:	2a25      	cmp	r2, #37	; 0x25
 8007e82:	d1f9      	bne.n	8007e78 <_svfiprintf_r+0x50>
 8007e84:	ebba 0b04 	subs.w	fp, sl, r4
 8007e88:	d00b      	beq.n	8007ea2 <_svfiprintf_r+0x7a>
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff ff6d 	bl	8007d70 <__ssputs_r>
 8007e96:	3001      	adds	r0, #1
 8007e98:	f000 80aa 	beq.w	8007ff0 <_svfiprintf_r+0x1c8>
 8007e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9e:	445a      	add	r2, fp
 8007ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8007ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 80a2 	beq.w	8007ff0 <_svfiprintf_r+0x1c8>
 8007eac:	2300      	movs	r3, #0
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb6:	f10a 0a01 	add.w	sl, sl, #1
 8007eba:	9304      	str	r3, [sp, #16]
 8007ebc:	9307      	str	r3, [sp, #28]
 8007ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ec4:	4654      	mov	r4, sl
 8007ec6:	2205      	movs	r2, #5
 8007ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ecc:	4851      	ldr	r0, [pc, #324]	; (8008014 <_svfiprintf_r+0x1ec>)
 8007ece:	f7ff facf 	bl	8007470 <memchr>
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	b9d8      	cbnz	r0, 8007f0e <_svfiprintf_r+0xe6>
 8007ed6:	06d0      	lsls	r0, r2, #27
 8007ed8:	bf44      	itt	mi
 8007eda:	2320      	movmi	r3, #32
 8007edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee0:	0711      	lsls	r1, r2, #28
 8007ee2:	bf44      	itt	mi
 8007ee4:	232b      	movmi	r3, #43	; 0x2b
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eea:	f89a 3000 	ldrb.w	r3, [sl]
 8007eee:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef0:	d015      	beq.n	8007f1e <_svfiprintf_r+0xf6>
 8007ef2:	4654      	mov	r4, sl
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f04f 0c0a 	mov.w	ip, #10
 8007efa:	9a07      	ldr	r2, [sp, #28]
 8007efc:	4621      	mov	r1, r4
 8007efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f02:	3b30      	subs	r3, #48	; 0x30
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d94e      	bls.n	8007fa6 <_svfiprintf_r+0x17e>
 8007f08:	b1b0      	cbz	r0, 8007f38 <_svfiprintf_r+0x110>
 8007f0a:	9207      	str	r2, [sp, #28]
 8007f0c:	e014      	b.n	8007f38 <_svfiprintf_r+0x110>
 8007f0e:	eba0 0308 	sub.w	r3, r0, r8
 8007f12:	fa09 f303 	lsl.w	r3, r9, r3
 8007f16:	4313      	orrs	r3, r2
 8007f18:	46a2      	mov	sl, r4
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	e7d2      	b.n	8007ec4 <_svfiprintf_r+0x9c>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	1d19      	adds	r1, r3, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	9103      	str	r1, [sp, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfbb      	ittet	lt
 8007f2a:	425b      	neglt	r3, r3
 8007f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f30:	9307      	strge	r3, [sp, #28]
 8007f32:	9307      	strlt	r3, [sp, #28]
 8007f34:	bfb8      	it	lt
 8007f36:	9204      	strlt	r2, [sp, #16]
 8007f38:	7823      	ldrb	r3, [r4, #0]
 8007f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f3c:	d10c      	bne.n	8007f58 <_svfiprintf_r+0x130>
 8007f3e:	7863      	ldrb	r3, [r4, #1]
 8007f40:	2b2a      	cmp	r3, #42	; 0x2a
 8007f42:	d135      	bne.n	8007fb0 <_svfiprintf_r+0x188>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	3402      	adds	r4, #2
 8007f48:	1d1a      	adds	r2, r3, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	9203      	str	r2, [sp, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfb8      	it	lt
 8007f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008018 <_svfiprintf_r+0x1f0>
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	4650      	mov	r0, sl
 8007f60:	7821      	ldrb	r1, [r4, #0]
 8007f62:	f7ff fa85 	bl	8007470 <memchr>
 8007f66:	b140      	cbz	r0, 8007f7a <_svfiprintf_r+0x152>
 8007f68:	2340      	movs	r3, #64	; 0x40
 8007f6a:	eba0 000a 	sub.w	r0, r0, sl
 8007f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	3401      	adds	r4, #1
 8007f76:	4303      	orrs	r3, r0
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7e:	2206      	movs	r2, #6
 8007f80:	4826      	ldr	r0, [pc, #152]	; (800801c <_svfiprintf_r+0x1f4>)
 8007f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f86:	f7ff fa73 	bl	8007470 <memchr>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d038      	beq.n	8008000 <_svfiprintf_r+0x1d8>
 8007f8e:	4b24      	ldr	r3, [pc, #144]	; (8008020 <_svfiprintf_r+0x1f8>)
 8007f90:	bb1b      	cbnz	r3, 8007fda <_svfiprintf_r+0x1b2>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	3307      	adds	r3, #7
 8007f96:	f023 0307 	bic.w	r3, r3, #7
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	9303      	str	r3, [sp, #12]
 8007f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa0:	4433      	add	r3, r6
 8007fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa4:	e767      	b.n	8007e76 <_svfiprintf_r+0x4e>
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	2001      	movs	r0, #1
 8007faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fae:	e7a5      	b.n	8007efc <_svfiprintf_r+0xd4>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f04f 0c0a 	mov.w	ip, #10
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	3401      	adds	r4, #1
 8007fba:	9305      	str	r3, [sp, #20]
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc2:	3a30      	subs	r2, #48	; 0x30
 8007fc4:	2a09      	cmp	r2, #9
 8007fc6:	d903      	bls.n	8007fd0 <_svfiprintf_r+0x1a8>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0c5      	beq.n	8007f58 <_svfiprintf_r+0x130>
 8007fcc:	9105      	str	r1, [sp, #20]
 8007fce:	e7c3      	b.n	8007f58 <_svfiprintf_r+0x130>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd8:	e7f0      	b.n	8007fbc <_svfiprintf_r+0x194>
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	4b10      	ldr	r3, [pc, #64]	; (8008024 <_svfiprintf_r+0x1fc>)
 8007fe4:	a904      	add	r1, sp, #16
 8007fe6:	f7fd ff39 	bl	8005e5c <_printf_float>
 8007fea:	1c42      	adds	r2, r0, #1
 8007fec:	4606      	mov	r6, r0
 8007fee:	d1d6      	bne.n	8007f9e <_svfiprintf_r+0x176>
 8007ff0:	89ab      	ldrh	r3, [r5, #12]
 8007ff2:	065b      	lsls	r3, r3, #25
 8007ff4:	f53f af2c 	bmi.w	8007e50 <_svfiprintf_r+0x28>
 8007ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ffa:	b01d      	add	sp, #116	; 0x74
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	ab03      	add	r3, sp, #12
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	462a      	mov	r2, r5
 8008006:	4638      	mov	r0, r7
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <_svfiprintf_r+0x1fc>)
 800800a:	a904      	add	r1, sp, #16
 800800c:	f7fe f9c2 	bl	8006394 <_printf_i>
 8008010:	e7eb      	b.n	8007fea <_svfiprintf_r+0x1c2>
 8008012:	bf00      	nop
 8008014:	08008fec 	.word	0x08008fec
 8008018:	08008ff2 	.word	0x08008ff2
 800801c:	08008ff6 	.word	0x08008ff6
 8008020:	08005e5d 	.word	0x08005e5d
 8008024:	08007d71 	.word	0x08007d71

08008028 <__sfputc_r>:
 8008028:	6893      	ldr	r3, [r2, #8]
 800802a:	b410      	push	{r4}
 800802c:	3b01      	subs	r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	6093      	str	r3, [r2, #8]
 8008032:	da07      	bge.n	8008044 <__sfputc_r+0x1c>
 8008034:	6994      	ldr	r4, [r2, #24]
 8008036:	42a3      	cmp	r3, r4
 8008038:	db01      	blt.n	800803e <__sfputc_r+0x16>
 800803a:	290a      	cmp	r1, #10
 800803c:	d102      	bne.n	8008044 <__sfputc_r+0x1c>
 800803e:	bc10      	pop	{r4}
 8008040:	f000 b95a 	b.w	80082f8 <__swbuf_r>
 8008044:	6813      	ldr	r3, [r2, #0]
 8008046:	1c58      	adds	r0, r3, #1
 8008048:	6010      	str	r0, [r2, #0]
 800804a:	7019      	strb	r1, [r3, #0]
 800804c:	4608      	mov	r0, r1
 800804e:	bc10      	pop	{r4}
 8008050:	4770      	bx	lr

08008052 <__sfputs_r>:
 8008052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	4614      	mov	r4, r2
 800805a:	18d5      	adds	r5, r2, r3
 800805c:	42ac      	cmp	r4, r5
 800805e:	d101      	bne.n	8008064 <__sfputs_r+0x12>
 8008060:	2000      	movs	r0, #0
 8008062:	e007      	b.n	8008074 <__sfputs_r+0x22>
 8008064:	463a      	mov	r2, r7
 8008066:	4630      	mov	r0, r6
 8008068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800806c:	f7ff ffdc 	bl	8008028 <__sfputc_r>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d1f3      	bne.n	800805c <__sfputs_r+0xa>
 8008074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008078 <_vfiprintf_r>:
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	460d      	mov	r5, r1
 800807e:	4614      	mov	r4, r2
 8008080:	4698      	mov	r8, r3
 8008082:	4606      	mov	r6, r0
 8008084:	b09d      	sub	sp, #116	; 0x74
 8008086:	b118      	cbz	r0, 8008090 <_vfiprintf_r+0x18>
 8008088:	6983      	ldr	r3, [r0, #24]
 800808a:	b90b      	cbnz	r3, 8008090 <_vfiprintf_r+0x18>
 800808c:	f000 fb12 	bl	80086b4 <__sinit>
 8008090:	4b89      	ldr	r3, [pc, #548]	; (80082b8 <_vfiprintf_r+0x240>)
 8008092:	429d      	cmp	r5, r3
 8008094:	d11b      	bne.n	80080ce <_vfiprintf_r+0x56>
 8008096:	6875      	ldr	r5, [r6, #4]
 8008098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800809a:	07d9      	lsls	r1, r3, #31
 800809c:	d405      	bmi.n	80080aa <_vfiprintf_r+0x32>
 800809e:	89ab      	ldrh	r3, [r5, #12]
 80080a0:	059a      	lsls	r2, r3, #22
 80080a2:	d402      	bmi.n	80080aa <_vfiprintf_r+0x32>
 80080a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a6:	f000 fba3 	bl	80087f0 <__retarget_lock_acquire_recursive>
 80080aa:	89ab      	ldrh	r3, [r5, #12]
 80080ac:	071b      	lsls	r3, r3, #28
 80080ae:	d501      	bpl.n	80080b4 <_vfiprintf_r+0x3c>
 80080b0:	692b      	ldr	r3, [r5, #16]
 80080b2:	b9eb      	cbnz	r3, 80080f0 <_vfiprintf_r+0x78>
 80080b4:	4629      	mov	r1, r5
 80080b6:	4630      	mov	r0, r6
 80080b8:	f000 f970 	bl	800839c <__swsetup_r>
 80080bc:	b1c0      	cbz	r0, 80080f0 <_vfiprintf_r+0x78>
 80080be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080c0:	07dc      	lsls	r4, r3, #31
 80080c2:	d50e      	bpl.n	80080e2 <_vfiprintf_r+0x6a>
 80080c4:	f04f 30ff 	mov.w	r0, #4294967295
 80080c8:	b01d      	add	sp, #116	; 0x74
 80080ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ce:	4b7b      	ldr	r3, [pc, #492]	; (80082bc <_vfiprintf_r+0x244>)
 80080d0:	429d      	cmp	r5, r3
 80080d2:	d101      	bne.n	80080d8 <_vfiprintf_r+0x60>
 80080d4:	68b5      	ldr	r5, [r6, #8]
 80080d6:	e7df      	b.n	8008098 <_vfiprintf_r+0x20>
 80080d8:	4b79      	ldr	r3, [pc, #484]	; (80082c0 <_vfiprintf_r+0x248>)
 80080da:	429d      	cmp	r5, r3
 80080dc:	bf08      	it	eq
 80080de:	68f5      	ldreq	r5, [r6, #12]
 80080e0:	e7da      	b.n	8008098 <_vfiprintf_r+0x20>
 80080e2:	89ab      	ldrh	r3, [r5, #12]
 80080e4:	0598      	lsls	r0, r3, #22
 80080e6:	d4ed      	bmi.n	80080c4 <_vfiprintf_r+0x4c>
 80080e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ea:	f000 fb82 	bl	80087f2 <__retarget_lock_release_recursive>
 80080ee:	e7e9      	b.n	80080c4 <_vfiprintf_r+0x4c>
 80080f0:	2300      	movs	r3, #0
 80080f2:	9309      	str	r3, [sp, #36]	; 0x24
 80080f4:	2320      	movs	r3, #32
 80080f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080fa:	2330      	movs	r3, #48	; 0x30
 80080fc:	f04f 0901 	mov.w	r9, #1
 8008100:	f8cd 800c 	str.w	r8, [sp, #12]
 8008104:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80082c4 <_vfiprintf_r+0x24c>
 8008108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800810c:	4623      	mov	r3, r4
 800810e:	469a      	mov	sl, r3
 8008110:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008114:	b10a      	cbz	r2, 800811a <_vfiprintf_r+0xa2>
 8008116:	2a25      	cmp	r2, #37	; 0x25
 8008118:	d1f9      	bne.n	800810e <_vfiprintf_r+0x96>
 800811a:	ebba 0b04 	subs.w	fp, sl, r4
 800811e:	d00b      	beq.n	8008138 <_vfiprintf_r+0xc0>
 8008120:	465b      	mov	r3, fp
 8008122:	4622      	mov	r2, r4
 8008124:	4629      	mov	r1, r5
 8008126:	4630      	mov	r0, r6
 8008128:	f7ff ff93 	bl	8008052 <__sfputs_r>
 800812c:	3001      	adds	r0, #1
 800812e:	f000 80aa 	beq.w	8008286 <_vfiprintf_r+0x20e>
 8008132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008134:	445a      	add	r2, fp
 8008136:	9209      	str	r2, [sp, #36]	; 0x24
 8008138:	f89a 3000 	ldrb.w	r3, [sl]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80a2 	beq.w	8008286 <_vfiprintf_r+0x20e>
 8008142:	2300      	movs	r3, #0
 8008144:	f04f 32ff 	mov.w	r2, #4294967295
 8008148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800814c:	f10a 0a01 	add.w	sl, sl, #1
 8008150:	9304      	str	r3, [sp, #16]
 8008152:	9307      	str	r3, [sp, #28]
 8008154:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008158:	931a      	str	r3, [sp, #104]	; 0x68
 800815a:	4654      	mov	r4, sl
 800815c:	2205      	movs	r2, #5
 800815e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008162:	4858      	ldr	r0, [pc, #352]	; (80082c4 <_vfiprintf_r+0x24c>)
 8008164:	f7ff f984 	bl	8007470 <memchr>
 8008168:	9a04      	ldr	r2, [sp, #16]
 800816a:	b9d8      	cbnz	r0, 80081a4 <_vfiprintf_r+0x12c>
 800816c:	06d1      	lsls	r1, r2, #27
 800816e:	bf44      	itt	mi
 8008170:	2320      	movmi	r3, #32
 8008172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008176:	0713      	lsls	r3, r2, #28
 8008178:	bf44      	itt	mi
 800817a:	232b      	movmi	r3, #43	; 0x2b
 800817c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008180:	f89a 3000 	ldrb.w	r3, [sl]
 8008184:	2b2a      	cmp	r3, #42	; 0x2a
 8008186:	d015      	beq.n	80081b4 <_vfiprintf_r+0x13c>
 8008188:	4654      	mov	r4, sl
 800818a:	2000      	movs	r0, #0
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	9a07      	ldr	r2, [sp, #28]
 8008192:	4621      	mov	r1, r4
 8008194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008198:	3b30      	subs	r3, #48	; 0x30
 800819a:	2b09      	cmp	r3, #9
 800819c:	d94e      	bls.n	800823c <_vfiprintf_r+0x1c4>
 800819e:	b1b0      	cbz	r0, 80081ce <_vfiprintf_r+0x156>
 80081a0:	9207      	str	r2, [sp, #28]
 80081a2:	e014      	b.n	80081ce <_vfiprintf_r+0x156>
 80081a4:	eba0 0308 	sub.w	r3, r0, r8
 80081a8:	fa09 f303 	lsl.w	r3, r9, r3
 80081ac:	4313      	orrs	r3, r2
 80081ae:	46a2      	mov	sl, r4
 80081b0:	9304      	str	r3, [sp, #16]
 80081b2:	e7d2      	b.n	800815a <_vfiprintf_r+0xe2>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	1d19      	adds	r1, r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	9103      	str	r1, [sp, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bfbb      	ittet	lt
 80081c0:	425b      	neglt	r3, r3
 80081c2:	f042 0202 	orrlt.w	r2, r2, #2
 80081c6:	9307      	strge	r3, [sp, #28]
 80081c8:	9307      	strlt	r3, [sp, #28]
 80081ca:	bfb8      	it	lt
 80081cc:	9204      	strlt	r2, [sp, #16]
 80081ce:	7823      	ldrb	r3, [r4, #0]
 80081d0:	2b2e      	cmp	r3, #46	; 0x2e
 80081d2:	d10c      	bne.n	80081ee <_vfiprintf_r+0x176>
 80081d4:	7863      	ldrb	r3, [r4, #1]
 80081d6:	2b2a      	cmp	r3, #42	; 0x2a
 80081d8:	d135      	bne.n	8008246 <_vfiprintf_r+0x1ce>
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	3402      	adds	r4, #2
 80081de:	1d1a      	adds	r2, r3, #4
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	9203      	str	r2, [sp, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	bfb8      	it	lt
 80081e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80081ec:	9305      	str	r3, [sp, #20]
 80081ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80082c8 <_vfiprintf_r+0x250>
 80081f2:	2203      	movs	r2, #3
 80081f4:	4650      	mov	r0, sl
 80081f6:	7821      	ldrb	r1, [r4, #0]
 80081f8:	f7ff f93a 	bl	8007470 <memchr>
 80081fc:	b140      	cbz	r0, 8008210 <_vfiprintf_r+0x198>
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	eba0 000a 	sub.w	r0, r0, sl
 8008204:	fa03 f000 	lsl.w	r0, r3, r0
 8008208:	9b04      	ldr	r3, [sp, #16]
 800820a:	3401      	adds	r4, #1
 800820c:	4303      	orrs	r3, r0
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008214:	2206      	movs	r2, #6
 8008216:	482d      	ldr	r0, [pc, #180]	; (80082cc <_vfiprintf_r+0x254>)
 8008218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800821c:	f7ff f928 	bl	8007470 <memchr>
 8008220:	2800      	cmp	r0, #0
 8008222:	d03f      	beq.n	80082a4 <_vfiprintf_r+0x22c>
 8008224:	4b2a      	ldr	r3, [pc, #168]	; (80082d0 <_vfiprintf_r+0x258>)
 8008226:	bb1b      	cbnz	r3, 8008270 <_vfiprintf_r+0x1f8>
 8008228:	9b03      	ldr	r3, [sp, #12]
 800822a:	3307      	adds	r3, #7
 800822c:	f023 0307 	bic.w	r3, r3, #7
 8008230:	3308      	adds	r3, #8
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008236:	443b      	add	r3, r7
 8008238:	9309      	str	r3, [sp, #36]	; 0x24
 800823a:	e767      	b.n	800810c <_vfiprintf_r+0x94>
 800823c:	460c      	mov	r4, r1
 800823e:	2001      	movs	r0, #1
 8008240:	fb0c 3202 	mla	r2, ip, r2, r3
 8008244:	e7a5      	b.n	8008192 <_vfiprintf_r+0x11a>
 8008246:	2300      	movs	r3, #0
 8008248:	f04f 0c0a 	mov.w	ip, #10
 800824c:	4619      	mov	r1, r3
 800824e:	3401      	adds	r4, #1
 8008250:	9305      	str	r3, [sp, #20]
 8008252:	4620      	mov	r0, r4
 8008254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008258:	3a30      	subs	r2, #48	; 0x30
 800825a:	2a09      	cmp	r2, #9
 800825c:	d903      	bls.n	8008266 <_vfiprintf_r+0x1ee>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d0c5      	beq.n	80081ee <_vfiprintf_r+0x176>
 8008262:	9105      	str	r1, [sp, #20]
 8008264:	e7c3      	b.n	80081ee <_vfiprintf_r+0x176>
 8008266:	4604      	mov	r4, r0
 8008268:	2301      	movs	r3, #1
 800826a:	fb0c 2101 	mla	r1, ip, r1, r2
 800826e:	e7f0      	b.n	8008252 <_vfiprintf_r+0x1da>
 8008270:	ab03      	add	r3, sp, #12
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	462a      	mov	r2, r5
 8008276:	4630      	mov	r0, r6
 8008278:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <_vfiprintf_r+0x25c>)
 800827a:	a904      	add	r1, sp, #16
 800827c:	f7fd fdee 	bl	8005e5c <_printf_float>
 8008280:	4607      	mov	r7, r0
 8008282:	1c78      	adds	r0, r7, #1
 8008284:	d1d6      	bne.n	8008234 <_vfiprintf_r+0x1bc>
 8008286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008288:	07d9      	lsls	r1, r3, #31
 800828a:	d405      	bmi.n	8008298 <_vfiprintf_r+0x220>
 800828c:	89ab      	ldrh	r3, [r5, #12]
 800828e:	059a      	lsls	r2, r3, #22
 8008290:	d402      	bmi.n	8008298 <_vfiprintf_r+0x220>
 8008292:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008294:	f000 faad 	bl	80087f2 <__retarget_lock_release_recursive>
 8008298:	89ab      	ldrh	r3, [r5, #12]
 800829a:	065b      	lsls	r3, r3, #25
 800829c:	f53f af12 	bmi.w	80080c4 <_vfiprintf_r+0x4c>
 80082a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082a2:	e711      	b.n	80080c8 <_vfiprintf_r+0x50>
 80082a4:	ab03      	add	r3, sp, #12
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	462a      	mov	r2, r5
 80082aa:	4630      	mov	r0, r6
 80082ac:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <_vfiprintf_r+0x25c>)
 80082ae:	a904      	add	r1, sp, #16
 80082b0:	f7fe f870 	bl	8006394 <_printf_i>
 80082b4:	e7e4      	b.n	8008280 <_vfiprintf_r+0x208>
 80082b6:	bf00      	nop
 80082b8:	08009020 	.word	0x08009020
 80082bc:	08009040 	.word	0x08009040
 80082c0:	08009000 	.word	0x08009000
 80082c4:	08008fec 	.word	0x08008fec
 80082c8:	08008ff2 	.word	0x08008ff2
 80082cc:	08008ff6 	.word	0x08008ff6
 80082d0:	08005e5d 	.word	0x08005e5d
 80082d4:	08008053 	.word	0x08008053

080082d8 <_sbrk_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	2300      	movs	r3, #0
 80082dc:	4d05      	ldr	r5, [pc, #20]	; (80082f4 <_sbrk_r+0x1c>)
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7f9 fc24 	bl	8001b30 <_sbrk>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_sbrk_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_sbrk_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	2000048c 	.word	0x2000048c

080082f8 <__swbuf_r>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	460e      	mov	r6, r1
 80082fc:	4614      	mov	r4, r2
 80082fe:	4605      	mov	r5, r0
 8008300:	b118      	cbz	r0, 800830a <__swbuf_r+0x12>
 8008302:	6983      	ldr	r3, [r0, #24]
 8008304:	b90b      	cbnz	r3, 800830a <__swbuf_r+0x12>
 8008306:	f000 f9d5 	bl	80086b4 <__sinit>
 800830a:	4b21      	ldr	r3, [pc, #132]	; (8008390 <__swbuf_r+0x98>)
 800830c:	429c      	cmp	r4, r3
 800830e:	d12b      	bne.n	8008368 <__swbuf_r+0x70>
 8008310:	686c      	ldr	r4, [r5, #4]
 8008312:	69a3      	ldr	r3, [r4, #24]
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	071a      	lsls	r2, r3, #28
 800831a:	d52f      	bpl.n	800837c <__swbuf_r+0x84>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	b36b      	cbz	r3, 800837c <__swbuf_r+0x84>
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	6820      	ldr	r0, [r4, #0]
 8008324:	b2f6      	uxtb	r6, r6
 8008326:	1ac0      	subs	r0, r0, r3
 8008328:	6963      	ldr	r3, [r4, #20]
 800832a:	4637      	mov	r7, r6
 800832c:	4283      	cmp	r3, r0
 800832e:	dc04      	bgt.n	800833a <__swbuf_r+0x42>
 8008330:	4621      	mov	r1, r4
 8008332:	4628      	mov	r0, r5
 8008334:	f000 f92a 	bl	800858c <_fflush_r>
 8008338:	bb30      	cbnz	r0, 8008388 <__swbuf_r+0x90>
 800833a:	68a3      	ldr	r3, [r4, #8]
 800833c:	3001      	adds	r0, #1
 800833e:	3b01      	subs	r3, #1
 8008340:	60a3      	str	r3, [r4, #8]
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	701e      	strb	r6, [r3, #0]
 800834a:	6963      	ldr	r3, [r4, #20]
 800834c:	4283      	cmp	r3, r0
 800834e:	d004      	beq.n	800835a <__swbuf_r+0x62>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	07db      	lsls	r3, r3, #31
 8008354:	d506      	bpl.n	8008364 <__swbuf_r+0x6c>
 8008356:	2e0a      	cmp	r6, #10
 8008358:	d104      	bne.n	8008364 <__swbuf_r+0x6c>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 f915 	bl	800858c <_fflush_r>
 8008362:	b988      	cbnz	r0, 8008388 <__swbuf_r+0x90>
 8008364:	4638      	mov	r0, r7
 8008366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <__swbuf_r+0x9c>)
 800836a:	429c      	cmp	r4, r3
 800836c:	d101      	bne.n	8008372 <__swbuf_r+0x7a>
 800836e:	68ac      	ldr	r4, [r5, #8]
 8008370:	e7cf      	b.n	8008312 <__swbuf_r+0x1a>
 8008372:	4b09      	ldr	r3, [pc, #36]	; (8008398 <__swbuf_r+0xa0>)
 8008374:	429c      	cmp	r4, r3
 8008376:	bf08      	it	eq
 8008378:	68ec      	ldreq	r4, [r5, #12]
 800837a:	e7ca      	b.n	8008312 <__swbuf_r+0x1a>
 800837c:	4621      	mov	r1, r4
 800837e:	4628      	mov	r0, r5
 8008380:	f000 f80c 	bl	800839c <__swsetup_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	d0cb      	beq.n	8008320 <__swbuf_r+0x28>
 8008388:	f04f 37ff 	mov.w	r7, #4294967295
 800838c:	e7ea      	b.n	8008364 <__swbuf_r+0x6c>
 800838e:	bf00      	nop
 8008390:	08009020 	.word	0x08009020
 8008394:	08009040 	.word	0x08009040
 8008398:	08009000 	.word	0x08009000

0800839c <__swsetup_r>:
 800839c:	4b32      	ldr	r3, [pc, #200]	; (8008468 <__swsetup_r+0xcc>)
 800839e:	b570      	push	{r4, r5, r6, lr}
 80083a0:	681d      	ldr	r5, [r3, #0]
 80083a2:	4606      	mov	r6, r0
 80083a4:	460c      	mov	r4, r1
 80083a6:	b125      	cbz	r5, 80083b2 <__swsetup_r+0x16>
 80083a8:	69ab      	ldr	r3, [r5, #24]
 80083aa:	b913      	cbnz	r3, 80083b2 <__swsetup_r+0x16>
 80083ac:	4628      	mov	r0, r5
 80083ae:	f000 f981 	bl	80086b4 <__sinit>
 80083b2:	4b2e      	ldr	r3, [pc, #184]	; (800846c <__swsetup_r+0xd0>)
 80083b4:	429c      	cmp	r4, r3
 80083b6:	d10f      	bne.n	80083d8 <__swsetup_r+0x3c>
 80083b8:	686c      	ldr	r4, [r5, #4]
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083c0:	0719      	lsls	r1, r3, #28
 80083c2:	d42c      	bmi.n	800841e <__swsetup_r+0x82>
 80083c4:	06dd      	lsls	r5, r3, #27
 80083c6:	d411      	bmi.n	80083ec <__swsetup_r+0x50>
 80083c8:	2309      	movs	r3, #9
 80083ca:	6033      	str	r3, [r6, #0]
 80083cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	e03e      	b.n	8008456 <__swsetup_r+0xba>
 80083d8:	4b25      	ldr	r3, [pc, #148]	; (8008470 <__swsetup_r+0xd4>)
 80083da:	429c      	cmp	r4, r3
 80083dc:	d101      	bne.n	80083e2 <__swsetup_r+0x46>
 80083de:	68ac      	ldr	r4, [r5, #8]
 80083e0:	e7eb      	b.n	80083ba <__swsetup_r+0x1e>
 80083e2:	4b24      	ldr	r3, [pc, #144]	; (8008474 <__swsetup_r+0xd8>)
 80083e4:	429c      	cmp	r4, r3
 80083e6:	bf08      	it	eq
 80083e8:	68ec      	ldreq	r4, [r5, #12]
 80083ea:	e7e6      	b.n	80083ba <__swsetup_r+0x1e>
 80083ec:	0758      	lsls	r0, r3, #29
 80083ee:	d512      	bpl.n	8008416 <__swsetup_r+0x7a>
 80083f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083f2:	b141      	cbz	r1, 8008406 <__swsetup_r+0x6a>
 80083f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d002      	beq.n	8008402 <__swsetup_r+0x66>
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7ff fbdb 	bl	8007bb8 <_free_r>
 8008402:	2300      	movs	r3, #0
 8008404:	6363      	str	r3, [r4, #52]	; 0x34
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	2300      	movs	r3, #0
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	f043 0308 	orr.w	r3, r3, #8
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	b94b      	cbnz	r3, 8008436 <__swsetup_r+0x9a>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800842c:	d003      	beq.n	8008436 <__swsetup_r+0x9a>
 800842e:	4621      	mov	r1, r4
 8008430:	4630      	mov	r0, r6
 8008432:	f000 fa05 	bl	8008840 <__smakebuf_r>
 8008436:	89a0      	ldrh	r0, [r4, #12]
 8008438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800843c:	f010 0301 	ands.w	r3, r0, #1
 8008440:	d00a      	beq.n	8008458 <__swsetup_r+0xbc>
 8008442:	2300      	movs	r3, #0
 8008444:	60a3      	str	r3, [r4, #8]
 8008446:	6963      	ldr	r3, [r4, #20]
 8008448:	425b      	negs	r3, r3
 800844a:	61a3      	str	r3, [r4, #24]
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	b943      	cbnz	r3, 8008462 <__swsetup_r+0xc6>
 8008450:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008454:	d1ba      	bne.n	80083cc <__swsetup_r+0x30>
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	0781      	lsls	r1, r0, #30
 800845a:	bf58      	it	pl
 800845c:	6963      	ldrpl	r3, [r4, #20]
 800845e:	60a3      	str	r3, [r4, #8]
 8008460:	e7f4      	b.n	800844c <__swsetup_r+0xb0>
 8008462:	2000      	movs	r0, #0
 8008464:	e7f7      	b.n	8008456 <__swsetup_r+0xba>
 8008466:	bf00      	nop
 8008468:	20000060 	.word	0x20000060
 800846c:	08009020 	.word	0x08009020
 8008470:	08009040 	.word	0x08009040
 8008474:	08009000 	.word	0x08009000

08008478 <abort>:
 8008478:	2006      	movs	r0, #6
 800847a:	b508      	push	{r3, lr}
 800847c:	f000 fab0 	bl	80089e0 <raise>
 8008480:	2001      	movs	r0, #1
 8008482:	f7f9 fae2 	bl	8001a4a <_exit>
	...

08008488 <__sflush_r>:
 8008488:	898a      	ldrh	r2, [r1, #12]
 800848a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848c:	4605      	mov	r5, r0
 800848e:	0710      	lsls	r0, r2, #28
 8008490:	460c      	mov	r4, r1
 8008492:	d457      	bmi.n	8008544 <__sflush_r+0xbc>
 8008494:	684b      	ldr	r3, [r1, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	dc04      	bgt.n	80084a4 <__sflush_r+0x1c>
 800849a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	dc01      	bgt.n	80084a4 <__sflush_r+0x1c>
 80084a0:	2000      	movs	r0, #0
 80084a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084a6:	2e00      	cmp	r6, #0
 80084a8:	d0fa      	beq.n	80084a0 <__sflush_r+0x18>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80084b0:	682f      	ldr	r7, [r5, #0]
 80084b2:	602b      	str	r3, [r5, #0]
 80084b4:	d032      	beq.n	800851c <__sflush_r+0x94>
 80084b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	075a      	lsls	r2, r3, #29
 80084bc:	d505      	bpl.n	80084ca <__sflush_r+0x42>
 80084be:	6863      	ldr	r3, [r4, #4]
 80084c0:	1ac0      	subs	r0, r0, r3
 80084c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084c4:	b10b      	cbz	r3, 80084ca <__sflush_r+0x42>
 80084c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084c8:	1ac0      	subs	r0, r0, r3
 80084ca:	2300      	movs	r3, #0
 80084cc:	4602      	mov	r2, r0
 80084ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084d0:	4628      	mov	r0, r5
 80084d2:	6a21      	ldr	r1, [r4, #32]
 80084d4:	47b0      	blx	r6
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	d106      	bne.n	80084ea <__sflush_r+0x62>
 80084dc:	6829      	ldr	r1, [r5, #0]
 80084de:	291d      	cmp	r1, #29
 80084e0:	d82c      	bhi.n	800853c <__sflush_r+0xb4>
 80084e2:	4a29      	ldr	r2, [pc, #164]	; (8008588 <__sflush_r+0x100>)
 80084e4:	40ca      	lsrs	r2, r1
 80084e6:	07d6      	lsls	r6, r2, #31
 80084e8:	d528      	bpl.n	800853c <__sflush_r+0xb4>
 80084ea:	2200      	movs	r2, #0
 80084ec:	6062      	str	r2, [r4, #4]
 80084ee:	6922      	ldr	r2, [r4, #16]
 80084f0:	04d9      	lsls	r1, r3, #19
 80084f2:	6022      	str	r2, [r4, #0]
 80084f4:	d504      	bpl.n	8008500 <__sflush_r+0x78>
 80084f6:	1c42      	adds	r2, r0, #1
 80084f8:	d101      	bne.n	80084fe <__sflush_r+0x76>
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	b903      	cbnz	r3, 8008500 <__sflush_r+0x78>
 80084fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008502:	602f      	str	r7, [r5, #0]
 8008504:	2900      	cmp	r1, #0
 8008506:	d0cb      	beq.n	80084a0 <__sflush_r+0x18>
 8008508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800850c:	4299      	cmp	r1, r3
 800850e:	d002      	beq.n	8008516 <__sflush_r+0x8e>
 8008510:	4628      	mov	r0, r5
 8008512:	f7ff fb51 	bl	8007bb8 <_free_r>
 8008516:	2000      	movs	r0, #0
 8008518:	6360      	str	r0, [r4, #52]	; 0x34
 800851a:	e7c2      	b.n	80084a2 <__sflush_r+0x1a>
 800851c:	6a21      	ldr	r1, [r4, #32]
 800851e:	2301      	movs	r3, #1
 8008520:	4628      	mov	r0, r5
 8008522:	47b0      	blx	r6
 8008524:	1c41      	adds	r1, r0, #1
 8008526:	d1c7      	bne.n	80084b8 <__sflush_r+0x30>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0c4      	beq.n	80084b8 <__sflush_r+0x30>
 800852e:	2b1d      	cmp	r3, #29
 8008530:	d001      	beq.n	8008536 <__sflush_r+0xae>
 8008532:	2b16      	cmp	r3, #22
 8008534:	d101      	bne.n	800853a <__sflush_r+0xb2>
 8008536:	602f      	str	r7, [r5, #0]
 8008538:	e7b2      	b.n	80084a0 <__sflush_r+0x18>
 800853a:	89a3      	ldrh	r3, [r4, #12]
 800853c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	e7ae      	b.n	80084a2 <__sflush_r+0x1a>
 8008544:	690f      	ldr	r7, [r1, #16]
 8008546:	2f00      	cmp	r7, #0
 8008548:	d0aa      	beq.n	80084a0 <__sflush_r+0x18>
 800854a:	0793      	lsls	r3, r2, #30
 800854c:	bf18      	it	ne
 800854e:	2300      	movne	r3, #0
 8008550:	680e      	ldr	r6, [r1, #0]
 8008552:	bf08      	it	eq
 8008554:	694b      	ldreq	r3, [r1, #20]
 8008556:	1bf6      	subs	r6, r6, r7
 8008558:	600f      	str	r7, [r1, #0]
 800855a:	608b      	str	r3, [r1, #8]
 800855c:	2e00      	cmp	r6, #0
 800855e:	dd9f      	ble.n	80084a0 <__sflush_r+0x18>
 8008560:	4633      	mov	r3, r6
 8008562:	463a      	mov	r2, r7
 8008564:	4628      	mov	r0, r5
 8008566:	6a21      	ldr	r1, [r4, #32]
 8008568:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800856c:	47e0      	blx	ip
 800856e:	2800      	cmp	r0, #0
 8008570:	dc06      	bgt.n	8008580 <__sflush_r+0xf8>
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800857c:	81a3      	strh	r3, [r4, #12]
 800857e:	e790      	b.n	80084a2 <__sflush_r+0x1a>
 8008580:	4407      	add	r7, r0
 8008582:	1a36      	subs	r6, r6, r0
 8008584:	e7ea      	b.n	800855c <__sflush_r+0xd4>
 8008586:	bf00      	nop
 8008588:	20400001 	.word	0x20400001

0800858c <_fflush_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	690b      	ldr	r3, [r1, #16]
 8008590:	4605      	mov	r5, r0
 8008592:	460c      	mov	r4, r1
 8008594:	b913      	cbnz	r3, 800859c <_fflush_r+0x10>
 8008596:	2500      	movs	r5, #0
 8008598:	4628      	mov	r0, r5
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	b118      	cbz	r0, 80085a6 <_fflush_r+0x1a>
 800859e:	6983      	ldr	r3, [r0, #24]
 80085a0:	b90b      	cbnz	r3, 80085a6 <_fflush_r+0x1a>
 80085a2:	f000 f887 	bl	80086b4 <__sinit>
 80085a6:	4b14      	ldr	r3, [pc, #80]	; (80085f8 <_fflush_r+0x6c>)
 80085a8:	429c      	cmp	r4, r3
 80085aa:	d11b      	bne.n	80085e4 <_fflush_r+0x58>
 80085ac:	686c      	ldr	r4, [r5, #4]
 80085ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0ef      	beq.n	8008596 <_fflush_r+0xa>
 80085b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80085b8:	07d0      	lsls	r0, r2, #31
 80085ba:	d404      	bmi.n	80085c6 <_fflush_r+0x3a>
 80085bc:	0599      	lsls	r1, r3, #22
 80085be:	d402      	bmi.n	80085c6 <_fflush_r+0x3a>
 80085c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085c2:	f000 f915 	bl	80087f0 <__retarget_lock_acquire_recursive>
 80085c6:	4628      	mov	r0, r5
 80085c8:	4621      	mov	r1, r4
 80085ca:	f7ff ff5d 	bl	8008488 <__sflush_r>
 80085ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085d0:	4605      	mov	r5, r0
 80085d2:	07da      	lsls	r2, r3, #31
 80085d4:	d4e0      	bmi.n	8008598 <_fflush_r+0xc>
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	059b      	lsls	r3, r3, #22
 80085da:	d4dd      	bmi.n	8008598 <_fflush_r+0xc>
 80085dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085de:	f000 f908 	bl	80087f2 <__retarget_lock_release_recursive>
 80085e2:	e7d9      	b.n	8008598 <_fflush_r+0xc>
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <_fflush_r+0x70>)
 80085e6:	429c      	cmp	r4, r3
 80085e8:	d101      	bne.n	80085ee <_fflush_r+0x62>
 80085ea:	68ac      	ldr	r4, [r5, #8]
 80085ec:	e7df      	b.n	80085ae <_fflush_r+0x22>
 80085ee:	4b04      	ldr	r3, [pc, #16]	; (8008600 <_fflush_r+0x74>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	bf08      	it	eq
 80085f4:	68ec      	ldreq	r4, [r5, #12]
 80085f6:	e7da      	b.n	80085ae <_fflush_r+0x22>
 80085f8:	08009020 	.word	0x08009020
 80085fc:	08009040 	.word	0x08009040
 8008600:	08009000 	.word	0x08009000

08008604 <std>:
 8008604:	2300      	movs	r3, #0
 8008606:	b510      	push	{r4, lr}
 8008608:	4604      	mov	r4, r0
 800860a:	e9c0 3300 	strd	r3, r3, [r0]
 800860e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008612:	6083      	str	r3, [r0, #8]
 8008614:	8181      	strh	r1, [r0, #12]
 8008616:	6643      	str	r3, [r0, #100]	; 0x64
 8008618:	81c2      	strh	r2, [r0, #14]
 800861a:	6183      	str	r3, [r0, #24]
 800861c:	4619      	mov	r1, r3
 800861e:	2208      	movs	r2, #8
 8008620:	305c      	adds	r0, #92	; 0x5c
 8008622:	f7fd fb75 	bl	8005d10 <memset>
 8008626:	4b05      	ldr	r3, [pc, #20]	; (800863c <std+0x38>)
 8008628:	6224      	str	r4, [r4, #32]
 800862a:	6263      	str	r3, [r4, #36]	; 0x24
 800862c:	4b04      	ldr	r3, [pc, #16]	; (8008640 <std+0x3c>)
 800862e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008630:	4b04      	ldr	r3, [pc, #16]	; (8008644 <std+0x40>)
 8008632:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008634:	4b04      	ldr	r3, [pc, #16]	; (8008648 <std+0x44>)
 8008636:	6323      	str	r3, [r4, #48]	; 0x30
 8008638:	bd10      	pop	{r4, pc}
 800863a:	bf00      	nop
 800863c:	08008a19 	.word	0x08008a19
 8008640:	08008a3b 	.word	0x08008a3b
 8008644:	08008a73 	.word	0x08008a73
 8008648:	08008a97 	.word	0x08008a97

0800864c <_cleanup_r>:
 800864c:	4901      	ldr	r1, [pc, #4]	; (8008654 <_cleanup_r+0x8>)
 800864e:	f000 b8af 	b.w	80087b0 <_fwalk_reent>
 8008652:	bf00      	nop
 8008654:	0800858d 	.word	0x0800858d

08008658 <__sfmoreglue>:
 8008658:	2268      	movs	r2, #104	; 0x68
 800865a:	b570      	push	{r4, r5, r6, lr}
 800865c:	1e4d      	subs	r5, r1, #1
 800865e:	4355      	muls	r5, r2
 8008660:	460e      	mov	r6, r1
 8008662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008666:	f7ff fb0f 	bl	8007c88 <_malloc_r>
 800866a:	4604      	mov	r4, r0
 800866c:	b140      	cbz	r0, 8008680 <__sfmoreglue+0x28>
 800866e:	2100      	movs	r1, #0
 8008670:	e9c0 1600 	strd	r1, r6, [r0]
 8008674:	300c      	adds	r0, #12
 8008676:	60a0      	str	r0, [r4, #8]
 8008678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800867c:	f7fd fb48 	bl	8005d10 <memset>
 8008680:	4620      	mov	r0, r4
 8008682:	bd70      	pop	{r4, r5, r6, pc}

08008684 <__sfp_lock_acquire>:
 8008684:	4801      	ldr	r0, [pc, #4]	; (800868c <__sfp_lock_acquire+0x8>)
 8008686:	f000 b8b3 	b.w	80087f0 <__retarget_lock_acquire_recursive>
 800868a:	bf00      	nop
 800868c:	20000489 	.word	0x20000489

08008690 <__sfp_lock_release>:
 8008690:	4801      	ldr	r0, [pc, #4]	; (8008698 <__sfp_lock_release+0x8>)
 8008692:	f000 b8ae 	b.w	80087f2 <__retarget_lock_release_recursive>
 8008696:	bf00      	nop
 8008698:	20000489 	.word	0x20000489

0800869c <__sinit_lock_acquire>:
 800869c:	4801      	ldr	r0, [pc, #4]	; (80086a4 <__sinit_lock_acquire+0x8>)
 800869e:	f000 b8a7 	b.w	80087f0 <__retarget_lock_acquire_recursive>
 80086a2:	bf00      	nop
 80086a4:	2000048a 	.word	0x2000048a

080086a8 <__sinit_lock_release>:
 80086a8:	4801      	ldr	r0, [pc, #4]	; (80086b0 <__sinit_lock_release+0x8>)
 80086aa:	f000 b8a2 	b.w	80087f2 <__retarget_lock_release_recursive>
 80086ae:	bf00      	nop
 80086b0:	2000048a 	.word	0x2000048a

080086b4 <__sinit>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	4604      	mov	r4, r0
 80086b8:	f7ff fff0 	bl	800869c <__sinit_lock_acquire>
 80086bc:	69a3      	ldr	r3, [r4, #24]
 80086be:	b11b      	cbz	r3, 80086c8 <__sinit+0x14>
 80086c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c4:	f7ff bff0 	b.w	80086a8 <__sinit_lock_release>
 80086c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80086cc:	6523      	str	r3, [r4, #80]	; 0x50
 80086ce:	4b13      	ldr	r3, [pc, #76]	; (800871c <__sinit+0x68>)
 80086d0:	4a13      	ldr	r2, [pc, #76]	; (8008720 <__sinit+0x6c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	bf08      	it	eq
 80086da:	2301      	moveq	r3, #1
 80086dc:	4620      	mov	r0, r4
 80086de:	bf08      	it	eq
 80086e0:	61a3      	streq	r3, [r4, #24]
 80086e2:	f000 f81f 	bl	8008724 <__sfp>
 80086e6:	6060      	str	r0, [r4, #4]
 80086e8:	4620      	mov	r0, r4
 80086ea:	f000 f81b 	bl	8008724 <__sfp>
 80086ee:	60a0      	str	r0, [r4, #8]
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 f817 	bl	8008724 <__sfp>
 80086f6:	2200      	movs	r2, #0
 80086f8:	2104      	movs	r1, #4
 80086fa:	60e0      	str	r0, [r4, #12]
 80086fc:	6860      	ldr	r0, [r4, #4]
 80086fe:	f7ff ff81 	bl	8008604 <std>
 8008702:	2201      	movs	r2, #1
 8008704:	2109      	movs	r1, #9
 8008706:	68a0      	ldr	r0, [r4, #8]
 8008708:	f7ff ff7c 	bl	8008604 <std>
 800870c:	2202      	movs	r2, #2
 800870e:	2112      	movs	r1, #18
 8008710:	68e0      	ldr	r0, [r4, #12]
 8008712:	f7ff ff77 	bl	8008604 <std>
 8008716:	2301      	movs	r3, #1
 8008718:	61a3      	str	r3, [r4, #24]
 800871a:	e7d1      	b.n	80086c0 <__sinit+0xc>
 800871c:	08008d2c 	.word	0x08008d2c
 8008720:	0800864d 	.word	0x0800864d

08008724 <__sfp>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	4607      	mov	r7, r0
 8008728:	f7ff ffac 	bl	8008684 <__sfp_lock_acquire>
 800872c:	4b1e      	ldr	r3, [pc, #120]	; (80087a8 <__sfp+0x84>)
 800872e:	681e      	ldr	r6, [r3, #0]
 8008730:	69b3      	ldr	r3, [r6, #24]
 8008732:	b913      	cbnz	r3, 800873a <__sfp+0x16>
 8008734:	4630      	mov	r0, r6
 8008736:	f7ff ffbd 	bl	80086b4 <__sinit>
 800873a:	3648      	adds	r6, #72	; 0x48
 800873c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008740:	3b01      	subs	r3, #1
 8008742:	d503      	bpl.n	800874c <__sfp+0x28>
 8008744:	6833      	ldr	r3, [r6, #0]
 8008746:	b30b      	cbz	r3, 800878c <__sfp+0x68>
 8008748:	6836      	ldr	r6, [r6, #0]
 800874a:	e7f7      	b.n	800873c <__sfp+0x18>
 800874c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008750:	b9d5      	cbnz	r5, 8008788 <__sfp+0x64>
 8008752:	4b16      	ldr	r3, [pc, #88]	; (80087ac <__sfp+0x88>)
 8008754:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008758:	60e3      	str	r3, [r4, #12]
 800875a:	6665      	str	r5, [r4, #100]	; 0x64
 800875c:	f000 f847 	bl	80087ee <__retarget_lock_init_recursive>
 8008760:	f7ff ff96 	bl	8008690 <__sfp_lock_release>
 8008764:	2208      	movs	r2, #8
 8008766:	4629      	mov	r1, r5
 8008768:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800876c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008770:	6025      	str	r5, [r4, #0]
 8008772:	61a5      	str	r5, [r4, #24]
 8008774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008778:	f7fd faca 	bl	8005d10 <memset>
 800877c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008784:	4620      	mov	r0, r4
 8008786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008788:	3468      	adds	r4, #104	; 0x68
 800878a:	e7d9      	b.n	8008740 <__sfp+0x1c>
 800878c:	2104      	movs	r1, #4
 800878e:	4638      	mov	r0, r7
 8008790:	f7ff ff62 	bl	8008658 <__sfmoreglue>
 8008794:	4604      	mov	r4, r0
 8008796:	6030      	str	r0, [r6, #0]
 8008798:	2800      	cmp	r0, #0
 800879a:	d1d5      	bne.n	8008748 <__sfp+0x24>
 800879c:	f7ff ff78 	bl	8008690 <__sfp_lock_release>
 80087a0:	230c      	movs	r3, #12
 80087a2:	603b      	str	r3, [r7, #0]
 80087a4:	e7ee      	b.n	8008784 <__sfp+0x60>
 80087a6:	bf00      	nop
 80087a8:	08008d2c 	.word	0x08008d2c
 80087ac:	ffff0001 	.word	0xffff0001

080087b0 <_fwalk_reent>:
 80087b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b4:	4606      	mov	r6, r0
 80087b6:	4688      	mov	r8, r1
 80087b8:	2700      	movs	r7, #0
 80087ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80087be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087c2:	f1b9 0901 	subs.w	r9, r9, #1
 80087c6:	d505      	bpl.n	80087d4 <_fwalk_reent+0x24>
 80087c8:	6824      	ldr	r4, [r4, #0]
 80087ca:	2c00      	cmp	r4, #0
 80087cc:	d1f7      	bne.n	80087be <_fwalk_reent+0xe>
 80087ce:	4638      	mov	r0, r7
 80087d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d4:	89ab      	ldrh	r3, [r5, #12]
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d907      	bls.n	80087ea <_fwalk_reent+0x3a>
 80087da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087de:	3301      	adds	r3, #1
 80087e0:	d003      	beq.n	80087ea <_fwalk_reent+0x3a>
 80087e2:	4629      	mov	r1, r5
 80087e4:	4630      	mov	r0, r6
 80087e6:	47c0      	blx	r8
 80087e8:	4307      	orrs	r7, r0
 80087ea:	3568      	adds	r5, #104	; 0x68
 80087ec:	e7e9      	b.n	80087c2 <_fwalk_reent+0x12>

080087ee <__retarget_lock_init_recursive>:
 80087ee:	4770      	bx	lr

080087f0 <__retarget_lock_acquire_recursive>:
 80087f0:	4770      	bx	lr

080087f2 <__retarget_lock_release_recursive>:
 80087f2:	4770      	bx	lr

080087f4 <__swhatbuf_r>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	460e      	mov	r6, r1
 80087f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087fc:	4614      	mov	r4, r2
 80087fe:	2900      	cmp	r1, #0
 8008800:	461d      	mov	r5, r3
 8008802:	b096      	sub	sp, #88	; 0x58
 8008804:	da08      	bge.n	8008818 <__swhatbuf_r+0x24>
 8008806:	2200      	movs	r2, #0
 8008808:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800880c:	602a      	str	r2, [r5, #0]
 800880e:	061a      	lsls	r2, r3, #24
 8008810:	d410      	bmi.n	8008834 <__swhatbuf_r+0x40>
 8008812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008816:	e00e      	b.n	8008836 <__swhatbuf_r+0x42>
 8008818:	466a      	mov	r2, sp
 800881a:	f000 f96f 	bl	8008afc <_fstat_r>
 800881e:	2800      	cmp	r0, #0
 8008820:	dbf1      	blt.n	8008806 <__swhatbuf_r+0x12>
 8008822:	9a01      	ldr	r2, [sp, #4]
 8008824:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008828:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800882c:	425a      	negs	r2, r3
 800882e:	415a      	adcs	r2, r3
 8008830:	602a      	str	r2, [r5, #0]
 8008832:	e7ee      	b.n	8008812 <__swhatbuf_r+0x1e>
 8008834:	2340      	movs	r3, #64	; 0x40
 8008836:	2000      	movs	r0, #0
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	b016      	add	sp, #88	; 0x58
 800883c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008840 <__smakebuf_r>:
 8008840:	898b      	ldrh	r3, [r1, #12]
 8008842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008844:	079d      	lsls	r5, r3, #30
 8008846:	4606      	mov	r6, r0
 8008848:	460c      	mov	r4, r1
 800884a:	d507      	bpl.n	800885c <__smakebuf_r+0x1c>
 800884c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	2301      	movs	r3, #1
 8008856:	6163      	str	r3, [r4, #20]
 8008858:	b002      	add	sp, #8
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	466a      	mov	r2, sp
 800885e:	ab01      	add	r3, sp, #4
 8008860:	f7ff ffc8 	bl	80087f4 <__swhatbuf_r>
 8008864:	9900      	ldr	r1, [sp, #0]
 8008866:	4605      	mov	r5, r0
 8008868:	4630      	mov	r0, r6
 800886a:	f7ff fa0d 	bl	8007c88 <_malloc_r>
 800886e:	b948      	cbnz	r0, 8008884 <__smakebuf_r+0x44>
 8008870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008874:	059a      	lsls	r2, r3, #22
 8008876:	d4ef      	bmi.n	8008858 <__smakebuf_r+0x18>
 8008878:	f023 0303 	bic.w	r3, r3, #3
 800887c:	f043 0302 	orr.w	r3, r3, #2
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	e7e3      	b.n	800884c <__smakebuf_r+0xc>
 8008884:	4b0d      	ldr	r3, [pc, #52]	; (80088bc <__smakebuf_r+0x7c>)
 8008886:	62b3      	str	r3, [r6, #40]	; 0x28
 8008888:	89a3      	ldrh	r3, [r4, #12]
 800888a:	6020      	str	r0, [r4, #0]
 800888c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	9b00      	ldr	r3, [sp, #0]
 8008894:	6120      	str	r0, [r4, #16]
 8008896:	6163      	str	r3, [r4, #20]
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	b15b      	cbz	r3, 80088b4 <__smakebuf_r+0x74>
 800889c:	4630      	mov	r0, r6
 800889e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088a2:	f000 f93d 	bl	8008b20 <_isatty_r>
 80088a6:	b128      	cbz	r0, 80088b4 <__smakebuf_r+0x74>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f023 0303 	bic.w	r3, r3, #3
 80088ae:	f043 0301 	orr.w	r3, r3, #1
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	89a0      	ldrh	r0, [r4, #12]
 80088b6:	4305      	orrs	r5, r0
 80088b8:	81a5      	strh	r5, [r4, #12]
 80088ba:	e7cd      	b.n	8008858 <__smakebuf_r+0x18>
 80088bc:	0800864d 	.word	0x0800864d

080088c0 <__ascii_mbtowc>:
 80088c0:	b082      	sub	sp, #8
 80088c2:	b901      	cbnz	r1, 80088c6 <__ascii_mbtowc+0x6>
 80088c4:	a901      	add	r1, sp, #4
 80088c6:	b142      	cbz	r2, 80088da <__ascii_mbtowc+0x1a>
 80088c8:	b14b      	cbz	r3, 80088de <__ascii_mbtowc+0x1e>
 80088ca:	7813      	ldrb	r3, [r2, #0]
 80088cc:	600b      	str	r3, [r1, #0]
 80088ce:	7812      	ldrb	r2, [r2, #0]
 80088d0:	1e10      	subs	r0, r2, #0
 80088d2:	bf18      	it	ne
 80088d4:	2001      	movne	r0, #1
 80088d6:	b002      	add	sp, #8
 80088d8:	4770      	bx	lr
 80088da:	4610      	mov	r0, r2
 80088dc:	e7fb      	b.n	80088d6 <__ascii_mbtowc+0x16>
 80088de:	f06f 0001 	mvn.w	r0, #1
 80088e2:	e7f8      	b.n	80088d6 <__ascii_mbtowc+0x16>

080088e4 <memmove>:
 80088e4:	4288      	cmp	r0, r1
 80088e6:	b510      	push	{r4, lr}
 80088e8:	eb01 0402 	add.w	r4, r1, r2
 80088ec:	d902      	bls.n	80088f4 <memmove+0x10>
 80088ee:	4284      	cmp	r4, r0
 80088f0:	4623      	mov	r3, r4
 80088f2:	d807      	bhi.n	8008904 <memmove+0x20>
 80088f4:	1e43      	subs	r3, r0, #1
 80088f6:	42a1      	cmp	r1, r4
 80088f8:	d008      	beq.n	800890c <memmove+0x28>
 80088fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008902:	e7f8      	b.n	80088f6 <memmove+0x12>
 8008904:	4601      	mov	r1, r0
 8008906:	4402      	add	r2, r0
 8008908:	428a      	cmp	r2, r1
 800890a:	d100      	bne.n	800890e <memmove+0x2a>
 800890c:	bd10      	pop	{r4, pc}
 800890e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008916:	e7f7      	b.n	8008908 <memmove+0x24>

08008918 <__malloc_lock>:
 8008918:	4801      	ldr	r0, [pc, #4]	; (8008920 <__malloc_lock+0x8>)
 800891a:	f7ff bf69 	b.w	80087f0 <__retarget_lock_acquire_recursive>
 800891e:	bf00      	nop
 8008920:	20000488 	.word	0x20000488

08008924 <__malloc_unlock>:
 8008924:	4801      	ldr	r0, [pc, #4]	; (800892c <__malloc_unlock+0x8>)
 8008926:	f7ff bf64 	b.w	80087f2 <__retarget_lock_release_recursive>
 800892a:	bf00      	nop
 800892c:	20000488 	.word	0x20000488

08008930 <_realloc_r>:
 8008930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008934:	4680      	mov	r8, r0
 8008936:	4614      	mov	r4, r2
 8008938:	460e      	mov	r6, r1
 800893a:	b921      	cbnz	r1, 8008946 <_realloc_r+0x16>
 800893c:	4611      	mov	r1, r2
 800893e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008942:	f7ff b9a1 	b.w	8007c88 <_malloc_r>
 8008946:	b92a      	cbnz	r2, 8008954 <_realloc_r+0x24>
 8008948:	f7ff f936 	bl	8007bb8 <_free_r>
 800894c:	4625      	mov	r5, r4
 800894e:	4628      	mov	r0, r5
 8008950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008954:	f000 f906 	bl	8008b64 <_malloc_usable_size_r>
 8008958:	4284      	cmp	r4, r0
 800895a:	4607      	mov	r7, r0
 800895c:	d802      	bhi.n	8008964 <_realloc_r+0x34>
 800895e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008962:	d812      	bhi.n	800898a <_realloc_r+0x5a>
 8008964:	4621      	mov	r1, r4
 8008966:	4640      	mov	r0, r8
 8008968:	f7ff f98e 	bl	8007c88 <_malloc_r>
 800896c:	4605      	mov	r5, r0
 800896e:	2800      	cmp	r0, #0
 8008970:	d0ed      	beq.n	800894e <_realloc_r+0x1e>
 8008972:	42bc      	cmp	r4, r7
 8008974:	4622      	mov	r2, r4
 8008976:	4631      	mov	r1, r6
 8008978:	bf28      	it	cs
 800897a:	463a      	movcs	r2, r7
 800897c:	f7fd f9ba 	bl	8005cf4 <memcpy>
 8008980:	4631      	mov	r1, r6
 8008982:	4640      	mov	r0, r8
 8008984:	f7ff f918 	bl	8007bb8 <_free_r>
 8008988:	e7e1      	b.n	800894e <_realloc_r+0x1e>
 800898a:	4635      	mov	r5, r6
 800898c:	e7df      	b.n	800894e <_realloc_r+0x1e>

0800898e <_raise_r>:
 800898e:	291f      	cmp	r1, #31
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4604      	mov	r4, r0
 8008994:	460d      	mov	r5, r1
 8008996:	d904      	bls.n	80089a2 <_raise_r+0x14>
 8008998:	2316      	movs	r3, #22
 800899a:	6003      	str	r3, [r0, #0]
 800899c:	f04f 30ff 	mov.w	r0, #4294967295
 80089a0:	bd38      	pop	{r3, r4, r5, pc}
 80089a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089a4:	b112      	cbz	r2, 80089ac <_raise_r+0x1e>
 80089a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089aa:	b94b      	cbnz	r3, 80089c0 <_raise_r+0x32>
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 f831 	bl	8008a14 <_getpid_r>
 80089b2:	462a      	mov	r2, r5
 80089b4:	4601      	mov	r1, r0
 80089b6:	4620      	mov	r0, r4
 80089b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089bc:	f000 b818 	b.w	80089f0 <_kill_r>
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d00a      	beq.n	80089da <_raise_r+0x4c>
 80089c4:	1c59      	adds	r1, r3, #1
 80089c6:	d103      	bne.n	80089d0 <_raise_r+0x42>
 80089c8:	2316      	movs	r3, #22
 80089ca:	6003      	str	r3, [r0, #0]
 80089cc:	2001      	movs	r0, #1
 80089ce:	e7e7      	b.n	80089a0 <_raise_r+0x12>
 80089d0:	2400      	movs	r4, #0
 80089d2:	4628      	mov	r0, r5
 80089d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089d8:	4798      	blx	r3
 80089da:	2000      	movs	r0, #0
 80089dc:	e7e0      	b.n	80089a0 <_raise_r+0x12>
	...

080089e0 <raise>:
 80089e0:	4b02      	ldr	r3, [pc, #8]	; (80089ec <raise+0xc>)
 80089e2:	4601      	mov	r1, r0
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	f7ff bfd2 	b.w	800898e <_raise_r>
 80089ea:	bf00      	nop
 80089ec:	20000060 	.word	0x20000060

080089f0 <_kill_r>:
 80089f0:	b538      	push	{r3, r4, r5, lr}
 80089f2:	2300      	movs	r3, #0
 80089f4:	4d06      	ldr	r5, [pc, #24]	; (8008a10 <_kill_r+0x20>)
 80089f6:	4604      	mov	r4, r0
 80089f8:	4608      	mov	r0, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	f7f9 f814 	bl	8001a2a <_kill>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	d102      	bne.n	8008a0c <_kill_r+0x1c>
 8008a06:	682b      	ldr	r3, [r5, #0]
 8008a08:	b103      	cbz	r3, 8008a0c <_kill_r+0x1c>
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	bd38      	pop	{r3, r4, r5, pc}
 8008a0e:	bf00      	nop
 8008a10:	2000048c 	.word	0x2000048c

08008a14 <_getpid_r>:
 8008a14:	f7f9 b802 	b.w	8001a1c <_getpid>

08008a18 <__sread>:
 8008a18:	b510      	push	{r4, lr}
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a20:	f000 f8a8 	bl	8008b74 <_read_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	bfab      	itete	ge
 8008a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a2c:	181b      	addge	r3, r3, r0
 8008a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a32:	bfac      	ite	ge
 8008a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a36:	81a3      	strhlt	r3, [r4, #12]
 8008a38:	bd10      	pop	{r4, pc}

08008a3a <__swrite>:
 8008a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a3e:	461f      	mov	r7, r3
 8008a40:	898b      	ldrh	r3, [r1, #12]
 8008a42:	4605      	mov	r5, r0
 8008a44:	05db      	lsls	r3, r3, #23
 8008a46:	460c      	mov	r4, r1
 8008a48:	4616      	mov	r6, r2
 8008a4a:	d505      	bpl.n	8008a58 <__swrite+0x1e>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a54:	f000 f874 	bl	8008b40 <_lseek_r>
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	4632      	mov	r2, r6
 8008a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a60:	81a3      	strh	r3, [r4, #12]
 8008a62:	4628      	mov	r0, r5
 8008a64:	463b      	mov	r3, r7
 8008a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	f000 b823 	b.w	8008ab8 <_write_r>

08008a72 <__sseek>:
 8008a72:	b510      	push	{r4, lr}
 8008a74:	460c      	mov	r4, r1
 8008a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a7a:	f000 f861 	bl	8008b40 <_lseek_r>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	bf15      	itete	ne
 8008a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a8e:	81a3      	strheq	r3, [r4, #12]
 8008a90:	bf18      	it	ne
 8008a92:	81a3      	strhne	r3, [r4, #12]
 8008a94:	bd10      	pop	{r4, pc}

08008a96 <__sclose>:
 8008a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9a:	f000 b81f 	b.w	8008adc <_close_r>

08008a9e <__ascii_wctomb>:
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	b141      	cbz	r1, 8008ab6 <__ascii_wctomb+0x18>
 8008aa4:	2aff      	cmp	r2, #255	; 0xff
 8008aa6:	d904      	bls.n	8008ab2 <__ascii_wctomb+0x14>
 8008aa8:	228a      	movs	r2, #138	; 0x8a
 8008aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	4770      	bx	lr
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	700a      	strb	r2, [r1, #0]
 8008ab6:	4770      	bx	lr

08008ab8 <_write_r>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	4d05      	ldr	r5, [pc, #20]	; (8008ad8 <_write_r+0x20>)
 8008ac4:	602a      	str	r2, [r5, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	f7f8 ffe6 	bl	8001a98 <_write>
 8008acc:	1c43      	adds	r3, r0, #1
 8008ace:	d102      	bne.n	8008ad6 <_write_r+0x1e>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	b103      	cbz	r3, 8008ad6 <_write_r+0x1e>
 8008ad4:	6023      	str	r3, [r4, #0]
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
 8008ad8:	2000048c 	.word	0x2000048c

08008adc <_close_r>:
 8008adc:	b538      	push	{r3, r4, r5, lr}
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4d05      	ldr	r5, [pc, #20]	; (8008af8 <_close_r+0x1c>)
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	4608      	mov	r0, r1
 8008ae6:	602b      	str	r3, [r5, #0]
 8008ae8:	f7f8 fff2 	bl	8001ad0 <_close>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_close_r+0x1a>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_close_r+0x1a>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	2000048c 	.word	0x2000048c

08008afc <_fstat_r>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	2300      	movs	r3, #0
 8008b00:	4d06      	ldr	r5, [pc, #24]	; (8008b1c <_fstat_r+0x20>)
 8008b02:	4604      	mov	r4, r0
 8008b04:	4608      	mov	r0, r1
 8008b06:	4611      	mov	r1, r2
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	f7f8 ffec 	bl	8001ae6 <_fstat>
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	d102      	bne.n	8008b18 <_fstat_r+0x1c>
 8008b12:	682b      	ldr	r3, [r5, #0]
 8008b14:	b103      	cbz	r3, 8008b18 <_fstat_r+0x1c>
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	bd38      	pop	{r3, r4, r5, pc}
 8008b1a:	bf00      	nop
 8008b1c:	2000048c 	.word	0x2000048c

08008b20 <_isatty_r>:
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	2300      	movs	r3, #0
 8008b24:	4d05      	ldr	r5, [pc, #20]	; (8008b3c <_isatty_r+0x1c>)
 8008b26:	4604      	mov	r4, r0
 8008b28:	4608      	mov	r0, r1
 8008b2a:	602b      	str	r3, [r5, #0]
 8008b2c:	f7f8 ffea 	bl	8001b04 <_isatty>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_isatty_r+0x1a>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_isatty_r+0x1a>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	2000048c 	.word	0x2000048c

08008b40 <_lseek_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4d05      	ldr	r5, [pc, #20]	; (8008b60 <_lseek_r+0x20>)
 8008b4c:	602a      	str	r2, [r5, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f7f8 ffe2 	bl	8001b18 <_lseek>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_lseek_r+0x1e>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_lseek_r+0x1e>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	2000048c 	.word	0x2000048c

08008b64 <_malloc_usable_size_r>:
 8008b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b68:	1f18      	subs	r0, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfbc      	itt	lt
 8008b6e:	580b      	ldrlt	r3, [r1, r0]
 8008b70:	18c0      	addlt	r0, r0, r3
 8008b72:	4770      	bx	lr

08008b74 <_read_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	4d05      	ldr	r5, [pc, #20]	; (8008b94 <_read_r+0x20>)
 8008b80:	602a      	str	r2, [r5, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	f7f8 ff6b 	bl	8001a5e <_read>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_read_r+0x1e>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_read_r+0x1e>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	2000048c 	.word	0x2000048c

08008b98 <_init>:
 8008b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b9a:	bf00      	nop
 8008b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9e:	bc08      	pop	{r3}
 8008ba0:	469e      	mov	lr, r3
 8008ba2:	4770      	bx	lr

08008ba4 <_fini>:
 8008ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba6:	bf00      	nop
 8008ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008baa:	bc08      	pop	{r3}
 8008bac:	469e      	mov	lr, r3
 8008bae:	4770      	bx	lr
